{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  if (!piece) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== isWhiteTurn) return false; // Kiểm tra lượt đi hợp lệ\n\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && isWhite === \"♙♖♘♗♕♔\".includes(targetPiece)) return false; // Không ăn quân cùng màu\n\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\":\n    case \"♜\":\n      return fromRow === toRow || fromCol === toCol;\n    case \"♘\":\n    case \"♞\":\n      return Math.abs(toCol - fromCol) === 2 && Math.abs(toRow - fromRow) === 1 || Math.abs(toCol - fromCol) === 1 && Math.abs(toRow - fromRow) === 2;\n    case \"♗\":\n    case \"♝\":\n      return Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\n    case \"♕\":\n    case \"♛\":\n      return fromRow === toRow || fromCol === toCol || Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\n    case \"♔\":\n    case \"♚\":\n      return Math.abs(toCol - fromCol) <= 1 && Math.abs(toRow - fromRow) <= 1;\n    default:\n      return false;\n  }\n};\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  if (fromCol === toCol && board[toRow][toCol] === \"\" && toRow - fromRow === direction) return true;\n  return false;\n};\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => fromRow === toRow || fromCol === toCol;\nconst isValidKnightMove = (dx, dy) => Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol) => Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol);\nconst isValidKingMove = (dx, dy) => Math.abs(dx) <= 1 && Math.abs(dy) <= 1;","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","isWhiteTurn","isWhite","includes","targetPiece","isValidPawnMove","Math","abs","direction","isValidRookMove","isValidKnightMove","dx","dy","isValidBishopMove","isValidQueenMove","isValidKingMove"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  if (!piece) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== isWhiteTurn) return false; // Kiểm tra lượt đi hợp lệ\n\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && (isWhite === \"♙♖♘♗♕♔\".includes(targetPiece))) return false; // Không ăn quân cùng màu\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\": case \"♜\": return fromRow === toRow || fromCol === toCol;\n    case \"♘\": case \"♞\": return (Math.abs(toCol - fromCol) === 2 && Math.abs(toRow - fromRow) === 1) ||\n                            (Math.abs(toCol - fromCol) === 1 && Math.abs(toRow - fromRow) === 2);\n    case \"♗\": case \"♝\": return Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\n    case \"♕\": case \"♛\": return fromRow === toRow || fromCol === toCol || Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\n    case \"♔\": case \"♚\": return Math.abs(toCol - fromCol) <= 1 && Math.abs(toRow - fromRow) <= 1;\n    default: return false;\n  }\n};\n\n\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  if (fromCol === toCol && board[toRow][toCol] === \"\" && toRow - fromRow === direction) return true;\n  return false;\n};\n\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => fromRow === toRow || fromCol === toCol;\nconst isValidKnightMove = (dx, dy) => (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol) => Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol);\nconst isValidKingMove = (dx, dy) => Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}