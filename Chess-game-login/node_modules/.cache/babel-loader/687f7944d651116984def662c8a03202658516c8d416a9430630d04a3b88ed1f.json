{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== isWhiteTurn) return false; // Kiểm tra lượt đi hợp lệ\n\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && isWhite === \"♙♖♘♗♕♔\".includes(targetPiece)) return false; // Không ăn quân cùng màu\n\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(dx, dy);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(dx, dy);\n    default:\n      return false;\n  }\n};\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  if (fromCol === toCol && board[toRow][toCol] === \"\" && toRow - fromRow === direction) return true;\n  return false;\n};\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => fromRow === toRow || fromCol === toCol;\nconst isValidKnightMove = (dx, dy) => Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol) => Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol);\nconst isValidKingMove = (dx, dy) => Math.abs(dx) <= 1 && Math.abs(dy) <= 1;","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","isWhiteTurn","dx","dy","isWhite","includes","targetPiece","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","direction","Math","abs"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== isWhiteTurn) return false; // Kiểm tra lượt đi hợp lệ\n\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && (isWhite === \"♙♖♘♗♕♔\".includes(targetPiece))) return false; // Không ăn quân cùng màu\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(dx, dy);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(dx, dy);\n    default: return false;\n  }\n};\n\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  if (fromCol === toCol && board[toRow][toCol] === \"\" && toRow - fromRow === direction) return true;\n  return false;\n};\n\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => fromRow === toRow || fromCol === toCol;\nconst isValidKnightMove = (dx, dy) => (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol) => Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol);\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol);\nconst isValidKingMove = (dx, dy) => Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}