{"ast":null,"code":"const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  if (!piece) return false;\n  if (fromRow === toRow && fromCol === toCol) return false; // Không di chuyển đến vị trí hiện tại\n\n  // ✅ **Xác định quân trắng hay đen**\n  const isWhite = [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\"].includes(piece);\n\n  // ✅ **Kiểm tra đúng lượt chơi**\n  if (isWhite && !isWhiteTurn || !isWhite && isWhiteTurn) return false;\n  const targetPiece = board[toRow][toCol];\n\n  // ✅ **Kiểm tra có ăn quân cùng màu không**\n  if (targetPiece && [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\", \"♟\", \"♜\", \"♞\", \"♝\", \"♛\", \"♚\"].includes(targetPiece) === isWhite) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(toRow - fromRow, toCol - fromCol);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(toRow - fromRow, toCol - fromCol);\n    default:\n      return false;\n  }\n};\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return true;\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][toCol]) return true;\n  }\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n  return false;\n};\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidKnightMove = (dx, dy) => {\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n};\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\nconst checkGameOver = board => {\n  let whiteKingExists = false;\n  let blackKingExists = false;\n  for (let row of board) {\n    for (let piece of row) {\n      if (piece === \"\\u2654\") whiteKingExists = true;\n      if (piece === \"\\u265A\") blackKingExists = true;\n    }\n  }\n  if (!whiteKingExists) return \"Black wins!\";\n  if (!blackKingExists) return \"White wins!\";\n  return null;\n};\nexport { isValidMove, checkGameOver };","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","isWhiteTurn","isWhite","includes","targetPiece","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","direction","startRow","dy","dx","Math","abs","isPathClear","sign","x","y","checkGameOver","whiteKingExists","blackKingExists","row"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  if (!piece) return false;\n  if (fromRow === toRow && fromCol === toCol) return false; // Không di chuyển đến vị trí hiện tại\n\n  // ✅ **Xác định quân trắng hay đen**\n  const isWhite = [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\"].includes(piece);\n\n  // ✅ **Kiểm tra đúng lượt chơi**\n  if ((isWhite && !isWhiteTurn) || (!isWhite && isWhiteTurn)) return false;\n\n  const targetPiece = board[toRow][toCol];\n\n  // ✅ **Kiểm tra có ăn quân cùng màu không**\n  if (targetPiece && [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\", \"♟\", \"♜\", \"♞\", \"♝\", \"♛\", \"♚\"].includes(targetPiece) === isWhite) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(toRow - fromRow, toCol - fromCol);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(toRow - fromRow, toCol - fromCol);\n    default: return false;\n  }\n};\n\n\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return true;\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][toCol]) return true;\n  }\n\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n\n  return false;\n};\n\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidKnightMove = (dx, dy) => {\n  return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n};\n\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return (\n    isValidRookMove(fromRow, fromCol, toRow, toCol, board) ||\n    isValidBishopMove(fromRow, fromCol, toRow, toCol, board)\n  );\n};\n\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\n\nconst checkGameOver = (board) => {\n  let whiteKingExists = false;\n  let blackKingExists = false;\n\n  for (let row of board) {\n    for (let piece of row) {\n      if (piece === \"\\u2654\") whiteKingExists = true;\n      if (piece === \"\\u265A\") blackKingExists = true;\n    }\n  }\n\n  if (!whiteKingExists) return \"Black wins!\";\n  if (!blackKingExists) return \"White wins!\";\n  return null;\n};\n\nexport { isValidMove, checkGameOver };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}