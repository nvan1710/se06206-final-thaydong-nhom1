{"ast":null,"code":"var _jsxFileName = \"/root/se06206-final-thaydong-nhom1/Chess-game-login/src/components/ChessBoard.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { initialBoardSetup } from \"../data/chessPieces\";\nimport { isValidMove } from \"../utils/moveRules\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  PIECE: \"piece\"\n};\nconst Square = ({\n  piece,\n  row,\n  col,\n  movePiece\n}) => {\n  _s();\n  const isDark = (row + col) % 2 === 1;\n  const isWhiteTeam = \"♙♖♘♗♕♔\".includes(piece); // White pieces\n  const pieceColor = isWhiteTeam ? \"text-white\" : \"text-brown-700\"; // Milk white & Brown\n  // Drag logic\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    type: ItemTypes.PIECE,\n    item: {\n      row,\n      col,\n      piece\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  }));\n\n  // Drop logic\n  const [, drop] = useDrop(() => ({\n    accept: ItemTypes.PIECE,\n    drop: item => movePiece(item.row, item.col, row, col)\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: `w-16 h-16 flex justify-center items-center text-2xl font-bold\n        ${isDark ? \"bg-[#9A6553] \" : \"bg-[#D5B793] \"}`,\n    children: piece && /*#__PURE__*/_jsxDEV(\"span\", {\n      ref: drag,\n      className: `${pieceColor} ${isDragging ? \"opacity-50\" : \"cursor-grab\"}`,\n      children: piece\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Square, \"FSfJ4ie57JY5to1rF8fuHph4Yps=\", false, function () {\n  return [useDrag, useDrop];\n});\n_c = Square;\nconst Chessboard = () => {\n  _s2();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [moveHistory, setMoveHistory] = useState([]); // Store moves\n\n  // const movePiece = (fromRow, fromCol, toRow, toCol) => {\n  //   const piece = board[fromRow][fromCol];\n\n  //   if (isValidMove(piece, fromRow, fromCol, toRow, toCol, board)) {\n  //     const newBoard = board.map((row) => [...row]);\n  //     newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n  //     newBoard[fromRow][fromCol] = \"\";\n  //     setBoard(newBoard);\n\n  //     // Convert board positions to chess notation\n  //     const move = `${piece} ${convertToChessNotation(fromRow, fromCol)} → ${convertToChessNotation(toRow, toCol)}`;\n  //     setMoveHistory([...moveHistory, move]);\n  //   }\n  // };\n\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard(prevBoard => {\n      const newBoard = prevBoard.map(row => [...row]); // Clone board\n      const piece = newBoard[fromRow][fromCol];\n      const targetPiece = newBoard[toRow][toCol];\n\n      // Ensure the move is valid before updating\n      if (isValidMove(piece, fromRow, fromCol, toRow, toCol, newBoard)) {\n        const isWhitePiece = \"♙♖♘♗♕♔\".includes(piece);\n        const isTargetWhite = \"♟♜♞♝♛♚\".includes(targetPiece);\n\n        // Prevent capturing own team's pieces\n        if (targetPiece !== \"\" && isWhitePiece === isTargetWhite) {\n          return prevBoard; // Invalid move\n        }\n\n        // Capture opponent piece (removes from board)\n        newBoard[toRow][toCol] = piece;\n        newBoard[fromRow][fromCol] = \"\"; // Empty old position\n\n        // Store move history correctly\n        setMoveHistory(prevHistory => [...prevHistory, targetPiece ? `${piece} ${convertToChessNotation(fromRow, fromCol)} captures ${targetPiece} at ${convertToChessNotation(toRow, toCol)}` : `${piece} ${convertToChessNotation(fromRow, fromCol)} → ${convertToChessNotation(toRow, toCol)}`]);\n        return newBoard; // Return updated board\n      }\n      return prevBoard; // If move is invalid, keep board unchanged\n    });\n  };\n\n  // Convert (row, col) to chess notation (e.g., (0,0) → \"a8\")\n  const convertToChessNotation = (row, col) => {\n    const files = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n    return `${files[col]}${8 - row}`;\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-8 w-128 h-128 border-4 border-black\",\n        children: board.map((row, rowIndex) => row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(Square, {\n          piece: piece,\n          row: rowIndex,\n          col: colIndex,\n          movePiece: movePiece\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ml-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-lg font-bold mb-2\",\n          children: \"Move History\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"text-sm bg-gray-200 p-2 rounded w-40 h-64 overflow-y-auto\",\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"mb-1\",\n            children: `${index + 1}. ${move}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s2(Chessboard, \"AFRdzPz4Rszc6BvLgOb6MfB/jPM=\");\n_c2 = Chessboard;\nexport default Chessboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Chessboard\");","map":{"version":3,"names":["React","useState","useDrag","useDrop","DndProvider","HTML5Backend","initialBoardSetup","isValidMove","jsxDEV","_jsxDEV","ItemTypes","PIECE","Square","piece","row","col","movePiece","_s","isDark","isWhiteTeam","includes","pieceColor","isDragging","drag","type","item","collect","monitor","drop","accept","ref","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chessboard","_s2","board","setBoard","moveHistory","setMoveHistory","fromRow","fromCol","toRow","toCol","prevBoard","newBoard","map","targetPiece","isWhitePiece","isTargetWhite","prevHistory","convertToChessNotation","files","backend","rowIndex","colIndex","move","index","_c2","$RefreshReg$"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/components/ChessBoard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { initialBoardSetup } from \"../data/chessPieces\";\nimport { isValidMove } from \"../utils/moveRules\";\n\nconst ItemTypes = { PIECE: \"piece\" };\n\nconst Square = ({ piece, row, col, movePiece }) => {\n  const isDark = (row + col) % 2 === 1;\n    const isWhiteTeam = \"♙♖♘♗♕♔\".includes(piece); // White pieces\n    const pieceColor = isWhiteTeam ? \"text-white\" : \"text-brown-700\"; // Milk white & Brown\n  // Drag logic\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: ItemTypes.PIECE,\n    item: { row, col, piece },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }));\n\n  // Drop logic\n  const [, drop] = useDrop(() => ({\n    accept: ItemTypes.PIECE,\n    drop: (item) => movePiece(item.row, item.col, row, col),\n  }));\n\n  return (\n    <div\n      ref={drop}\n      className={`w-16 h-16 flex justify-center items-center text-2xl font-bold\n        ${isDark ? \"bg-[#9A6553] \" : \"bg-[#D5B793] \"}`}\n    >\n      {piece && (\n        <span\n          ref={drag}\n          className={`${pieceColor} ${isDragging ? \"opacity-50\" : \"cursor-grab\"}`}\n        >\n          {piece}\n        </span>\n      )}\n    </div>\n  );\n};\n\n\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [moveHistory, setMoveHistory] = useState([]); // Store moves\n\n  // const movePiece = (fromRow, fromCol, toRow, toCol) => {\n  //   const piece = board[fromRow][fromCol];\n\n  //   if (isValidMove(piece, fromRow, fromCol, toRow, toCol, board)) {\n  //     const newBoard = board.map((row) => [...row]);\n  //     newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n  //     newBoard[fromRow][fromCol] = \"\";\n  //     setBoard(newBoard);\n\n  //     // Convert board positions to chess notation\n  //     const move = `${piece} ${convertToChessNotation(fromRow, fromCol)} → ${convertToChessNotation(toRow, toCol)}`;\n  //     setMoveHistory([...moveHistory, move]);\n  //   }\n  // };\n\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard((prevBoard) => {\n      const newBoard = prevBoard.map((row) => [...row]); // Clone board\n      const piece = newBoard[fromRow][fromCol];\n      const targetPiece = newBoard[toRow][toCol];\n  \n      // Ensure the move is valid before updating\n      if (isValidMove(piece, fromRow, fromCol, toRow, toCol, newBoard)) {\n        const isWhitePiece = \"♙♖♘♗♕♔\".includes(piece);\n        const isTargetWhite = \"♟♜♞♝♛♚\".includes(targetPiece);\n  \n        // Prevent capturing own team's pieces\n        if (targetPiece !== \"\" && isWhitePiece === isTargetWhite) {\n          return prevBoard; // Invalid move\n        }\n  \n        // Capture opponent piece (removes from board)\n        newBoard[toRow][toCol] = piece;\n        newBoard[fromRow][fromCol] = \"\"; // Empty old position\n  \n        // Store move history correctly\n        setMoveHistory((prevHistory) => [\n          ...prevHistory,\n          targetPiece\n            ? `${piece} ${convertToChessNotation(fromRow, fromCol)} captures ${targetPiece} at ${convertToChessNotation(toRow, toCol)}`\n            : `${piece} ${convertToChessNotation(fromRow, fromCol)} → ${convertToChessNotation(toRow, toCol)}`,\n        ]);\n  \n        return newBoard; // Return updated board\n      }\n  \n      return prevBoard; // If move is invalid, keep board unchanged\n    });\n  };\n  \n  \n  \n\n  // Convert (row, col) to chess notation (e.g., (0,0) → \"a8\")\n  const convertToChessNotation = (row, col) => {\n    const files = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n    return `${files[col]}${8 - row}`;\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"flex\">\n        {/* Chessboard */}\n        <div className=\"grid grid-cols-8 w-128 h-128 border-4 border-black\">\n          {board.map((row, rowIndex) =>\n            row.map((piece, colIndex) => (\n              <Square\n                key={`${rowIndex}-${colIndex}`}\n                piece={piece}\n                row={rowIndex}\n                col={colIndex}\n                movePiece={movePiece}\n              />\n            ))\n          )}\n        </div>\n\n        {/* Move History */}\n        <div className=\"ml-4\">\n          <h2 className=\"text-lg font-bold mb-2\">Move History</h2>\n          <ul className=\"text-sm bg-gray-200 p-2 rounded w-40 h-64 overflow-y-auto\">\n            {moveHistory.map((move, index) => (\n              <li key={index} className=\"mb-1\">{`${index + 1}. ${move}`}</li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default Chessboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}