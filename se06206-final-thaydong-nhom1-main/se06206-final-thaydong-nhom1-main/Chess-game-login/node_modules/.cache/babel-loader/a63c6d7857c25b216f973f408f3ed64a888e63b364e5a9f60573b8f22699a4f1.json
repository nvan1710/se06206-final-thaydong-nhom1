{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (turn === \"white\" && !isWhite || turn === \"black\" && isWhite) return false;\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n  if (targetPiece && isWhite === isTargetWhite) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default:\n      return false;\n  }\n};\nexport const isKingInCheck = (turn, board) => {\n  let kingPos = null;\n  board.forEach((row, rIdx) => row.forEach((piece, cIdx) => {\n    if (turn === \"white\" && piece === \"♔\" || turn === \"black\" && piece === \"♚\") {\n      kingPos = {\n        row: rIdx,\n        col: cIdx\n      };\n    }\n  }));\n  return board.some((row, rIdx) => row.some((piece, cIdx) => {\n    if (piece && (turn === \"white\" && \"♟♜♞♝♛♚\".includes(piece) || turn === \"black\" && \"♙♖♘♗♕♔\".includes(piece))) {\n      return isValidMove(piece, rIdx, cIdx, kingPos.row, kingPos.col, board, turn);\n    }\n    return false;\n  }));\n};\nexport const getPossibleMoves = (piece, row, col, board) => {\n  const moves = [];\n  if (!piece) return moves;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  const directions = {\n    \"♙\": [[-1, 0], [-1, -1], [-1, 1]],\n    \"♟\": [[1, 0], [1, -1], [1, 1]],\n    \"♖\": [[1, 0], [-1, 0], [0, 1], [0, -1]],\n    \"♜\": [[1, 0], [-1, 0], [0, 1], [0, -1]],\n    \"♘\": [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]],\n    \"♞\": [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]],\n    \"♗\": [[1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♝\": [[1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♕\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♛\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♔\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♚\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]]\n  };\n  const moveLimit = [\"♔\", \"♚\"].includes(piece) ? 1 : 8;\n  for (const [dx, dy] of directions[piece] || []) {\n    for (let i = 1; i <= moveLimit; i++) {\n      const newRow = row + dx * i;\n      const newCol = col + dy * i;\n      if (newRow < 0 || newRow >= 8 || newCol < 0 || newCol >= 8) break;\n      if (board[newRow][newCol]) {\n        if (isWhite && \"♟♜♞♝♛♚\".includes(board[newRow][newCol]) || !isWhite && \"♙♖♘♗♕♔\".includes(board[newRow][newCol])) {\n          moves.push({\n            row: newRow,\n            col: newCol\n          });\n        }\n        break;\n      } else {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  }\n  return moves;\n};","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","turn","lastMove","console","log","isWhite","includes","targetPiece","isTargetWhite","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","isKingInCheck","kingPos","forEach","row","rIdx","cIdx","col","some","getPossibleMoves","moves","directions","moveLimit","dx","dy","i","newRow","newCol","push"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if ((turn === \"white\" && !isWhite) || (turn === \"black\" && isWhite)) return false;\n\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n\n  if (targetPiece && isWhite === isTargetWhite) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default: return false;\n  }\n};\n\nexport const isKingInCheck = (turn, board) => {\n  let kingPos = null;\n  board.forEach((row, rIdx) =>\n    row.forEach((piece, cIdx) => {\n      if ((turn === \"white\" && piece === \"♔\") || (turn === \"black\" && piece === \"♚\")) {\n        kingPos = { row: rIdx, col: cIdx };\n      }\n    })\n  );\n\n  return board.some((row, rIdx) =>\n    row.some((piece, cIdx) => {\n      if (piece && ((turn === \"white\" && \"♟♜♞♝♛♚\".includes(piece)) || (turn === \"black\" && \"♙♖♘♗♕♔\".includes(piece)))) {\n        return isValidMove(piece, rIdx, cIdx, kingPos.row, kingPos.col, board, turn);\n      }\n      return false;\n    })\n  );\n};\n\nexport const getPossibleMoves = (piece, row, col, board) => {\n  const moves = [];\n\n  if (!piece) return moves;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  const directions = {\n    \"♙\": [[-1, 0], [-1, -1], [-1, 1]],\n    \"♟\": [[1, 0], [1, -1], [1, 1]],\n    \"♖\": [[1, 0], [-1, 0], [0, 1], [0, -1]],\n    \"♜\": [[1, 0], [-1, 0], [0, 1], [0, -1]],\n    \"♘\": [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]],\n    \"♞\": [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]],\n    \"♗\": [[1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♝\": [[1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♕\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♛\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♔\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]],\n    \"♚\": [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]]\n  };\n\n  const moveLimit = [\"♔\", \"♚\"].includes(piece) ? 1 : 8;\n\n  for (const [dx, dy] of directions[piece] || []) {\n    for (let i = 1; i <= moveLimit; i++) {\n      const newRow = row + dx * i;\n      const newCol = col + dy * i;\n\n      if (newRow < 0 || newRow >= 8 || newCol < 0 || newCol >= 8) break;\n\n      if (board[newRow][newCol]) {\n        if ((isWhite && \"♟♜♞♝♛♚\".includes(board[newRow][newCol])) ||\n            (!isWhite && \"♙♖♘♗♕♔\".includes(board[newRow][newCol]))) {\n          moves.push({ row: newRow, col: newCol });\n        }\n        break;\n      } else {\n        moves.push({ row: newRow, col: newCol });\n      }\n    }\n  }\n  return moves;\n};\n"],"mappings":"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CAAC,CAAC,CAAC;IAC7E,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3E,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3E,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC3E,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5E,CAAC;EAED,MAAMC,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAACpB,QAAQ,CAACX,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC;EAEpD,KAAK,MAAM,CAACgC,EAAE,EAAEC,EAAE,CAAC,IAAIH,UAAU,CAAC9B,KAAK,CAAC,IAAI,EAAE,EAAE;IAC9C,KAAK,IAAIkC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIH,SAAS,EAAEG,CAAC,EAAE,EAAE;MACnC,MAAMC,MAAM,GAAGZ,GAAG,GAAGS,EAAE,GAAGE,CAAC;MAC3B,MAAME,MAAM,GAAGV,GAAG,GAAGO,EAAE,GAAGC,CAAC;MAE3B,IAAIC,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAI,CAAC,IAAIC,MAAM,GAAG,CAAC,IAAIA,MAAM,IAAI,CAAC,EAAE;MAE5D,IAAI/B,KAAK,CAAC8B,MAAM,CAAC,CAACC,MAAM,CAAC,EAAE;QACzB,IAAK1B,OAAO,IAAI,QAAQ,CAACC,QAAQ,CAACN,KAAK,CAAC8B,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC,IACnD,CAAC1B,OAAO,IAAI,QAAQ,CAACC,QAAQ,CAACN,KAAK,CAAC8B,MAAM,CAAC,CAACC,MAAM,CAAC,CAAE,EAAE;UAC1DP,KAAK,CAACQ,IAAI,CAAC;YAAEd,GAAG,EAAEY,MAAM;YAAET,GAAG,EAAEU;UAAO,CAAC,CAAC;QAC1C;QACA;MACF,CAAC,MAAM;QACLP,KAAK,CAACQ,IAAI,CAAC;UAAEd,GAAG,EAAEY,MAAM;UAAET,GAAG,EAAEU;QAAO,CAAC,CAAC;MAC1C;IACF;EACF;EACA,OAAOP,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}