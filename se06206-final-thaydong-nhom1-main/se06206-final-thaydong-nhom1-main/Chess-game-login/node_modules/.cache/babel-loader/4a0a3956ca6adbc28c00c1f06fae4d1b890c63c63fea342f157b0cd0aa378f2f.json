{"ast":null,"code":"let currentTurn = true; // true là Trắng, false là Đen\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n\n  // Kiểm tra quân cờ là Trắng hay Đen\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  const isOpponent = targetPiece => targetPiece && isWhite !== \"♙♖♘♗♕♔\".includes(targetPiece);\n\n  // Logic di chuyển từng loại quân\n  switch (piece) {\n    case \"♙\":\n      // Tốt trắng\n      if (row > 0 && !board[row - 1][col]) validMoves.push({\n        row: row - 1,\n        col\n      }); // Đi thẳng\n      if (row === 6 && !board[row - 1][col] && !board[row - 2][col]) validMoves.push({\n        row: row - 2,\n        col\n      }); // Đi 2 ô từ vị trí ban đầu\n      if (col > 0 && isOpponent(board[row - 1][col - 1])) validMoves.push({\n        row: row - 1,\n        col: col - 1\n      }); // Ăn chéo trái\n      if (col < 7 && isOpponent(board[row - 1][col + 1])) validMoves.push({\n        row: row - 1,\n        col: col + 1\n      }); // Ăn chéo phải\n      break;\n    case \"♟\":\n      // Tốt đen\n      if (row < 7 && !board[row + 1][col]) validMoves.push({\n        row: row + 1,\n        col\n      });\n      if (row === 1 && !board[row + 1][col] && !board[row + 2][col]) validMoves.push({\n        row: row + 2,\n        col\n      });\n      if (col > 0 && isOpponent(board[row + 1][col - 1])) validMoves.push({\n        row: row + 1,\n        col: col - 1\n      });\n      if (col < 7 && isOpponent(board[row + 1][col + 1])) validMoves.push({\n        row: row + 1,\n        col: col + 1\n      });\n      break;\n    case \"♖\": // Xe (Rook)\n    case \"♜\":\n      addLinearMoves(validMoves, row, col, board, isWhite);\n      break;\n    case \"♘\": // Mã (Knight)\n    case \"♞\":\n      addKnightMoves(validMoves, row, col, board, isWhite);\n      break;\n    case \"♗\": // Tượng (Bishop)\n    case \"♝\":\n      addDiagonalMoves(validMoves, row, col, board, isWhite);\n      break;\n    case \"♕\": // Hậu (Queen)\n    case \"♛\":\n      addLinearMoves(validMoves, row, col, board, isWhite);\n      addDiagonalMoves(validMoves, row, col, board, isWhite);\n      break;\n    case \"♔\": // Vua (King)\n    case \"♚\":\n      addKingMoves(validMoves, row, col, board, isWhite);\n      break;\n    default:\n      break;\n  }\n  return validMoves;\n};\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== currentTurn) return false;\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\n  let validMove = false;\n  switch (piece) {\n    case \"♙\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n      break;\n    case \"♟\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n      break;\n    case \"♖\":\n    case \"♜\":\n      validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♘\":\n    case \"♞\":\n      validMove = isValidKnightMove(dx, dy);\n      break;\n    case \"♗\":\n    case \"♝\":\n      validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♕\":\n    case \"♛\":\n      validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♔\":\n    case \"♚\":\n      validMove = isValidKingMove(dx, dy);\n      break;\n    default:\n      return false;\n  }\n  if (validMove) {\n    // Giả lập bàn cờ mới sau nước đi\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n\n    // Kiểm tra nếu nước đi làm vua bị chiếu => không hợp lệ\n    if (isKingInCheck(newBoard, isWhite)) return false;\n    currentTurn = !currentTurn; // Đổi lượt\n    return true;\n  }\n  return false;\n};\n\n// ✅ Tốt (Pawn) - sửa lại kiểm tra nhảy 2 ô & ăn chéo hợp lệ\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  const targetPiece = board[toRow][toCol];\n\n  // Di chuyển thẳng (không được có quân cờ chặn)\n  if (dx === 0 && !targetPiece) {\n    if (dy === direction) return true; // Đi 1 ô hợp lệ\n    if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\n      return true; // Đi 2 ô từ vị trí ban đầu hợp lệ (không nhảy qua quân cờ)\n    }\n  }\n\n  // Ăn quân chéo (chỉ khi có quân địch ở ô đích)\n  if (dx === 1 && dy === direction && targetPiece) {\n    return true;\n  }\n  return false;\n};\n\n// ✅ Xe (Rook) - đảm bảo có thể ăn quân đối thủ hợp lệ\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Mã (Knight) - không cần sửa (nước đi đã đúng)\nconst isValidKnightMove = (dx, dy) => {\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n};\n\n// ✅ Tượng (Bishop) - đảm bảo không bị chặn đường đi\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Hậu (Queen) - kết hợp Xe & Tượng\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Vua (King) - giữ nguyên\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// ✅ Sửa lại kiểm tra đường đi `isPathClear()`\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x] !== \"\") return false; // Nếu có quân cờ chặn đường, không hợp lệ\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\nconst findKingPosition = (board, isWhite) => {\n  const king = isWhite ? \"♔\" : \"♚\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) return {\n        row,\n        col\n      };\n    }\n  }\n  return null;\n};\nconst isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // Không tìm thấy vua (tránh lỗi)\n\n  const {\n    row: kingRow,\n    col: kingCol\n  } = kingPos;\n\n  // Duyệt qua toàn bộ bàn cờ để tìm quân đối phương có thể chiếu vua\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Ô trống bỏ qua\n\n      const isEnemy = \"♙♖♘♗♕♔\".includes(piece) !== isWhite;\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        return true; // Nếu có quân địch có thể đi đến vị trí vua, vua đang bị chiếu\n      }\n    }\n  }\n  return false; // Không có quân nào chiếu vua\n};","map":{"version":3,"names":["currentTurn","getValidMoves","piece","row","col","board","validMoves","isWhite","includes","isOpponent","targetPiece","push","addLinearMoves","addKnightMoves","addDiagonalMoves","addKingMoves","isValidMove","fromRow","fromCol","toRow","toCol","dx","dy","validMove","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","newBoard","map","isKingInCheck","direction","startRow","Math","abs","isPathClear","sign","x","y","findKingPosition","king","kingPos","kingRow","kingCol","isEnemy"],"sources":["C:/Users/Admin/Downloads/code-final-nhom1/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["\nlet currentTurn = true; // true là Trắng, false là Đen\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n\n  // Kiểm tra quân cờ là Trắng hay Đen\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  const isOpponent = (targetPiece) => targetPiece && isWhite !== \"♙♖♘♗♕♔\".includes(targetPiece);\n\n  // Logic di chuyển từng loại quân\n  switch (piece) {\n    case \"♙\": // Tốt trắng\n      if (row > 0 && !board[row - 1][col]) validMoves.push({ row: row - 1, col }); // Đi thẳng\n      if (row === 6 && !board[row - 1][col] && !board[row - 2][col]) validMoves.push({ row: row - 2, col }); // Đi 2 ô từ vị trí ban đầu\n      if (col > 0 && isOpponent(board[row - 1][col - 1])) validMoves.push({ row: row - 1, col: col - 1 }); // Ăn chéo trái\n      if (col < 7 && isOpponent(board[row - 1][col + 1])) validMoves.push({ row: row - 1, col: col + 1 }); // Ăn chéo phải\n      break;\n\n    case \"♟\": // Tốt đen\n      if (row < 7 && !board[row + 1][col]) validMoves.push({ row: row + 1, col });\n      if (row === 1 && !board[row + 1][col] && !board[row + 2][col]) validMoves.push({ row: row + 2, col });\n      if (col > 0 && isOpponent(board[row + 1][col - 1])) validMoves.push({ row: row + 1, col: col - 1 });\n      if (col < 7 && isOpponent(board[row + 1][col + 1])) validMoves.push({ row: row + 1, col: col + 1 });\n      break;\n\n    case \"♖\": // Xe (Rook)\n    case \"♜\":\n      addLinearMoves(validMoves, row, col, board, isWhite);\n      break;\n\n    case \"♘\": // Mã (Knight)\n    case \"♞\":\n      addKnightMoves(validMoves, row, col, board, isWhite);\n      break;\n\n    case \"♗\": // Tượng (Bishop)\n    case \"♝\":\n      addDiagonalMoves(validMoves, row, col, board, isWhite);\n      break;\n\n    case \"♕\": // Hậu (Queen)\n    case \"♛\":\n      addLinearMoves(validMoves, row, col, board, isWhite);\n      addDiagonalMoves(validMoves, row, col, board, isWhite);\n      break;\n\n    case \"♔\": // Vua (King)\n    case \"♚\":\n      addKingMoves(validMoves, row, col, board, isWhite);\n      break;\n\n    default:\n      break;\n  }\n\n  return validMoves;\n};\n\n\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== currentTurn) return false;\n\n  const targetPiece = board[toRow][toCol];\n\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\n\n  let validMove = false;\n  switch (piece) {\n    case \"♙\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true); break;\n    case \"♟\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false); break;\n    case \"♖\": case \"♜\": validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♘\": case \"♞\": validMove = isValidKnightMove(dx, dy); break;\n    case \"♗\": case \"♝\": validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♕\": case \"♛\": validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♔\": case \"♚\": validMove = isValidKingMove(dx, dy); break;\n    default: return false;\n  }\n\n  if (validMove) {\n    // Giả lập bàn cờ mới sau nước đi\n    const newBoard = board.map((row) => [...row]);\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n\n    // Kiểm tra nếu nước đi làm vua bị chiếu => không hợp lệ\n    if (isKingInCheck(newBoard, isWhite)) return false;\n\n    currentTurn = !currentTurn; // Đổi lượt\n    return true;\n  }\n\n  return false;\n};\n\n\n\n\n\n// ✅ Tốt (Pawn) - sửa lại kiểm tra nhảy 2 ô & ăn chéo hợp lệ\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  const targetPiece = board[toRow][toCol];\n\n  // Di chuyển thẳng (không được có quân cờ chặn)\n  if (dx === 0 && !targetPiece) {\n      if (dy === direction) return true; // Đi 1 ô hợp lệ\n      if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\n          return true; // Đi 2 ô từ vị trí ban đầu hợp lệ (không nhảy qua quân cờ)\n      }\n  }\n\n  // Ăn quân chéo (chỉ khi có quân địch ở ô đích)\n  if (dx === 1 && dy === direction && targetPiece) {\n      return true;\n  }\n\n  return false;\n};\n\n// ✅ Xe (Rook) - đảm bảo có thể ăn quân đối thủ hợp lệ\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Mã (Knight) - không cần sửa (nước đi đã đúng)\nconst isValidKnightMove = (dx, dy) => {\n  return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n};\n\n// ✅ Tượng (Bishop) - đảm bảo không bị chặn đường đi\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Hậu (Queen) - kết hợp Xe & Tượng\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return (\n      isValidRookMove(fromRow, fromCol, toRow, toCol, board) ||\n      isValidBishopMove(fromRow, fromCol, toRow, toCol, board)\n  );\n};\n\n// ✅ Vua (King) - giữ nguyên\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// ✅ Sửa lại kiểm tra đường đi `isPathClear()`\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) {\n      if (board[y][x] !== \"\") return false; // Nếu có quân cờ chặn đường, không hợp lệ\n      x += dx;\n      y += dy;\n  }\n\n  return true;\n};\nconst findKingPosition = (board, isWhite) => {\n  const king = isWhite ? \"♔\" : \"♚\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) return { row, col };\n    }\n  }\n  return null;\n};\nconst isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // Không tìm thấy vua (tránh lỗi)\n\n  const { row: kingRow, col: kingCol } = kingPos;\n\n  // Duyệt qua toàn bộ bàn cờ để tìm quân đối phương có thể chiếu vua\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Ô trống bỏ qua\n\n      const isEnemy = \"♙♖♘♗♕♔\".includes(piece) !== isWhite;\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        return true; // Nếu có quân địch có thể đi đến vị trí vua, vua đang bị chiếu\n      }\n    }\n  }\n\n  return false; // Không có quân nào chiếu vua\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}