{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece);\n  if (turn === \"white\" && !isWhite || turn === \"black\" && isWhite) return false;\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(targetPiece);\n  if (targetPiece && isWhite === isTargetWhite) return false;\n  switch (piece) {\n    case \"‚ôô\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"‚ôü\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"‚ôñ\":\n    case \"‚ôú\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"‚ôò\":\n    case \"‚ôû\":\n      return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"‚ôó\":\n    case \"‚ôù\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"‚ôï\":\n    case \"‚ôõ\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"‚ôî\":\n    case \"‚ôö\":\n      return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default:\n      return false;\n  }\n};\n\n// Function to get all possible moves for a player\nexport const getAllPossibleMoves = (turn, board) => {\n  let moves = [];\n  board.forEach((row, rIdx) => {\n    row.forEach((piece, cIdx) => {\n      if (piece && (turn === \"white\" && \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) || turn === \"black\" && \"‚ôü‚ôú‚ôû‚ôù‚ôõ‚ôö\".includes(piece))) {\n        for (let toRow = 0; toRow < 8; toRow++) {\n          for (let toCol = 0; toCol < 8; toCol++) {\n            if (isValidMove(piece, rIdx, cIdx, toRow, toCol, board, turn)) {\n              moves.push({\n                fromRow: rIdx,\n                fromCol: cIdx,\n                toRow,\n                toCol\n              });\n            }\n          }\n        }\n      }\n    });\n  });\n  return moves;\n};\n\n// üèÜ Checkmate detection\nexport const isCheckmate = (turn, board) => {\n  if (!isKingInCheck(turn, board)) return false;\n  return getAllPossibleMoves(turn, board).length === 0;\n};\n\n// ü§ù Stalemate detection\nexport const isStalemate = (turn, board) => {\n  if (isKingInCheck(turn, board)) return false;\n  return getAllPossibleMoves(turn, board).length === 0;\n};","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","turn","lastMove","console","log","isWhite","includes","targetPiece","isTargetWhite","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","getAllPossibleMoves","moves","forEach","row","rIdx","cIdx","push","isCheckmate","isKingInCheck","length","isStalemate"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece);\n  if ((turn === \"white\" && !isWhite) || (turn === \"black\" && isWhite)) return false;\n\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(targetPiece);\n\n  if (targetPiece && isWhite === isTargetWhite) return false;\n\n  switch (piece) {\n    case \"‚ôô\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"‚ôü\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"‚ôñ\": case \"‚ôú\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"‚ôò\": case \"‚ôû\": return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"‚ôó\": case \"‚ôù\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"‚ôï\": case \"‚ôõ\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"‚ôî\": case \"‚ôö\": return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default: return false;\n  }\n};\n\n// Function to get all possible moves for a player\nexport const getAllPossibleMoves = (turn, board) => {\n  let moves = [];\n  board.forEach((row, rIdx) => {\n    row.forEach((piece, cIdx) => {\n      if (piece && ((turn === \"white\" && \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece)) || (turn === \"black\" && \"‚ôü‚ôú‚ôû‚ôù‚ôõ‚ôö\".includes(piece)))) {\n        for (let toRow = 0; toRow < 8; toRow++) {\n          for (let toCol = 0; toCol < 8; toCol++) {\n            if (isValidMove(piece, rIdx, cIdx, toRow, toCol, board, turn)) {\n              moves.push({ fromRow: rIdx, fromCol: cIdx, toRow, toCol });\n            }\n          }\n        }\n      }\n    });\n  });\n  return moves;\n};\n\n// üèÜ Checkmate detection\nexport const isCheckmate = (turn, board) => {\n  if (!isKingInCheck(turn, board)) return false;\n  return getAllPossibleMoves(turn, board).length === 0;\n};\n\n// ü§ù Stalemate detection\nexport const isStalemate = (turn, board) => {\n  if (isKingInCheck(turn, board)) return false;\n  return getAllPossibleMoves(turn, board).length === 0;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}