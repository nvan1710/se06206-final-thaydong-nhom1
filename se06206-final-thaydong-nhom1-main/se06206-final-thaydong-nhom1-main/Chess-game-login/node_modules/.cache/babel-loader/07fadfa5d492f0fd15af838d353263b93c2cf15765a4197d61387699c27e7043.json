{"ast":null,"code":"let currentTurn = true; // true là Trắng, false là Đen\n\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== currentTurn) return false;\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\n  let validMove = false;\n  switch (piece) {\n    case \"♙\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n      break;\n    case \"♟\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n      break;\n    case \"♖\":\n    case \"♜\":\n      validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♘\":\n    case \"♞\":\n      validMove = isValidKnightMove(dx, dy);\n      break;\n    case \"♗\":\n    case \"♝\":\n      validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♕\":\n    case \"♛\":\n      validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♔\":\n    case \"♚\":\n      validMove = isValidKingMove(dx, dy);\n      break;\n    default:\n      return false;\n  }\n  if (validMove) {\n    // Giả lập bàn cờ mới sau nước đi\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n\n    // Kiểm tra nếu nước đi làm vua bị chiếu => không hợp lệ\n    if (isKingInCheck(newBoard, isWhite)) return false;\n    currentTurn = !currentTurn; // Đổi lượt\n    return true;\n  }\n  return false;\n};\n\n// ✅ Tốt (Pawn) - sửa lại kiểm tra nhảy 2 ô & ăn chéo hợp lệ\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  const targetPiece = board[toRow][toCol];\n\n  // Di chuyển thẳng (không được có quân cờ chặn)\n  if (dx === 0 && !targetPiece) {\n    if (dy === direction) return true; // Đi 1 ô hợp lệ\n    if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\n      return true; // Đi 2 ô từ vị trí ban đầu hợp lệ (không nhảy qua quân cờ)\n    }\n  }\n\n  // Ăn quân chéo (chỉ khi có quân địch ở ô đích)\n  if (dx === 1 && dy === direction && targetPiece) {\n    return true;\n  }\n  return false;\n};\n\n// ✅ Xe (Rook) - đảm bảo có thể ăn quân đối thủ hợp lệ\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Mã (Knight) - không cần sửa (nước đi đã đúng)\nconst isValidKnightMove = (dx, dy) => {\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n};\n\n// ✅ Tượng (Bishop) - đảm bảo không bị chặn đường đi\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Hậu (Queen) - kết hợp Xe & Tượng\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Vua (King) - giữ nguyên\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// ✅ Sửa lại kiểm tra đường đi `isPathClear()`\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x] !== \"\") return false; // Nếu có quân cờ chặn đường, không hợp lệ\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\nconst findKingPosition = (board, isWhite) => {\n  const king = isWhite ? \"♔\" : \"♚\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) return {\n        row,\n        col\n      };\n    }\n  }\n  return null;\n};\nconst isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // Không tìm thấy vua (tránh lỗi)\n\n  const {\n    row: kingRow,\n    col: kingCol\n  } = kingPos;\n\n  // Duyệt qua toàn bộ bàn cờ để tìm quân đối phương có thể chiếu vua\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Ô trống bỏ qua\n\n      const isEnemy = \"♙♖♘♗♕♔\".includes(piece) !== isWhite;\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        return true; // Nếu có quân địch có thể đi đến vị trí vua, vua đang bị chiếu\n      }\n    }\n  }\n  return false; // Không có quân nào chiếu vua\n};","map":{"version":3,"names":["currentTurn","isValidMove","piece","fromRow","fromCol","toRow","toCol","board","dx","dy","isWhite","includes","targetPiece","validMove","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","newBoard","map","row","isKingInCheck","direction","startRow","Math","abs","isPathClear","sign","x","y","findKingPosition","king","col","kingPos","kingRow","kingCol","isEnemy"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["\nlet currentTurn = true; // true là Trắng, false là Đen\n\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== currentTurn) return false;\n\n  const targetPiece = board[toRow][toCol];\n\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\n\n  let validMove = false;\n  switch (piece) {\n    case \"♙\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true); break;\n    case \"♟\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false); break;\n    case \"♖\": case \"♜\": validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♘\": case \"♞\": validMove = isValidKnightMove(dx, dy); break;\n    case \"♗\": case \"♝\": validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♕\": case \"♛\": validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♔\": case \"♚\": validMove = isValidKingMove(dx, dy); break;\n    default: return false;\n  }\n\n  if (validMove) {\n    // Giả lập bàn cờ mới sau nước đi\n    const newBoard = board.map((row) => [...row]);\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n\n    // Kiểm tra nếu nước đi làm vua bị chiếu => không hợp lệ\n    if (isKingInCheck(newBoard, isWhite)) return false;\n\n    currentTurn = !currentTurn; // Đổi lượt\n    return true;\n  }\n\n  return false;\n};\n\n\n\n\n\n// ✅ Tốt (Pawn) - sửa lại kiểm tra nhảy 2 ô & ăn chéo hợp lệ\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  const targetPiece = board[toRow][toCol];\n\n  // Di chuyển thẳng (không được có quân cờ chặn)\n  if (dx === 0 && !targetPiece) {\n      if (dy === direction) return true; // Đi 1 ô hợp lệ\n      if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\n          return true; // Đi 2 ô từ vị trí ban đầu hợp lệ (không nhảy qua quân cờ)\n      }\n  }\n\n  // Ăn quân chéo (chỉ khi có quân địch ở ô đích)\n  if (dx === 1 && dy === direction && targetPiece) {\n      return true;\n  }\n\n  return false;\n};\n\n// ✅ Xe (Rook) - đảm bảo có thể ăn quân đối thủ hợp lệ\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Mã (Knight) - không cần sửa (nước đi đã đúng)\nconst isValidKnightMove = (dx, dy) => {\n  return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n};\n\n// ✅ Tượng (Bishop) - đảm bảo không bị chặn đường đi\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Hậu (Queen) - kết hợp Xe & Tượng\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return (\n      isValidRookMove(fromRow, fromCol, toRow, toCol, board) ||\n      isValidBishopMove(fromRow, fromCol, toRow, toCol, board)\n  );\n};\n\n// ✅ Vua (King) - giữ nguyên\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// ✅ Sửa lại kiểm tra đường đi `isPathClear()`\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) {\n      if (board[y][x] !== \"\") return false; // Nếu có quân cờ chặn đường, không hợp lệ\n      x += dx;\n      y += dy;\n  }\n\n  return true;\n};\nconst findKingPosition = (board, isWhite) => {\n  const king = isWhite ? \"♔\" : \"♚\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) return { row, col };\n    }\n  }\n  return null;\n};\nconst isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // Không tìm thấy vua (tránh lỗi)\n\n  const { row: kingRow, col: kingCol } = kingPos;\n\n  // Duyệt qua toàn bộ bàn cờ để tìm quân đối phương có thể chiếu vua\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Ô trống bỏ qua\n\n      const isEnemy = \"♙♖♘♗♕♔\".includes(piece) !== isWhite;\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        return true; // Nếu có quân địch có thể đi đến vị trí vua, vua đang bị chiếu\n      }\n    }\n  }\n\n  return false; // Không có quân nào chiếu vua\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}