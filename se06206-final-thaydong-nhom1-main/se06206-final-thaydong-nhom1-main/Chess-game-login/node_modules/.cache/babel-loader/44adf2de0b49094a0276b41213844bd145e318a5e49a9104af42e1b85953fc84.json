{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (turn === \"white\" && !isWhite || turn === \"black\" && isWhite) return false;\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n  if (targetPiece && isWhite === isTargetWhite) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(fromRow, fromCol, toRow, toCol);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default:\n      return false;\n  }\n};\nconst isValidKingMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(toCol - fromCol) <= 1 && Math.abs(toRow - fromRow) <= 1) return true;\n  return isValidCastling(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidCastling = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) !== 2 || fromRow !== toRow) return false;\n  const king = board[fromRow][fromCol];\n  const rookCol = toCol > fromCol ? 7 : 0;\n  const rook = board[fromRow][rookCol];\n  if (king !== \"♔\" && king !== \"♚\") return false;\n  if (rook !== \"♖\" && rook !== \"♜\") return false;\n  if (!isPathClear(fromRow, fromCol, fromRow, rookCol, board)) return false;\n  return true;\n};\nconst isValidKnightMove = (fromRow, fromCol, toRow, toCol) => {\n  return Math.abs(toCol - fromCol) === 2 && Math.abs(toRow - fromRow) === 1 || Math.abs(toCol - fromCol) === 1 && Math.abs(toRow - fromRow) === 2;\n};\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","turn","lastMove","console","log","isWhite","includes","targetPiece","isTargetWhite","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","Math","abs","isValidCastling","king","rookCol","rook","isPathClear","dx","sign","dy","x","y"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if ((turn === \"white\" && !isWhite) || (turn === \"black\" && isWhite)) return false;\n\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n\n  if (targetPiece && isWhite === isTargetWhite) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(fromRow, fromCol, toRow, toCol);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default: return false;\n  }\n};\n\nconst isValidKingMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(toCol - fromCol) <= 1 && Math.abs(toRow - fromRow) <= 1) return true;\n  return isValidCastling(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidCastling = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) !== 2 || fromRow !== toRow) return false;\n  const king = board[fromRow][fromCol];\n  const rookCol = toCol > fromCol ? 7 : 0;\n  const rook = board[fromRow][rookCol];\n\n  if (king !== \"♔\" && king !== \"♚\") return false;\n  if (rook !== \"♖\" && rook !== \"♜\") return false;\n  if (!isPathClear(fromRow, fromCol, fromRow, rookCol, board)) return false;\n\n  return true;\n};\n\nconst isValidKnightMove = (fromRow, fromCol, toRow, toCol) => {\n  return (Math.abs(toCol - fromCol) === 2 && Math.abs(toRow - fromRow) === 1) ||\n         (Math.abs(toCol - fromCol) === 1 && Math.abs(toRow - fromRow) === 2);\n};\n\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}