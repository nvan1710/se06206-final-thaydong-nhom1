{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (turn === \"white\" && !isWhite || turn === \"black\" && isWhite) return false;\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n  if (targetPiece && isWhite === isTargetWhite) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default:\n      return false;\n  }\n};\nconst isValidKingMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) <= 1 && Math.abs(fromRow - toRow) <= 1) return true;\n  return isValidCastling(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite, lastMove) => {\n  const direction = isWhite ? -1 : 1;\n  const promotionRow = isWhite ? 0 : 7;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  if (dx === 0 && dy === direction && !board[toRow][toCol]) {\n    if (toRow === promotionRow) {\n      board[toRow][toCol] = isWhite ? \"♕\" : \"♛\";\n    }\n    return true;\n  }\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n  return false;\n};\nconst isValidCastling = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) !== 2 || fromRow !== toRow) return false;\n  const king = board[fromRow][fromCol];\n  const rookCol = toCol > fromCol ? 7 : 0;\n  const rook = board[fromRow][rookCol];\n  if (king !== \"♔\" && king !== \"♚\") return false;\n  if (rook !== \"♖\" && rook !== \"♜\") return false;\n  if (!isPathClear(fromRow, fromCol, fromRow, rookCol, board)) return false;\n  board[fromRow][fromCol] = \"\";\n  board[toRow][toCol] = king;\n  board[fromRow][rookCol] = \"\";\n  board[fromRow][toCol > fromCol ? toCol - 1 : toCol + 1] = rook;\n  return true;\n};","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","turn","lastMove","console","log","isWhite","includes","targetPiece","isTargetWhite","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","Math","abs","isValidCastling","direction","promotionRow","dy","dx","king","rookCol","rook","isPathClear"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if ((turn === \"white\" && !isWhite) || (turn === \"black\" && isWhite)) return false;\n\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n\n  if (targetPiece && isWhite === isTargetWhite) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default: return false;\n  }\n};\n\nconst isValidKingMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) <= 1 && Math.abs(fromRow - toRow) <= 1) return true;\n  return isValidCastling(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite, lastMove) => {\n  const direction = isWhite ? -1 : 1;\n  const promotionRow = isWhite ? 0 : 7;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n\n  if (dx === 0 && dy === direction && !board[toRow][toCol]) {\n    if (toRow === promotionRow) {\n      board[toRow][toCol] = isWhite ? \"♕\" : \"♛\";\n    }\n    return true;\n  }\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n\n  return false;\n};\n\nconst isValidCastling = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) !== 2 || fromRow !== toRow) return false;\n  const king = board[fromRow][fromCol];\n  const rookCol = toCol > fromCol ? 7 : 0;\n  const rook = board[fromRow][rookCol];\n\n  if (king !== \"♔\" && king !== \"♚\") return false;\n  if (rook !== \"♖\" && rook !== \"♜\") return false;\n  if (!isPathClear(fromRow, fromCol, fromRow, rookCol, board)) return false;\n\n  board[fromRow][fromCol] = \"\";\n  board[toRow][toCol] = king;\n  board[fromRow][rookCol] = \"\";\n  board[fromRow][toCol > fromCol ? toCol - 1 : toCol + 1] = rook;\n\n  return true;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}