import { getValidMoves } from "./moveRules"; // Change isValidMove to getValidMoves
 // Import lu·∫≠t di chuy·ªÉn

// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù
export const findKingPosition = (board, isWhite) => {
  for (let row = 0; row < 8; row++) {
    for (let col = 0; col < 8; col++) {
      if (board[row][col] === (isWhite ? "‚ôî" : "‚ôö")) {
        return { row, col };
      }
    }
  }
  return null;
};
// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng
export const isKingInCheck = (board, isWhite) => {
  const kingPos = findKingPosition(board, isWhite);
  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu

  const { row: kingRow, col: kingCol } = kingPos;

  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? "tr·∫Øng" : "ƒëen"} t·∫°i (${kingRow}, ${kingCol})`);

  for (let row = 0; row < 8; row++) {
      for (let col = 0; col < 8; col++) {
          const piece = board[row][col];
          if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y

          const isEnemy = "‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôö".includes(piece) !== isWhite; // N·∫øu qu√¢n c·ªù l√† c·ªßa ƒë·ªëi th·ªß
          if (isEnemy) {
              const possibleMoves = getValidMoves(piece, row, col, board); // ‚úÖ Use getValidMoves
              if (possibleMoves.some(move => move.row === kingRow && move.col === kingCol)) {
                  console.log(`‚ö†Ô∏è Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·ª´ (${row}, ${col})`);
                  return true;
              }
          }
      }
  }

  return false;
};

  
  

// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)
export const isCheckmate = (board, isWhite) => {
  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt.

  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? "tr·∫Øng" : "ƒëen"}...`);

  for (let row = 0; row < 8; row++) {
      for (let col = 0; col < 8; col++) {
          const piece = board[row][col];
          if (!piece) continue;

          const isFriendly = "‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî".includes(piece) === isWhite;
          if (!isFriendly) continue;

          const possibleMoves = getValidMoves(piece, row, col, board); // ‚úÖ Use getValidMoves

          for (const move of possibleMoves) {
              const newRow = move.row;
              const newCol = move.col;

              // Sao ch√©p b√†n c·ªù ƒë√∫ng c√°ch
              const newBoard = board.map(innerRow => [...innerRow]);
              newBoard[newRow][newCol] = piece;
              newBoard[row][col] = "";

              if (!isKingInCheck(newBoard, isWhite)) {
                  console.log(`‚úÖ T√¨m th·∫•y m·ªôt n∆∞·ªõc tho√°t t·∫°i (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);
                  return false; // N·∫øu c√≥ n∆∞·ªõc ƒëi tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt
              }
          }
      }
  }

  console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);
  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt
};
