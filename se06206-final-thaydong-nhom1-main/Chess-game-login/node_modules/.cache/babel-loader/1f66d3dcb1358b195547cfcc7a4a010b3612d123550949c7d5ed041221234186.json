{"ast":null,"code":"import SockJS from \"sockjs-client\";\nimport { Client } from \"@stomp/stompjs\";\nconst SOCKET_URL = \"http://localhost:8080/ws\"; // URL backend WebSocket\nlet stompClient = null;\nexport const connectWebSocket = onMoveReceived => {\n  if (stompClient && stompClient.connected) {\n    console.log(\"‚ö° WebSocket already connected\");\n    return;\n  }\n  const socket = new SockJS(SOCKET_URL);\n  stompClient = new Client({\n    webSocketFactory: () => socket,\n    reconnectDelay: 5000,\n    debug: msg => console.log(\"üîç STOMP Debug:\", msg),\n    onConnect: frame => {\n      console.log(\"‚úÖ WebSocket Connected\");\n      if (!stompClient || !stompClient.connected) {\n        console.warn(\"‚ö†Ô∏è STOMP client ch∆∞a s·∫µn s√†ng ƒë·ªÉ subscribe.\");\n        return;\n      }\n      const subscription = stompClient.subscribe(\"/topic/chess-updates\", message => {\n        console.log(\"üì© Subscription received data:\", message.body);\n        try {\n          const moveData = JSON.parse(message.body);\n          console.log(\"‚ôüÔ∏è Move Received:\", moveData);\n          if (moveData && moveData.move && moveData.move.fromRow !== undefined) {\n            onMoveReceived(moveData);\n          } else {\n            console.warn(\"‚ö†Ô∏è Invalid move data received:\", moveData);\n          }\n        } catch (error) {\n          console.error(\"‚ùå Error parsing received move:\", error);\n        }\n      });\n      console.log(\"üìå Subscription ID:\", subscription.id);\n    },\n    onDisconnect: () => console.log(\"‚ùå WebSocket Disconnected\"),\n    onStompError: frame => console.error(\"üö® STOMP Error:\", frame)\n  });\n  stompClient.activate();\n};\nexport const sendMove = (fromRow, fromCol, toRow, toCol, piece, player) => {\n  if (!stompClient || !stompClient.connected) {\n    console.warn(\"‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi!\");\n    return;\n  }\n  const moveData = {\n    move: {\n      fromRow: fromRow,\n      fromCol: fromCol,\n      toRow: toRow,\n      toCol: toCol,\n      piece: piece\n    }\n  };\n  console.log(\"üì§ G·ª≠i move:\", moveData);\n  stompClient.publish({\n    destination: \"/app/move\",\n    headers: {\n      \"content-type\": \"application/json\"\n    },\n    body: JSON.stringify(moveData)\n  });\n  console.log(\"‚úÖ Move sent to /app/move\");\n};","map":{"version":3,"names":["SockJS","Client","SOCKET_URL","stompClient","connectWebSocket","onMoveReceived","connected","console","log","socket","webSocketFactory","reconnectDelay","debug","msg","onConnect","frame","warn","subscription","subscribe","message","body","moveData","JSON","parse","move","fromRow","undefined","error","id","onDisconnect","onStompError","activate","sendMove","fromCol","toRow","toCol","piece","player","publish","destination","headers","stringify"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/websocket.js"],"sourcesContent":["import SockJS from \"sockjs-client\";\r\nimport { Client } from \"@stomp/stompjs\";\r\n\r\nconst SOCKET_URL = \"http://localhost:8080/ws\"; // URL backend WebSocket\r\nlet stompClient = null;\r\n\r\nexport const connectWebSocket = (onMoveReceived) => {\r\n    if (stompClient && stompClient.connected) {\r\n        console.log(\"‚ö° WebSocket already connected\");\r\n        return;\r\n    }\r\n\r\n    const socket = new SockJS(SOCKET_URL);\r\n    stompClient = new Client({\r\n        webSocketFactory: () => socket,\r\n        reconnectDelay: 5000, \r\n        debug: (msg) => console.log(\"üîç STOMP Debug:\", msg),\r\n        onConnect: (frame) => {\r\n            console.log(\"‚úÖ WebSocket Connected\");\r\n\r\n            if (!stompClient || !stompClient.connected) {\r\n                console.warn(\"‚ö†Ô∏è STOMP client ch∆∞a s·∫µn s√†ng ƒë·ªÉ subscribe.\");\r\n                return;\r\n            }\r\n\r\n            const subscription = stompClient.subscribe(\"/topic/chess-updates\", (message) => {\r\n                console.log(\"üì© Subscription received data:\", message.body);\r\n                try {\r\n                    const moveData = JSON.parse(message.body);\r\n                    console.log(\"‚ôüÔ∏è Move Received:\", moveData);\r\n\r\n                    if (moveData && moveData.move && moveData.move.fromRow !== undefined) {\r\n                        onMoveReceived(moveData);\r\n                    } else {\r\n                        console.warn(\"‚ö†Ô∏è Invalid move data received:\", moveData);\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"‚ùå Error parsing received move:\", error);\r\n                }\r\n            });\r\n\r\n            console.log(\"üìå Subscription ID:\", subscription.id);\r\n        },\r\n        onDisconnect: () => console.log(\"‚ùå WebSocket Disconnected\"),\r\n        onStompError: (frame) => console.error(\"üö® STOMP Error:\", frame),\r\n    });\r\n\r\n    stompClient.activate();\r\n};\r\n\r\nexport const sendMove = (fromRow, fromCol, toRow, toCol, piece, player) => {\r\n    if (!stompClient || !stompClient.connected) {\r\n        console.warn(\"‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi!\");\r\n        return;\r\n    }\r\n\r\n    const moveData = {\r\n      move: {\r\n          fromRow: fromRow,\r\n          fromCol: fromCol,\r\n          toRow: toRow,\r\n          toCol: toCol,\r\n          piece: piece\r\n      }\r\n   };\r\n  \r\n\r\n    console.log(\"üì§ G·ª≠i move:\", moveData);\r\n\r\n    stompClient.publish({\r\n        destination: \"/app/move\",\r\n        headers: { \"content-type\": \"application/json\" },\r\n        body: JSON.stringify(moveData),\r\n    });\r\n\r\n    console.log(\"‚úÖ Move sent to /app/move\");\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}