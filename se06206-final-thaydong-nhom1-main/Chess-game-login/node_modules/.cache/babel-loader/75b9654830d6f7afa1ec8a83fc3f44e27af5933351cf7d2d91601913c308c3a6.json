{"ast":null,"code":"/**\r\n * Possible states for the IStompSocket\r\n */\nexport var StompSocketState;\n(function (StompSocketState) {\n  StompSocketState[StompSocketState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n  StompSocketState[StompSocketState[\"OPEN\"] = 1] = \"OPEN\";\n  StompSocketState[StompSocketState[\"CLOSING\"] = 2] = \"CLOSING\";\n  StompSocketState[StompSocketState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(StompSocketState || (StompSocketState = {}));\n/**\r\n * Possible activation state\r\n */\nexport var ActivationState;\n(function (ActivationState) {\n  ActivationState[ActivationState[\"ACTIVE\"] = 0] = \"ACTIVE\";\n  ActivationState[ActivationState[\"DEACTIVATING\"] = 1] = \"DEACTIVATING\";\n  ActivationState[ActivationState[\"INACTIVE\"] = 2] = \"INACTIVE\";\n})(ActivationState || (ActivationState = {}));","map":{"version":3,"names":["StompSocketState","ActivationState"],"sources":["C:\\Users\\admin\\se06206-final-thaydong-nhom1\\se06206-final-thaydong-nhom1-main\\Chess-game-login\\node_modules\\@stomp\\stompjs\\src\\types.ts"],"sourcesContent":["import type { IFrame } from './i-frame.js';\r\nimport type { IMessage } from './i-message.js';\r\nimport { StompHeaders } from './stomp-headers.js';\r\nimport { Versions } from './versions.js';\r\n\r\n/**\r\n * This callback will receive a `string` as a parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type debugFnType = (msg: string) => void;\r\n\r\n/**\r\n * This callback will receive a {@link IMessage} as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type messageCallbackType = (message: IMessage) => void;\r\n\r\n/**\r\n * This callback will receive a {@link IFrame} as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type frameCallbackType = ((frame: IFrame) => void) | (() => void);\r\n\r\n/**\r\n * This callback will receive a [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n * as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type closeEventCallbackType<T = any> = (evt: T) => void;\r\n\r\n/**\r\n * This callback will receive an [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\r\n * as parameter.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport type wsErrorCallbackType<T = any> = (evt: T) => void;\r\n\r\n/**\r\n * Parameters for [Client#publish]{@link Client#publish}.\r\n * Aliased as publishParams as well.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport interface IPublishParams {\r\n  /**\r\n   * destination end point\r\n   */\r\n  destination: string;\r\n  /**\r\n   * headers (optional)\r\n   */\r\n  headers?: StompHeaders;\r\n  /**\r\n   * body (optional)\r\n   */\r\n  body?: string;\r\n  /**\r\n   * binary body (optional)\r\n   */\r\n  binaryBody?: Uint8Array;\r\n  /**\r\n   * By default, a `content-length` header will be added in the Frame to the broker.\r\n   * Set it to `true` for the header to be skipped.\r\n   */\r\n  skipContentLengthHeader?: boolean;\r\n}\r\n\r\n/**\r\n * Backward compatibility, switch to {@link IPublishParams}.\r\n */\r\nexport type publishParams = IPublishParams;\r\n\r\n/**\r\n * Used in {@link IRawFrameType}\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport type RawHeaderType = [string, string];\r\n\r\n/**\r\n * The parser yield frames in this structure\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * @internal\r\n */\r\nexport interface IRawFrameType {\r\n  command: string | undefined;\r\n  headers: RawHeaderType[];\r\n  binaryBody: Uint8Array | undefined;\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IStompSocketMessageEvent {\r\n  data?: string | ArrayBuffer;\r\n}\r\n\r\n/**\r\n * Copied from Websocket interface to avoid dom typelib dependency.\r\n *\r\n * @internal\r\n */\r\nexport interface IStompSocket {\r\n  url: string;\r\n  onclose: ((ev?: any) => any) | undefined | null;\r\n  onerror: ((ev: any) => any) | undefined | null;\r\n  onmessage: ((ev: IStompSocketMessageEvent) => any) | undefined | null;\r\n  onopen: ((ev?: any) => any) | undefined | null;\r\n  terminate?: (() => any) | undefined | null;\r\n\r\n  /**\r\n   * Returns a string that indicates how binary data from the socket is exposed to scripts:\r\n   * We support only 'arraybuffer'.\r\n   */\r\n  binaryType?: string;\r\n\r\n  /**\r\n   * Returns the state of the socket connection. It can have the values of StompSocketState.\r\n   */\r\n  readonly readyState: number;\r\n\r\n  /**\r\n   * Closes the connection.\r\n   */\r\n  close(): void;\r\n  /**\r\n   * Transmits data using the connection. data can be a string or an ArrayBuffer.\r\n   */\r\n  send(data: string | ArrayBuffer): void;\r\n}\r\n\r\n/**\r\n * Possible states for the IStompSocket\r\n */\r\nexport enum StompSocketState {\r\n  CONNECTING,\r\n  OPEN,\r\n  CLOSING,\r\n  CLOSED,\r\n}\r\n\r\n/**\r\n * Possible activation state\r\n */\r\nexport enum ActivationState {\r\n  ACTIVE,\r\n  DEACTIVATING,\r\n  INACTIVE,\r\n}\r\n\r\n/**\r\n * @internal\r\n */\r\nexport interface IStomptHandlerConfig {\r\n  debug: debugFnType;\r\n  stompVersions: Versions;\r\n  connectHeaders: StompHeaders;\r\n  disconnectHeaders: StompHeaders;\r\n  heartbeatIncoming: number;\r\n  heartbeatOutgoing: number;\r\n  splitLargeFrames: boolean;\r\n  maxWebSocketChunkSize: number;\r\n  forceBinaryWSFrames: boolean;\r\n  logRawCommunication: boolean;\r\n  appendMissingNULLonIncoming: boolean;\r\n  discardWebsocketOnCommFailure: boolean;\r\n  onConnect: frameCallbackType;\r\n  onDisconnect: frameCallbackType;\r\n  onStompError: frameCallbackType;\r\n  onWebSocketClose: closeEventCallbackType;\r\n  onWebSocketError: wsErrorCallbackType;\r\n  onUnhandledMessage: messageCallbackType;\r\n  onUnhandledReceipt: frameCallbackType;\r\n  onUnhandledFrame: frameCallbackType;\r\n}\r\n"],"mappings":"AA4IA;;;AAGA,WAAYA,gBAKX;AALD,WAAYA,gBAAgB;EAC1BA,gBAAA,CAAAA,gBAAA,kCAAU;EACVA,gBAAA,CAAAA,gBAAA,sBAAI;EACJA,gBAAA,CAAAA,gBAAA,4BAAO;EACPA,gBAAA,CAAAA,gBAAA,0BAAM;AACR,CAAC,EALWA,gBAAgB,KAAhBA,gBAAgB;AAO5B;;;AAGA,WAAYC,eAIX;AAJD,WAAYA,eAAe;EACzBA,eAAA,CAAAA,eAAA,0BAAM;EACNA,eAAA,CAAAA,eAAA,sCAAY;EACZA,eAAA,CAAAA,eAAA,8BAAQ;AACV,CAAC,EAJWA,eAAe,KAAfA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}