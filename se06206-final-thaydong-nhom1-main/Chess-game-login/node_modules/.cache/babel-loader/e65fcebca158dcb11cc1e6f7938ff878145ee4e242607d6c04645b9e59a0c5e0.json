{"ast":null,"code":"let currentTurn = true; // true là Trắng, false là Đen\n\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n\n  // Kiểm tra màu quân cờ\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  switch (piece) {\n    case \"♙\":\n    case \"♟\":\n      // Tốt\n      validMoves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\":\n    case \"♜\":\n      // Xe\n      validMoves = getRookMoves(row, col, board, isWhite);\n      break;\n    case \"♘\":\n    case \"♞\":\n      // Mã\n      validMoves = getKnightMoves(row, col, board, isWhite);\n      break;\n    case \"♗\":\n    case \"♝\":\n      // Tượng\n      validMoves = getBishopMoves(row, col, board, isWhite);\n      break;\n    case \"♕\":\n    case \"♛\":\n      // Hậu\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\n      break;\n    case \"♔\":\n    case \"♚\":\n      // Vua\n      validMoves = getKingMoves(row, col, board, isWhite);\n      break;\n    default:\n      break;\n  }\n  return validMoves;\n};\n\n// ✅ Xác minh nước đi có hợp lệ không\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const validMoves = getValidMoves(piece, fromRow, fromCol, board);\n  return validMoves.some(move => move.row === toRow && move.col === toCol);\n};\n\n// ✅ Xử lý di chuyển Tốt (Pawn) + Phong cấp\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const endRow = isWhite ? 0 : 7;\n\n  // Tiến lên một ô (nếu trống)\n  if (row + direction >= 0 && row + direction < 8) {\n    if (!board[row + direction][col]) {\n      moves.push({\n        row: row + direction,\n        col,\n        promote: row + direction === endRow\n      });\n\n      // Nếu là nước đi đầu tiên của tốt, có thể đi hai ô\n      if (row === startRow && !board[row + 2 * direction][col]) {\n        moves.push({\n          row: row + 2 * direction,\n          col\n        });\n      }\n    }\n\n    // Ăn chéo (bắt quân đối thủ)\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col - 1,\n        promote: row + direction === endRow\n      });\n    }\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col + 1,\n        promote: row + direction === endRow\n      });\n    }\n  }\n  return moves;\n};\nexport const promotePawn = async (row, col, board, isWhite) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const promotedPiece = window.prompt(\"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\", \"Q\");\n      let newPiece;\n      switch (promotedPiece === null || promotedPiece === void 0 ? void 0 : promotedPiece.toUpperCase()) {\n        case \"R\":\n          newPiece = isWhite ? \"♖\" : \"♜\";\n          break;\n        case \"B\":\n          newPiece = isWhite ? \"♗\" : \"♝\";\n          break;\n        case \"N\":\n          newPiece = isWhite ? \"♘\" : \"♞\";\n          break;\n        default:\n          newPiece = isWhite ? \"♕\" : \"♛\";\n        // Mặc định là Hậu\n      }\n      board[row][col] = newPiece; // Cập nhật bàn cờ\n      resolve();\n    }, 100); // Chờ một chút để tránh lỗi UI\n  });\n};\n\n// ✅ Xử lý di chuyển Xe (Rook)\nconst getRookMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\n// ✅ Xử lý di chuyển Tượng (Bishop)\nconst getBishopMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\n// ✅ Xử lý di chuyển Mã (Knight)\nconst getKnightMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n  knightMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý di chuyển Vua (King)\nconst getKingMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n  kingMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý nước đi theo đường thẳng\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\n  let moves = [];\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      } else {\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n          moves.push({\n            row: newRow,\n            col: newCol\n          });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n  return moves;\n};\n\n// ✅ Xuất tất cả các hàm cần thiết\nexport { getPawnMoves, getRookMoves, getBishopMoves, getKnightMoves, getKingMoves, getLinearMoves };","map":{"version":3,"names":["currentTurn","getValidMoves","piece","row","col","board","validMoves","isWhite","includes","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","isValidMove","fromRow","fromCol","toRow","toCol","some","move","moves","direction","startRow","endRow","push","promote","promotePawn","Promise","resolve","setTimeout","promotedPiece","window","prompt","newPiece","toUpperCase","getLinearMoves","knightMoves","forEach","dx","dy","newRow","newCol","target","kingMoves","directions"],"sources":["/root/se06206-final-thaydong-nhom1/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["let currentTurn = true; // true là Trắng, false là Đen\n\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n\n  // Kiểm tra màu quân cờ\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n\n  switch (piece) {\n    case \"♙\": case \"♟\": // Tốt\n      validMoves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\": case \"♜\": // Xe\n      validMoves = getRookMoves(row, col, board, isWhite);\n      break;\n    case \"♘\": case \"♞\": // Mã\n      validMoves = getKnightMoves(row, col, board, isWhite);\n      break;\n    case \"♗\": case \"♝\": // Tượng\n      validMoves = getBishopMoves(row, col, board, isWhite);\n      break;\n    case \"♕\": case \"♛\": // Hậu\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\n      break;\n    case \"♔\": case \"♚\": // Vua\n      validMoves = getKingMoves(row, col, board, isWhite);\n      break;\n    default:\n      break;\n  }\n\n  return validMoves;\n};\n\n// ✅ Xác minh nước đi có hợp lệ không\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const validMoves = getValidMoves(piece, fromRow, fromCol, board);\n  return validMoves.some(move => move.row === toRow && move.col === toCol);\n};\n\n// ✅ Xử lý di chuyển Tốt (Pawn) + Phong cấp\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const endRow = isWhite ? 0 : 7;\n\n  // Tiến lên một ô (nếu trống)\n  if (row + direction >= 0 && row + direction < 8) {\n    if (!board[row + direction][col]) {\n      moves.push({ row: row + direction, col, promote: row + direction === endRow });\n\n      // Nếu là nước đi đầu tiên của tốt, có thể đi hai ô\n      if (row === startRow && !board[row + 2 * direction][col]) {\n        moves.push({ row: row + 2 * direction, col });\n      }\n    }\n\n    // Ăn chéo (bắt quân đối thủ)\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\n      moves.push({ row: row + direction, col: col - 1, promote: row + direction === endRow });\n    }\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\n      moves.push({ row: row + direction, col: col + 1, promote: row + direction === endRow });\n    }\n  }\n  return moves;\n};\n\n\nexport const promotePawn = async (row, col, board, isWhite) => {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      const promotedPiece = window.prompt(\n        \"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\",\n        \"Q\"\n      );\n\n      let newPiece;\n      switch (promotedPiece?.toUpperCase()) {\n        case \"R\": newPiece = isWhite ? \"♖\" : \"♜\"; break;\n        case \"B\": newPiece = isWhite ? \"♗\" : \"♝\"; break;\n        case \"N\": newPiece = isWhite ? \"♘\" : \"♞\"; break;\n        default: newPiece = isWhite ? \"♕\" : \"♛\"; // Mặc định là Hậu\n      }\n\n      board[row][col] = newPiece; // Cập nhật bàn cờ\n      resolve();\n    }, 100); // Chờ một chút để tránh lỗi UI\n  });\n};\n\n\n// ✅ Xử lý di chuyển Xe (Rook)\nconst getRookMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\n// ✅ Xử lý di chuyển Tượng (Bishop)\nconst getBishopMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\n// ✅ Xử lý di chuyển Mã (Knight)\nconst getKnightMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n\n  knightMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({ row: newRow, col: newCol });\n      }\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xử lý di chuyển Vua (King)\nconst getKingMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n\n  kingMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({ row: newRow, col: newCol });\n      }\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xử lý nước đi theo đường thẳng\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\n  let moves = [];\n\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target) {\n        moves.push({ row: newRow, col: newCol });\n      } else {\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n          moves.push({ row: newRow, col: newCol });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xuất tất cả các hàm cần thiết\nexport { getPawnMoves, getRookMoves, getBishopMoves, getKnightMoves, getKingMoves, getLinearMoves };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}