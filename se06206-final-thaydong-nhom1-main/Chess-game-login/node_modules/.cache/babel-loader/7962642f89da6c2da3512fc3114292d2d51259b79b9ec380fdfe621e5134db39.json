{"ast":null,"code":"const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  if (!piece) return false;\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n  if (fromRow === toRow && fromCol === toCol) return false; // Không di chuyển đến vị trí hiện tại\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece); // Kiểm tra quân trắng hay đen\n  if (isWhite !== isWhiteTurn) return false; // Kiểm tra lượt đi hợp lệ\n\n  const targetPiece = board[toRow][toCol];\n\n  // Không ăn quân cùng màu\n  if (targetPiece && isWhite === \"♙♖♘♗♕♔\".includes(targetPiece)) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(dx, dy);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(dx, dy);\n    default:\n      return false;\n  }\n};\n\n// Quân tốt (Pawn) - Đã sửa lỗi quân đen không thể di chuyển\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1; // Quân trắng đi lên (-1), quân đen đi xuống (+1)\n  const startRow = isWhite ? 6 : 1; // Vị trí ban đầu của quân tốt\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return true; // Đi thẳng 1 ô\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][toCol]) return true; // Đi thẳng 2 ô\n  }\n\n  // Ăn quân chéo 1 ô\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n  return false;\n};\n\n// Xe (Rook) - Đã sửa lỗi kiểm tra chặn đường\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// Mã (Knight) - Đã kiểm tra đầy đủ nước đi\nconst isValidKnightMove = (dx, dy) => {\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n};\n\n// Tượng (Bishop) - Đã sửa lỗi đường chéo\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// Hậu (Queen) - Đã sửa lỗi kiểm tra chặn đường\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\n\n// Vua (King) - Đã sửa lỗi đi chéo 1 ô\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// Kiểm tra đường đi có bị chặn không (Rook, Bishop, Queen) - Đã sửa lỗi đi xuyên quân\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\n\n// Kiểm tra nếu vua bị ăn - Đã tối ưu\nconst checkGameOver = board => {\n  let whiteKingExists = false;\n  let blackKingExists = false;\n  for (let row of board) {\n    for (let piece of row) {\n      if (piece === \"♔\") whiteKingExists = true;\n      if (piece === \"♚\") blackKingExists = true;\n    }\n  }\n  if (!whiteKingExists) return \"Black wins!\";\n  if (!blackKingExists) return \"White wins!\";\n  return null;\n};\n\n// Xuất tất cả các hàm\nexport { isValidMove, checkGameOver };","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","isWhiteTurn","dx","dy","isWhite","includes","targetPiece","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","direction","startRow","Math","abs","isPathClear","sign","x","y","checkGameOver","whiteKingExists","blackKingExists","row"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  if (!piece) return false;\n\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n\n  if (fromRow === toRow && fromCol === toCol) return false; // Không di chuyển đến vị trí hiện tại\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece); // Kiểm tra quân trắng hay đen\n  if (isWhite !== isWhiteTurn) return false; // Kiểm tra lượt đi hợp lệ\n\n  const targetPiece = board[toRow][toCol];\n\n  // Không ăn quân cùng màu\n  if (targetPiece && (isWhite === \"♙♖♘♗♕♔\".includes(targetPiece))) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(dx, dy);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(dx, dy);\n    default: return false;\n  }\n};\n\n// Quân tốt (Pawn) - Đã sửa lỗi quân đen không thể di chuyển\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1; // Quân trắng đi lên (-1), quân đen đi xuống (+1)\n  const startRow = isWhite ? 6 : 1; // Vị trí ban đầu của quân tốt\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return true; // Đi thẳng 1 ô\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][toCol]) return true; // Đi thẳng 2 ô\n  }\n\n  // Ăn quân chéo 1 ô\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n\n  return false;\n};\n\n// Xe (Rook) - Đã sửa lỗi kiểm tra chặn đường\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// Mã (Knight) - Đã kiểm tra đầy đủ nước đi\nconst isValidKnightMove = (dx, dy) => {\n  return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n};\n\n// Tượng (Bishop) - Đã sửa lỗi đường chéo\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// Hậu (Queen) - Đã sửa lỗi kiểm tra chặn đường\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return (\n    isValidRookMove(fromRow, fromCol, toRow, toCol, board) ||\n    isValidBishopMove(fromRow, fromCol, toRow, toCol, board)\n  );\n};\n\n// Vua (King) - Đã sửa lỗi đi chéo 1 ô\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// Kiểm tra đường đi có bị chặn không (Rook, Bishop, Queen) - Đã sửa lỗi đi xuyên quân\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\n\n// Kiểm tra nếu vua bị ăn - Đã tối ưu\nconst checkGameOver = (board) => {\n  let whiteKingExists = false;\n  let blackKingExists = false;\n\n  for (let row of board) {\n    for (let piece of row) {\n      if (piece === \"♔\") whiteKingExists = true;\n      if (piece === \"♚\") blackKingExists = true;\n    }\n  }\n\n  if (!whiteKingExists) return \"Black wins!\";\n  if (!blackKingExists) return \"White wins!\";\n  return null;\n};\n\n// Xuất tất cả các hàm\nexport { isValidMove, checkGameOver };\n"],"mappings":"AAAA,MAAMA,WAAW,GAAGA,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,KAAK;EACjF,IAAI,CAACN,KAAK,EAAE,OAAO,KAAK;EAExB,MAAMO,EAAE,GAAGH,KAAK,GAAGF,OAAO;EAC1B,MAAMM,EAAE,GAAGL,KAAK,GAAGF,OAAO;EAE1B,IAAIA,OAAO,KAAKE,KAAK,IAAID,OAAO,KAAKE,KAAK,EAAE,OAAO,KAAK,CAAC,CAAC;;EAE1D,MAAMK,OAAO,GAAG,QAAQ,CAACC,QAAQ,CAACV,KAAK,CAAC,CAAC,CAAC;EAC1C,IAAIS,OAAO,KAAKH,WAAW,EAAE,OAAO,KAAK,CAAC,CAAC;;EAE3C,MAAMK,WAAW,GAAGN,KAAK,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC;;EAEvC;EACA,IAAIO,WAAW,IAAKF,OAAO,KAAK,QAAQ,CAACC,QAAQ,CAACC,WAAW,CAAE,EAAE,OAAO,KAAK;EAE7E,QAAQX,KAAK;IACX,KAAK,GAAG;MAAE,OAAOY,eAAe,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE,IAAI,CAAC;IAC7E,KAAK,GAAG;MAAE,OAAOO,eAAe,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE,KAAK,CAAC;IAC9E,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOQ,eAAe,CAACZ,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IACjF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOS,iBAAiB,CAACP,EAAE,EAAEC,EAAE,CAAC;IACpD,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOO,iBAAiB,CAACd,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IACnF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOW,gBAAgB,CAACf,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IAClF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOY,eAAe,CAACV,EAAE,EAAEC,EAAE,CAAC;IAClD;MAAS,OAAO,KAAK;EACvB;AACF,CAAC;;AAED;AACA,MAAMI,eAAe,GAAGA,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEI,OAAO,KAAK;EAC1E,MAAMS,SAAS,GAAGT,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACpC,MAAMU,QAAQ,GAAGV,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EAClC,MAAMD,EAAE,GAAGL,KAAK,GAAGF,OAAO;EAC1B,MAAMM,EAAE,GAAGa,IAAI,CAACC,GAAG,CAACjB,KAAK,GAAGF,OAAO,CAAC;EAEpC,IAAIK,EAAE,KAAK,CAAC,EAAE;IACZ,IAAIC,EAAE,KAAKU,SAAS,IAAI,CAACb,KAAK,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC;IAC3D,IAAIH,OAAO,KAAKkB,QAAQ,IAAIX,EAAE,KAAK,CAAC,GAAGU,SAAS,IAAI,CAACb,KAAK,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC,IAAI,CAACC,KAAK,CAACJ,OAAO,GAAGiB,SAAS,CAAC,CAACd,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC,CAAC;EAC/H;;EAEA;EACA,IAAIG,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAKU,SAAS,IAAIb,KAAK,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC,EAAE,OAAO,IAAI;EAEpE,OAAO,KAAK;AACd,CAAC;;AAED;AACA,MAAMS,eAAe,GAAGA,CAACZ,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACjE,IAAIJ,OAAO,KAAKE,KAAK,IAAID,OAAO,KAAKE,KAAK,EAAE,OAAO,KAAK;EACxD,OAAOkB,WAAW,CAACrB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;AAC3D,CAAC;;AAED;AACA,MAAMS,iBAAiB,GAAGA,CAACP,EAAE,EAAEC,EAAE,KAAK;EACpC,OAAQY,IAAI,CAACC,GAAG,CAACd,EAAE,CAAC,KAAK,CAAC,IAAIa,IAAI,CAACC,GAAG,CAACb,EAAE,CAAC,KAAK,CAAC,IAAMY,IAAI,CAACC,GAAG,CAACd,EAAE,CAAC,KAAK,CAAC,IAAIa,IAAI,CAACC,GAAG,CAACb,EAAE,CAAC,KAAK,CAAE;AACjG,CAAC;;AAED;AACA,MAAMO,iBAAiB,GAAGA,CAACd,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;EACnE,IAAIe,IAAI,CAACC,GAAG,CAACpB,OAAO,GAAGE,KAAK,CAAC,KAAKiB,IAAI,CAACC,GAAG,CAACnB,OAAO,GAAGE,KAAK,CAAC,EAAE,OAAO,KAAK;EACzE,OAAOkB,WAAW,CAACrB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;AAC3D,CAAC;;AAED;AACA,MAAMW,gBAAgB,GAAGA,CAACf,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;EAClE,OACEQ,eAAe,CAACZ,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC,IACtDU,iBAAiB,CAACd,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;AAE5D,CAAC;;AAED;AACA,MAAMY,eAAe,GAAGA,CAACV,EAAE,EAAEC,EAAE,KAAK;EAClC,OAAOY,IAAI,CAACC,GAAG,CAACd,EAAE,CAAC,IAAI,CAAC,IAAIa,IAAI,CAACC,GAAG,CAACb,EAAE,CAAC,IAAI,CAAC;AAC/C,CAAC;;AAED;AACA,MAAMc,WAAW,GAAGA,CAACrB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,KAAK;EAC7D,MAAME,EAAE,GAAGa,IAAI,CAACG,IAAI,CAACnB,KAAK,GAAGF,OAAO,CAAC;EACrC,MAAMM,EAAE,GAAGY,IAAI,CAACG,IAAI,CAACpB,KAAK,GAAGF,OAAO,CAAC;EACrC,IAAIuB,CAAC,GAAGtB,OAAO,GAAGK,EAAE;EACpB,IAAIkB,CAAC,GAAGxB,OAAO,GAAGO,EAAE;EAEpB,OAAOgB,CAAC,KAAKpB,KAAK,IAAIqB,CAAC,KAAKtB,KAAK,EAAE;IACjC,IAAIE,KAAK,CAACoB,CAAC,CAAC,CAACD,CAAC,CAAC,EAAE,OAAO,KAAK;IAC7BA,CAAC,IAAIjB,EAAE;IACPkB,CAAC,IAAIjB,EAAE;EACT;EACA,OAAO,IAAI;AACb,CAAC;;AAED;AACA,MAAMkB,aAAa,GAAIrB,KAAK,IAAK;EAC/B,IAAIsB,eAAe,GAAG,KAAK;EAC3B,IAAIC,eAAe,GAAG,KAAK;EAE3B,KAAK,IAAIC,GAAG,IAAIxB,KAAK,EAAE;IACrB,KAAK,IAAIL,KAAK,IAAI6B,GAAG,EAAE;MACrB,IAAI7B,KAAK,KAAK,GAAG,EAAE2B,eAAe,GAAG,IAAI;MACzC,IAAI3B,KAAK,KAAK,GAAG,EAAE4B,eAAe,GAAG,IAAI;IAC3C;EACF;EAEA,IAAI,CAACD,eAAe,EAAE,OAAO,aAAa;EAC1C,IAAI,CAACC,eAAe,EAAE,OAAO,aAAa;EAC1C,OAAO,IAAI;AACb,CAAC;;AAED;AACA,SAAS7B,WAAW,EAAE2B,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}