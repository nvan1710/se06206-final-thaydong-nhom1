{"ast":null,"code":"var _jsxFileName = \"D:\\\\se06206-final-thaydong-nhom1-main\\\\se06206-final-thaydong-nhom1-main\\\\Chess-game-login\\\\src\\\\components\\\\ChessBoard.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { getValidMoves } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\";\nimport pieceImages from \"../assets/pieceImages\";\nimport useWebSocket from \"../hooks/useWebSocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  PIECE: \"piece\"\n};\nconst {\n  sendMessage\n} = useWebSocket(\"ws://localhost:8080\", message => {\n  if (message.type === \"move\") {\n    movePieceFromServer(message.fromRow, message.fromCol, message.toRow, message.toCol);\n  }\n});\nconst Square = ({\n  piece,\n  row,\n  col,\n  movePiece,\n  isKingInCheck,\n  selectedPiece,\n  setSelectedPiece,\n  currentTurn,\n  board,\n  validMoves\n}) => {\n  _s();\n  const isDark = (row + col) % 2 === 1;\n  const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n  const isValidMoveSquare = validMoves.some(move => move.row === row && move.col === col);\n  const isCaptureMove = isValidMoveSquare && board[row][col];\n  const [{\n    isDragging\n  }, drag] = useDrag(() => ({\n    type: ItemTypes.PIECE,\n    item: {\n      row,\n      col,\n      piece\n    },\n    collect: monitor => ({\n      isDragging: !!monitor.isDragging()\n    })\n  }));\n  const [, drop] = useDrop(() => ({\n    accept: ItemTypes.PIECE,\n    drop: item => movePiece(item.row, item.col, row, col)\n  }));\n  const handleClick = () => {\n    if (selectedPiece) {\n      const isValidMove = validMoves.some(move => move.row === row && move.col === col);\n      if (isValidMove) {\n        movePiece(selectedPiece.row, selectedPiece.col, row, col);\n      }\n      setSelectedPiece(null);\n    } else if (piece) {\n      const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n      if (isWhite === currentTurn) {\n        setSelectedPiece({\n          row,\n          col,\n          piece\n        });\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: drop,\n    className: `w-16 h-16 flex justify-center items-center \n        ${isDark ? \"bg-[#9A6553]\" : \"bg-[#D5B793]\"}\n        ${isKingInCheck ? \"bg-red-600 animate-pulse\" : \"\"}\n        ${isSelected ? \"border-4 border-yellow-500\" : \"\"}\n        ${isValidMoveSquare ? \"border-4 border-green-500\" : \"\"}\n        ${isCaptureMove ? \"border-4 border-red-500\" : \"\"}\n      `,\n    onClick: handleClick,\n    children: piece && pieceImages[piece] && /*#__PURE__*/_jsxDEV(\"img\", {\n      ref: drag,\n      src: pieceImages[piece],\n      alt: piece,\n      className: `w-12 h-12 object-contain ${isDragging ? \"opacity-50\" : \"cursor-pointer\"}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(Square, \"FSfJ4ie57JY5to1rF8fuHph4Yps=\", false, function () {\n  return [useDrag, useDrop];\n});\n_c = Square;\nconst Chessboard = () => {\n  _s2();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(true);\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  // ✅ Thêm hàm resetGame ngay tại đây\n  const resetGame = () => {\n    setBoard(initialBoardSetup);\n    setCurrentTurn(true);\n    setIsCheck(false);\n    setIsCheckMate(false);\n    setCheckedKing(null);\n    setSelectedPiece(null);\n    setValidMoves([]);\n    setGameMessage(\"🎭 New Game Started! White's Turn\");\n  };\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    const newBoard = board.map(row => [...row]);\n    const piece = newBoard[fromRow][fromCol];\n    const validMoves = getValidMoves(piece, fromRow, fromCol, board);\n    if (!validMoves.some(move => move.row === toRow && move.col === toCol)) {\n      return;\n    }\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n    setBoard(newBoard);\n    setCurrentTurn(!currentTurn);\n    sendMessage({\n      type: \"move\",\n      fromRow,\n      fromCol,\n      toRow,\n      toCol\n    });\n  };\n  const movePieceFromServer = (fromRow, fromCol, toRow, toCol) => {\n    setBoard(prevBoard => {\n      const newBoard = prevBoard.map(row => [...row]);\n      newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n      newBoard[fromRow][fromCol] = \"\";\n      return newBoard;\n    });\n    setCurrentTurn(prevTurn => !prevTurn);\n  };\n  useEffect(() => {\n    const kingCheck = isKingInCheck(board, currentTurn);\n    const checkmate = isCheckmate(board, currentTurn);\n    const kingPos = findKingPosition(board, currentTurn);\n    setIsCheck(kingCheck);\n    setIsCheckMate(checkmate);\n    setCheckedKing(kingCheck ? kingPos : null);\n\n    // ✅ Cập nhật thông báo UI\n    if (checkmate) {\n      setGameMessage(`🏆 Checkmate! ${currentTurn ? \"Black\" : \"White\"} Wins!`);\n    } else if (kingCheck) {\n      setGameMessage(`🔥 Warning! ${currentTurn ? \"White\" : \"Black\"} King is in Check! 🔥`);\n    } else {\n      setGameMessage(`🎭 Current Turn: ${currentTurn ? \"White\" : \"Black\"}`);\n    }\n  }, [board, currentTurn]); // Chạy lại khi bàn cờ hoặc lượt chơi thay đổi\n\n  const convertToChessNotation = (row, col) => {\n    const files = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n    return `${files[col]}${8 - row}`;\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col justify-center items-center bg-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"\\u265F\\uFE0F Chess Game \\u265F\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), isCheck && !isCheckMate && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed top-5 right-5 bg-red-600 text-white px-4 py-2 rounded-md shadow-lg font-bold animate-pulse\",\n        children: [\"\\uD83D\\uDD25 Warning! \", currentTurn ? \"White\" : \"Black\", \" King is in Check! \\uD83D\\uDD25\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-2 bg-yellow-300 text-black px-4 py-2 rounded text-center font-bold shadow-md\",\n        children: gameMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), isCheckMate && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed top-0 left-0 w-full h-full flex justify-center items-center bg-black bg-opacity-75\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bg-white p-6 rounded-lg shadow-xl text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-2xl font-bold text-red-600\",\n            children: [\"\\uD83C\\uDFC6 Checkmate! \", currentTurn ? \"Black\" : \"White\", \" Wins! \\uD83C\\uDFC6\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: resetGame,\n            className: \"mt-4 px-4 py-2 bg-blue-500 text-white font-bold rounded hover:bg-blue-600\",\n            children: \"Play Again\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-8 border-4 border-black shadow-lg\",\n        children: board.map((row, rowIndex) => row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(Square, {\n          piece: piece,\n          row: rowIndex,\n          col: colIndex,\n          movePiece: movePiece,\n          isKingInCheck: (checkedKing === null || checkedKing === void 0 ? void 0 : checkedKing.row) === rowIndex && (checkedKing === null || checkedKing === void 0 ? void 0 : checkedKing.col) === colIndex,\n          selectedPiece: selectedPiece,\n          setSelectedPiece: setSelectedPiece,\n          currentTurn: currentTurn,\n          board: board,\n          validMoves: selectedPiece ? getValidMoves(selectedPiece.piece, selectedPiece.row, selectedPiece.col, board) : []\n        }, `${rowIndex}-${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }, this)))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 5\n  }, this);\n};\n_s2(Chessboard, \"fWlzpJ08CDjKLC6b8nPY2nY2uXM=\");\n_c2 = Chessboard;\nconst handleMove = (fromRow, fromCol, toRow, toCol) => {\n  const newBoard = JSON.parse(JSON.stringify(board)); // Sao chép bàn cờ\n  const movingPiece = newBoard[fromRow][fromCol];\n  if (!isValidMove(movingPiece, fromRow, fromCol, toRow, toCol, board)) {\n    console.log(\"❌ Nước đi không hợp lệ\");\n    return;\n  }\n\n  // Thực hiện nước đi\n  newBoard[toRow][toCol] = movingPiece;\n  newBoard[fromRow][fromCol] = \"\";\n  setBoard(newBoard);\n  setIsWhiteTurn(!isWhiteTurn); // Đổi lượt chơi\n\n  // Kiểm tra chiếu & chiếu hết\n  if (isKingInCheck(newBoard, !isWhiteTurn)) {\n    console.log(`⚠️ Vua đang bị chiếu`);\n    setGameMessage(`⚠️ King is in check!`);\n    if (isCheckmate(newBoard, !isWhiteTurn)) {\n      console.log(`🏆 Chiếu hết! Trò chơi kết thúc.`);\n      setGameMessage(`🏆 Checkmate! ${isWhiteTurn ? \"White\" : \"Black\"} wins!`);\n      setGameOver(true);\n    }\n  } else {\n    setGameMessage(\"\");\n  }\n};\nexport default Chessboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Chessboard\");","map":{"version":3,"names":["React","useState","useEffect","useDrag","useDrop","DndProvider","HTML5Backend","getValidMoves","initialBoardSetup","isKingInCheck","isCheckmate","findKingPosition","pieceImages","useWebSocket","jsxDEV","_jsxDEV","ItemTypes","PIECE","sendMessage","message","type","movePieceFromServer","fromRow","fromCol","toRow","toCol","Square","piece","row","col","movePiece","selectedPiece","setSelectedPiece","currentTurn","board","validMoves","_s","isDark","isSelected","isValidMoveSquare","some","move","isCaptureMove","isDragging","drag","item","collect","monitor","drop","accept","handleClick","isValidMove","isWhite","includes","ref","className","onClick","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chessboard","_s2","setBoard","moveHistory","setMoveHistory","setCurrentTurn","isCheck","setIsCheck","isCheckMate","setIsCheckMate","checkedKing","setCheckedKing","setValidMoves","gameMessage","setGameMessage","resetGame","newBoard","map","prevBoard","prevTurn","kingCheck","checkmate","kingPos","convertToChessNotation","files","backend","rowIndex","colIndex","_c2","handleMove","JSON","parse","stringify","movingPiece","console","log","setIsWhiteTurn","isWhiteTurn","setGameOver","$RefreshReg$"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/components/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { getValidMoves } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\";\nimport pieceImages from \"../assets/pieceImages\";\nimport useWebSocket from \"../hooks/useWebSocket\";\n\nconst ItemTypes = { PIECE: \"piece\" };\nconst { sendMessage } = useWebSocket(\"ws://localhost:8080\", (message) => {\n  if (message.type === \"move\") {\n    movePieceFromServer(message.fromRow, message.fromCol, message.toRow, message.toCol);\n  }\n});\n\nconst Square = ({ piece, row, col, movePiece, isKingInCheck, selectedPiece, setSelectedPiece, currentTurn, board, validMoves }) => {\n  const isDark = (row + col) % 2 === 1;\n  const isSelected = selectedPiece && selectedPiece.row === row && selectedPiece.col === col;\n  const isValidMoveSquare = validMoves.some((move) => move.row === row && move.col === col);\n  const isCaptureMove = isValidMoveSquare && board[row][col];\n\n  const [{ isDragging }, drag] = useDrag(() => ({\n    type: ItemTypes.PIECE,\n    item: { row, col, piece },\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  }));\n\n  const [, drop] = useDrop(() => ({\n    accept: ItemTypes.PIECE,\n    drop: (item) => movePiece(item.row, item.col, row, col),\n  }));\n\n  const handleClick = () => {\n    if (selectedPiece) {\n      const isValidMove = validMoves.some((move) => move.row === row && move.col === col);\n      if (isValidMove) {\n        movePiece(selectedPiece.row, selectedPiece.col, row, col);\n      }\n      setSelectedPiece(null);\n    } else if (piece) {\n      const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n      if (isWhite === currentTurn) {\n        setSelectedPiece({ row, col, piece });\n      }\n    }\n  };\n\n  return (\n    <div\n      ref={drop}\n      className={`w-16 h-16 flex justify-center items-center \n        ${isDark ? \"bg-[#9A6553]\" : \"bg-[#D5B793]\"}\n        ${isKingInCheck ? \"bg-red-600 animate-pulse\" : \"\"}\n        ${isSelected ? \"border-4 border-yellow-500\" : \"\"}\n        ${isValidMoveSquare ? \"border-4 border-green-500\" : \"\"}\n        ${isCaptureMove ? \"border-4 border-red-500\" : \"\"}\n      `}\n      onClick={handleClick}\n    >\n      {piece && pieceImages[piece] && (\n        <img\n          ref={drag}\n          src={pieceImages[piece]}\n          alt={piece}\n          className={`w-12 h-12 object-contain ${isDragging ? \"opacity-50\" : \"cursor-pointer\"}`}\n        />\n      )}\n    </div>\n    \n  );\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(true);\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [gameMessage, setGameMessage] = useState(\"\");\n  // ✅ Thêm hàm resetGame ngay tại đây\n  const resetGame = () => {\n    setBoard(initialBoardSetup);\n    setCurrentTurn(true);\n    setIsCheck(false);\n    setIsCheckMate(false);\n    setCheckedKing(null);\n    setSelectedPiece(null);\n    setValidMoves([]);\n    setGameMessage(\"🎭 New Game Started! White's Turn\");\n  };\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    const newBoard = board.map((row) => [...row]);\n    const piece = newBoard[fromRow][fromCol];\n  \n    const validMoves = getValidMoves(piece, fromRow, fromCol, board);\n    if (!validMoves.some((move) => move.row === toRow && move.col === toCol)) {\n      return;\n    }\n  \n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n  \n    setBoard(newBoard);\n    setCurrentTurn(!currentTurn);\n  \n    sendMessage({ type: \"move\", fromRow, fromCol, toRow, toCol });\n  };\n  const movePieceFromServer = (fromRow, fromCol, toRow, toCol) => {\n    setBoard((prevBoard) => {\n      const newBoard = prevBoard.map((row) => [...row]);\n      newBoard[toRow][toCol] = newBoard[fromRow][fromCol];\n      newBoard[fromRow][fromCol] = \"\";\n      return newBoard;\n    });\n  \n    setCurrentTurn((prevTurn) => !prevTurn);\n  };\n  \n\n  useEffect(() => {\n    const kingCheck = isKingInCheck(board, currentTurn);\n    const checkmate = isCheckmate(board, currentTurn);\n    const kingPos = findKingPosition(board, currentTurn);\n  \n    setIsCheck(kingCheck);\n    setIsCheckMate(checkmate);\n    setCheckedKing(kingCheck ? kingPos : null);\n\n    // ✅ Cập nhật thông báo UI\n    if (checkmate) {\n        setGameMessage(`🏆 Checkmate! ${currentTurn ? \"Black\" : \"White\"} Wins!`);\n    } else if (kingCheck) {\n        setGameMessage(`🔥 Warning! ${currentTurn ? \"White\" : \"Black\"} King is in Check! 🔥`);\n    } else {\n        setGameMessage(`🎭 Current Turn: ${currentTurn ? \"White\" : \"Black\"}`);\n    }\n\n}, [board, currentTurn]); // Chạy lại khi bàn cờ hoặc lượt chơi thay đổi\n\n  \n  \n\n\n  const convertToChessNotation = (row, col) => {\n    const files = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n    return `${files[col]}${8 - row}`;\n  };\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"min-h-screen flex flex-col justify-center items-center bg-gray-200\">\n        <h1 className=\"text-2xl font-bold mb-4\">♟️ Chess Game ♟️</h1>\n        {/* 🔥 Thông báo chiếu cố định */}\n        {isCheck && !isCheckMate && (\n          <div className=\"fixed top-5 right-5 bg-red-600 text-white px-4 py-2 rounded-md shadow-lg font-bold animate-pulse\">\n            🔥 Warning! {currentTurn ? \"White\" : \"Black\"} King is in Check! 🔥\n          </div>\n        )}\n        {gameMessage && ( \n          <div className=\"mb-2 bg-yellow-300 text-black px-4 py-2 rounded text-center font-bold shadow-md\">\n            {gameMessage}\n          </div>\n        )}\n        {/* Checkmate Message */}\n        {isCheckMate && (\n          <div className=\"fixed top-0 left-0 w-full h-full flex justify-center items-center bg-black bg-opacity-75\">\n            <div className=\"bg-white p-6 rounded-lg shadow-xl text-center\">\n              <h2 className=\"text-2xl font-bold text-red-600\">🏆 Checkmate! {currentTurn ? \"Black\" : \"White\"} Wins! 🏆</h2>\n              <button \n                onClick={resetGame}\n                className=\"mt-4 px-4 py-2 bg-blue-500 text-white font-bold rounded hover:bg-blue-600\"\n              >\n                Play Again\n              </button>\n            </div>\n          </div>\n        )}\n        \n        <div className=\"grid grid-cols-8 border-4 border-black shadow-lg\">\n          {board.map((row, rowIndex) =>\n            row.map((piece, colIndex) => (\n              <Square\n                key={`${rowIndex}-${colIndex}`}\n                piece={piece}\n                row={rowIndex}\n                col={colIndex}\n                movePiece={movePiece}\n                isKingInCheck={checkedKing?.row === rowIndex && checkedKing?.col === colIndex}\n                selectedPiece={selectedPiece}\n                setSelectedPiece={setSelectedPiece}\n                currentTurn={currentTurn}\n                board={board}\n                validMoves={selectedPiece ? getValidMoves(selectedPiece.piece, selectedPiece.row, selectedPiece.col, board) : []}\n              />\n            ))\n          )}\n        </div>\n      </div>\n    </DndProvider>\n  );\n};\nconst handleMove = (fromRow, fromCol, toRow, toCol) => {\n  const newBoard = JSON.parse(JSON.stringify(board)); // Sao chép bàn cờ\n  const movingPiece = newBoard[fromRow][fromCol];\n\n  if (!isValidMove(movingPiece, fromRow, fromCol, toRow, toCol, board)) {\n      console.log(\"❌ Nước đi không hợp lệ\");\n      return;\n  }\n\n  // Thực hiện nước đi\n  newBoard[toRow][toCol] = movingPiece;\n  newBoard[fromRow][fromCol] = \"\";\n\n  setBoard(newBoard);\n  setIsWhiteTurn(!isWhiteTurn); // Đổi lượt chơi\n\n  // Kiểm tra chiếu & chiếu hết\n  if (isKingInCheck(newBoard, !isWhiteTurn)) {\n      console.log(`⚠️ Vua đang bị chiếu`);\n      setGameMessage(`⚠️ King is in check!`);\n\n      if (isCheckmate(newBoard, !isWhiteTurn)) {\n          console.log(`🏆 Chiếu hết! Trò chơi kết thúc.`);\n          setGameMessage(`🏆 Checkmate! ${isWhiteTurn ? \"White\" : \"Black\"} wins!`);\n          setGameOver(true);\n      }\n  } else {\n      setGameMessage(\"\");\n  }\n};\n\n\nexport default Chessboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}