{"ast":null,"code":"let currentTurn = true; // true là Trắng, false là Đen\n\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n\n  // Kiểm tra màu quân cờ\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  switch (piece) {\n    case \"♙\":\n    case \"♟\":\n      // Tốt\n      validMoves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\":\n    case \"♜\":\n      // Xe\n      validMoves = getRookMoves(row, col, board, isWhite);\n      break;\n    case \"♘\":\n    case \"♞\":\n      // Mã\n      validMoves = getKnightMoves(row, col, board, isWhite);\n      break;\n    case \"♗\":\n    case \"♝\":\n      // Tượng\n      validMoves = getBishopMoves(row, col, board, isWhite);\n      break;\n    case \"♕\":\n    case \"♛\":\n      // Hậu\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\n      break;\n    case \"♔\":\n    case \"♚\":\n      // Vua\n      validMoves = getKingMoves(row, col, board, isWhite);\n      break;\n    default:\n      break;\n  }\n  return validMoves;\n};\n// ⚡ Hàm xử lý phong cấp quân Tốt\nconst promotePawn = (row, col, board, isWhite) => {\n  return new Promise(resolve => {\n    // Hiển thị hộp thoại chọn quân cờ\n    const promotedPiece = window.prompt(\"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\", \"Q\");\n    let newPiece;\n    switch (promotedPiece === null || promotedPiece === void 0 ? void 0 : promotedPiece.toUpperCase()) {\n      case \"R\":\n        newPiece = isWhite ? \"♖\" : \"♜\";\n        break;\n      case \"B\":\n        newPiece = isWhite ? \"♗\" : \"♝\";\n        break;\n      case \"N\":\n        newPiece = isWhite ? \"♘\" : \"♞\";\n        break;\n      default:\n        newPiece = isWhite ? \"♕\" : \"♛\";\n      // Mặc định là Hậu\n    }\n    board[row][col] = newPiece;\n    resolve();\n  });\n};\n\n// ✅ Xác minh nước đi có hợp lệ không\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const validMoves = getValidMoves(piece, fromRow, fromCol, board);\n  return validMoves.some(move => move.row === toRow && move.col === toCol);\n};\n\n// ✅ Xử lý di chuyển Tốt (Pawn)\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n\n  // ✅ Kiểm tra nếu nước đi nằm trong giới hạn bàn cờ\n  if (row + direction >= 0 && row + direction < 8) {\n    if (!board[row + direction][col]) {\n      moves.push({\n        row: row + direction,\n        col\n      });\n\n      // ✅ Kiểm tra nhảy 2 ô từ vị trí ban đầu (chỉ khi không bị cản trở)\n      if (row === startRow && row + 2 * direction >= 0 && row + 2 * direction < 8) {\n        if (!board[row + 2 * direction][col]) {\n          moves.push({\n            row: row + 2 * direction,\n            col\n          });\n        }\n      }\n    }\n\n    // ✅ Kiểm tra ăn quân chéo (chỉ nếu trong giới hạn bàn cờ)\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col - 1\n      });\n    }\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col + 1\n      });\n    }\n  }\n  return moves;\n};\n\n// ✅ Xử lý di chuyển Xe (Rook)\nconst getRookMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\n// ✅ Xử lý di chuyển Tượng (Bishop)\nconst getBishopMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\n// ✅ Xử lý di chuyển Mã (Knight)\nconst getKnightMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n  knightMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý di chuyển Vua (King)\nconst getKingMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n  kingMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý nước đi theo đường thẳng\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\n  let moves = [];\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      } else {\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n          moves.push({\n            row: newRow,\n            col: newCol\n          });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n  return moves;\n};\n\n// ✅ Xuất tất cả các hàm cần thiết","map":{"version":3,"names":["currentTurn","getValidMoves","piece","row","col","board","validMoves","isWhite","includes","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","promotePawn","Promise","resolve","promotedPiece","window","prompt","newPiece","toUpperCase","isValidMove","fromRow","fromCol","toRow","toCol","some","move","moves","direction","startRow","push","getLinearMoves","knightMoves","forEach","dx","dy","newRow","newCol","target","kingMoves","directions"],"sources":["/root/se06206-final-thaydong-nhom1/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["let currentTurn = true; // true là Trắng, false là Đen\n\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n\n  // Kiểm tra màu quân cờ\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n\n  switch (piece) {\n    case \"♙\": case \"♟\": // Tốt\n      validMoves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\": case \"♜\": // Xe\n      validMoves = getRookMoves(row, col, board, isWhite);\n      break;\n    case \"♘\": case \"♞\": // Mã\n      validMoves = getKnightMoves(row, col, board, isWhite);\n      break;\n    case \"♗\": case \"♝\": // Tượng\n      validMoves = getBishopMoves(row, col, board, isWhite);\n      break;\n    case \"♕\": case \"♛\": // Hậu\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\n      break;\n    case \"♔\": case \"♚\": // Vua\n      validMoves = getKingMoves(row, col, board, isWhite);\n      break;\n    default:\n      break;\n  }\n\n  return validMoves;\n};\n// ⚡ Hàm xử lý phong cấp quân Tốt\nconst promotePawn = (row, col, board, isWhite) => {\n  return new Promise((resolve) => {\n    // Hiển thị hộp thoại chọn quân cờ\n    const promotedPiece = window.prompt(\n      \"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\",\n      \"Q\"\n    );\n\n    let newPiece;\n    switch (promotedPiece?.toUpperCase()) {\n      case \"R\":\n        newPiece = isWhite ? \"♖\" : \"♜\";\n        break;\n      case \"B\":\n        newPiece = isWhite ? \"♗\" : \"♝\";\n        break;\n      case \"N\":\n        newPiece = isWhite ? \"♘\" : \"♞\";\n        break;\n      default:\n        newPiece = isWhite ? \"♕\" : \"♛\"; // Mặc định là Hậu\n    }\n\n    board[row][col] = newPiece;\n    resolve();\n  });\n};\n\n// ✅ Xác minh nước đi có hợp lệ không\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const validMoves = getValidMoves(piece, fromRow, fromCol, board);\n  return validMoves.some(move => move.row === toRow && move.col === toCol);\n};\n\n// ✅ Xử lý di chuyển Tốt (Pawn)\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n\n  // ✅ Kiểm tra nếu nước đi nằm trong giới hạn bàn cờ\n  if (row + direction >= 0 && row + direction < 8) {\n    if (!board[row + direction][col]) {\n      moves.push({ row: row + direction, col });\n\n      // ✅ Kiểm tra nhảy 2 ô từ vị trí ban đầu (chỉ khi không bị cản trở)\n      if (row === startRow && row + 2 * direction >= 0 && row + 2 * direction < 8) {\n        if (!board[row + 2 * direction][col]) {\n          moves.push({ row: row + 2 * direction, col });\n        }\n      }\n    }\n\n    // ✅ Kiểm tra ăn quân chéo (chỉ nếu trong giới hạn bàn cờ)\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\n      moves.push({ row: row + direction, col: col - 1 });\n    }\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\n      moves.push({ row: row + direction, col: col + 1 });\n    }\n  }\n\n  return moves;\n};\n\n\n// ✅ Xử lý di chuyển Xe (Rook)\nconst getRookMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\n// ✅ Xử lý di chuyển Tượng (Bishop)\nconst getBishopMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\n// ✅ Xử lý di chuyển Mã (Knight)\nconst getKnightMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n\n  knightMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({ row: newRow, col: newCol });\n      }\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xử lý di chuyển Vua (King)\nconst getKingMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n\n  kingMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({ row: newRow, col: newCol });\n      }\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xử lý nước đi theo đường thẳng\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\n  let moves = [];\n\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target) {\n        moves.push({ row: newRow, col: newCol });\n      } else {\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n          moves.push({ row: newRow, col: newCol });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xuất tất cả các hàm cần thiết\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}