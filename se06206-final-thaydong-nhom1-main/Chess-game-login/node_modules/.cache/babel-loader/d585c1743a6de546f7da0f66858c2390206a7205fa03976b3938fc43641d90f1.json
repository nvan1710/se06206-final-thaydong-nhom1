{"ast":null,"code":"import { getValidMoves } from \"./moveRules\"; // Change isValidMove to getValidMoves\n// Import lu·∫≠t di chuy·ªÉn\n\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\nexport const findKingPosition = (board, isWhite) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\nexport const isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\n\n  const {\n    row: kingRow,\n    col: kingCol\n  } = kingPos;\n  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingRow}, ${kingCol})`);\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\n\n      const isEnemy = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôö\".includes(piece) !== isWhite; // N·∫øu qu√¢n c·ªù l√† c·ªßa ƒë·ªëi th·ªß\n      if (isEnemy) {\n        const possibleMoves = getValidMoves(piece, row, col, board); // ‚úÖ Use getValidMoves\n        if (possibleMoves.some(move => move.row === kingRow && move.col === kingCol)) {\n          console.log(`‚ö†Ô∏è Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·ª´ (${row}, ${col})`);\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\nexport const isCheckmate = (board, isWhite) => {\n  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt.\n\n  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n      const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\n      if (!isFriendly) continue;\n      const possibleMoves = getValidMoves(piece, row, col, board); // ‚úÖ Use getValidMoves\n\n      for (const move of possibleMoves) {\n        const newRow = move.row;\n        const newCol = move.col;\n\n        // Sao ch√©p b√†n c·ªù ƒë√∫ng c√°ch\n        const newBoard = board.map(innerRow => [...innerRow]);\n        newBoard[newRow][newCol] = piece;\n        newBoard[row][col] = \"\";\n        if (!isKingInCheck(newBoard, isWhite)) {\n          console.log(`‚úÖ T√¨m th·∫•y m·ªôt n∆∞·ªõc tho√°t t·∫°i (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\n          return false; // N·∫øu c√≥ n∆∞·ªõc ƒëi tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\n        }\n      }\n    }\n  }\n  console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\n  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\n};","map":{"version":3,"names":["getValidMoves","findKingPosition","board","isWhite","row","col","isKingInCheck","kingPos","kingRow","kingCol","console","log","piece","isEnemy","includes","possibleMoves","some","move","isCheckmate","isFriendly","newRow","newCol","newBoard","map","innerRow"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/checkmate.js"],"sourcesContent":["import { getValidMoves } from \"./moveRules\"; // Change isValidMove to getValidMoves\r\n // Import lu·∫≠t di chuy·ªÉn\r\n\r\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\r\nexport const findKingPosition = (board, isWhite) => {\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\r\n        return { row, col };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\r\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\r\nexport const isKingInCheck = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\r\n\r\n  const { row: kingRow, col: kingCol } = kingPos;\r\n\r\n  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingRow}, ${kingCol})`);\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n          const piece = board[row][col];\r\n          if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\r\n\r\n          const isEnemy = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôö\".includes(piece) !== isWhite; // N·∫øu qu√¢n c·ªù l√† c·ªßa ƒë·ªëi th·ªß\r\n          if (isEnemy) {\r\n              const possibleMoves = getValidMoves(piece, row, col, board); // ‚úÖ Use getValidMoves\r\n              if (possibleMoves.some(move => move.row === kingRow && move.col === kingCol)) {\r\n                  console.log(`‚ö†Ô∏è Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·ª´ (${row}, ${col})`);\r\n                  return true;\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n  \r\n  \r\n\r\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\r\nexport const isCheckmate = (board, isWhite) => {\r\n  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt.\r\n\r\n  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n          const piece = board[row][col];\r\n          if (!piece) continue;\r\n\r\n          const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\r\n          if (!isFriendly) continue;\r\n\r\n          const possibleMoves = getValidMoves(piece, row, col, board); // ‚úÖ Use getValidMoves\r\n\r\n          for (const move of possibleMoves) {\r\n              const newRow = move.row;\r\n              const newCol = move.col;\r\n\r\n              // Sao ch√©p b√†n c·ªù ƒë√∫ng c√°ch\r\n              const newBoard = board.map(innerRow => [...innerRow]);\r\n              newBoard[newRow][newCol] = piece;\r\n              newBoard[row][col] = \"\";\r\n\r\n              if (!isKingInCheck(newBoard, isWhite)) {\r\n                  console.log(`‚úÖ T√¨m th·∫•y m·ªôt n∆∞·ªõc tho√°t t·∫°i (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\r\n                  return false; // N·∫øu c√≥ n∆∞·ªõc ƒëi tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\r\n              }\r\n          }\r\n      }\r\n  }\r\nconsole.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\r\n  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}