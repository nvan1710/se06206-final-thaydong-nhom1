{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== isWhiteTurn) return false;\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && isWhite === \"♙♖♘♗♕♔\".includes(targetPiece)) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(dx, dy);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(dx, dy);\n    default:\n      return false;\n  }\n};\n\n// Kiểm tra nếu vua bị ăn\nconst checkGameOver = board => {\n  let whiteKingExists = false;\n  let blackKingExists = false;\n  for (let row of board) {\n    for (let piece of row) {\n      if (piece === \"♔\") whiteKingExists = true;\n      if (piece === \"♚\") blackKingExists = true;\n    }\n  }\n  if (!whiteKingExists) return \"Black wins!\";\n  if (!blackKingExists) return \"White wins!\";\n  return null;\n};\n\n// Export tất cả các hàm\nexport { checkGameOver };","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","isWhiteTurn","dx","dy","isWhite","includes","targetPiece","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","checkGameOver","whiteKingExists","blackKingExists","row"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, isWhiteTurn) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== isWhiteTurn) return false;\n\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && (isWhite === \"♙♖♘♗♕♔\".includes(targetPiece))) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(dx, dy);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(dx, dy);\n    default: return false;\n  }\n};\n\n// Kiểm tra nếu vua bị ăn\nconst checkGameOver = (board) => {\n  let whiteKingExists = false;\n  let blackKingExists = false;\n\n  for (let row of board) {\n    for (let piece of row) {\n      if (piece === \"♔\") whiteKingExists = true;\n      if (piece === \"♚\") blackKingExists = true;\n    }\n  }\n\n  if (!whiteKingExists) return \"Black wins!\";\n  if (!blackKingExists) return \"White wins!\";\n  return null;\n};\n\n// Export tất cả các hàm\nexport { checkGameOver };\n"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAGA,CAACC,KAAK,EAAEC,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAEC,WAAW,KAAK;EACxF,MAAMC,EAAE,GAAGH,KAAK,GAAGF,OAAO;EAC1B,MAAMM,EAAE,GAAGL,KAAK,GAAGF,OAAO;EAE1B,IAAIA,OAAO,KAAKE,KAAK,IAAID,OAAO,KAAKE,KAAK,EAAE,OAAO,KAAK;EAExD,MAAMK,OAAO,GAAG,QAAQ,CAACC,QAAQ,CAACV,KAAK,CAAC;EACxC,IAAIS,OAAO,KAAKH,WAAW,EAAE,OAAO,KAAK;EAEzC,MAAMK,WAAW,GAAGN,KAAK,CAACF,KAAK,CAAC,CAACC,KAAK,CAAC;EACvC,IAAIO,WAAW,IAAKF,OAAO,KAAK,QAAQ,CAACC,QAAQ,CAACC,WAAW,CAAE,EAAE,OAAO,KAAK;EAE7E,QAAQX,KAAK;IACX,KAAK,GAAG;MAAE,OAAOY,eAAe,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE,IAAI,CAAC;IAC7E,KAAK,GAAG;MAAE,OAAOO,eAAe,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE,KAAK,CAAC;IAC9E,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOQ,eAAe,CAACZ,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IACjF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOS,iBAAiB,CAACP,EAAE,EAAEC,EAAE,CAAC;IACpD,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOO,iBAAiB,CAACd,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IACnF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOW,gBAAgB,CAACf,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;IAClF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE,OAAOY,eAAe,CAACV,EAAE,EAAEC,EAAE,CAAC;IAClD;MAAS,OAAO,KAAK;EACvB;AACF,CAAC;;AAED;AACA,MAAMU,aAAa,GAAIb,KAAK,IAAK;EAC/B,IAAIc,eAAe,GAAG,KAAK;EAC3B,IAAIC,eAAe,GAAG,KAAK;EAE3B,KAAK,IAAIC,GAAG,IAAIhB,KAAK,EAAE;IACrB,KAAK,IAAIL,KAAK,IAAIqB,GAAG,EAAE;MACrB,IAAIrB,KAAK,KAAK,GAAG,EAAEmB,eAAe,GAAG,IAAI;MACzC,IAAInB,KAAK,KAAK,GAAG,EAAEoB,eAAe,GAAG,IAAI;IAC3C;EACF;EAEA,IAAI,CAACD,eAAe,EAAE,OAAO,aAAa;EAC1C,IAAI,CAACC,eAAe,EAAE,OAAO,aAAa;EAC1C,OAAO,IAAI;AACb,CAAC;;AAED;AACA,SAASF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}