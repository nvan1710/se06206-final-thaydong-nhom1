{"ast":null,"code":"let currentTurn = true; // true là Trắng, false là Đen\n\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n\n  // Kiểm tra màu quân cờ\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  switch (piece) {\n    case \"♙\":\n    case \"♟\":\n      // Tốt\n      validMoves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\":\n    case \"♜\":\n      // Xe\n      validMoves = getRookMoves(row, col, board, isWhite);\n      break;\n    case \"♘\":\n    case \"♞\":\n      // Mã\n      validMoves = getKnightMoves(row, col, board, isWhite);\n      break;\n    case \"♗\":\n    case \"♝\":\n      // Tượng\n      validMoves = getBishopMoves(row, col, board, isWhite);\n      break;\n    case \"♕\":\n    case \"♛\":\n      // Hậu\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\n      break;\n    case \"♔\":\n    case \"♚\":\n      // Vua\n      validMoves = getKingMoves(row, col, board, isWhite);\n      break;\n    default:\n      const moves = [];\n      const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n      const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\n\n      switch (piece) {\n        case \"♙\": // Tốt trắng\n        case \"♟\":\n          // Tốt đen\n          if (!board[row + direction][col]) {\n            moves.push({\n              row: row + direction,\n              col\n            });\n            if (isWhite && row === 6 || !isWhite && row === 1) {\n              if (!board[row + 2 * direction][col]) {\n                moves.push({\n                  row: row + 2 * direction,\n                  col\n                });\n              }\n            }\n          }\n          if (col > 0 && board[row + direction][col - 1] && isOpponent(piece, board[row + direction][col - 1])) {\n            moves.push({\n              row: row + direction,\n              col: col - 1\n            });\n          }\n          if (col < 7 && board[row + direction][col + 1] && isOpponent(piece, board[row + direction][col + 1])) {\n            moves.push({\n              row: row + direction,\n              col: col + 1\n            });\n          }\n          break;\n        case \"♖\":\n        case \"♜\":\n          // Xe\n          moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1]]));\n          break;\n        case \"♘\":\n        case \"♞\":\n          // Mã\n          moves.push(...getKnightMoves(row, col, board));\n          break;\n        case \"♗\":\n        case \"♝\":\n          // Tượng\n          moves.push(...getLinearMoves(row, col, board, [[-1, -1], [-1, 1], [1, -1], [1, 1]]));\n          break;\n        case \"♕\":\n        case \"♛\":\n          // Hậu\n          moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]]));\n          break;\n        case \"♔\":\n        case \"♚\":\n          // Vua\n          moves.push(...getKingMoves(row, col, board));\n          break;\n      }\n      return moves;\n  }\n  ;\n\n  // ✅ Xác minh nước đi có hợp lệ không\n  // Kiểm tra xem có phải quân địch không\n  const isOpponent = (piece, targetPiece) => {\n    return targetPiece && \"♙♖♘♗♕♔\".includes(piece) !== \"♙♖♘♗♕♔\".includes(targetPiece);\n  };\n\n  // Lấy nước đi tuyến tính (dùng cho Xe, Tượng, Hậu)\n  const getLinearMoves = (row, col, board, directions) => {\n    const moves = [];\n    directions.forEach(([dr, dc]) => {\n      let r = row + dr,\n        c = col + dc;\n      while (r >= 0 && r < 8 && c >= 0 && c < 8) {\n        if (!board[r][c]) {\n          moves.push({\n            row: r,\n            col: c\n          });\n        } else {\n          if (isOpponent(board[row][col], board[r][c])) {\n            moves.push({\n              row: r,\n              col: c\n            });\n          }\n          break;\n        }\n        r += dr;\n        c += dc;\n      }\n    });\n    return moves;\n  };\n\n  // Lấy nước đi của Mã\n  const getKnightMoves = (row, col, board) => {\n    const moves = [];\n    const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n    knightMoves.forEach(([dr, dc]) => {\n      const r = row + dr,\n        c = col + dc;\n      if (r >= 0 && r < 8 && c >= 0 && c < 8) {\n        if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\n          moves.push({\n            row: r,\n            col: c\n          });\n        }\n      }\n    });\n    return moves;\n  };\n\n  // Lấy nước đi của Vua\n  const getKingMoves = (row, col, board) => {\n    const moves = [];\n    const kingMoves = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n    kingMoves.forEach(([dr, dc]) => {\n      const r = row + dr,\n        c = col + dc;\n      if (r >= 0 && r < 8 && c >= 0 && c < 8) {\n        if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\n          moves.push({\n            row: r,\n            col: c\n          });\n        }\n      }\n    });\n    return moves;\n  };\n};\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const validMoves = getValidMoves(piece, fromRow, fromCol, board);\n  return validMoves.some(move => move.row === toRow && move.col === toCol);\n};\n\n// ✅ Xử lý di chuyển Tốt (Pawn) + Phong cấp\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const endRow = isWhite ? 0 : 7;\n\n  // Tiến lên một ô (nếu trống)\n  if (row + direction >= 0 && row + direction < 8) {\n    if (!board[row + direction][col]) {\n      moves.push({\n        row: row + direction,\n        col,\n        promote: row + direction === endRow\n      });\n\n      // Nếu là nước đi đầu tiên của tốt, có thể đi hai ô\n      if (row === startRow && !board[row + 2 * direction][col]) {\n        moves.push({\n          row: row + 2 * direction,\n          col\n        });\n      }\n    }\n\n    // Ăn chéo (bắt quân đối thủ)\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col - 1,\n        promote: row + direction === endRow\n      });\n    }\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col + 1,\n        promote: row + direction === endRow\n      });\n    }\n  }\n  return moves;\n};\nexport const promotePawn = async (row, col, board, isWhite) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const promotedPiece = window.prompt(\"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\", \"Q\");\n      let newPiece;\n      switch (promotedPiece === null || promotedPiece === void 0 ? void 0 : promotedPiece.toUpperCase()) {\n        case \"R\":\n          newPiece = isWhite ? \"♖\" : \"♜\";\n          break;\n        case \"B\":\n          newPiece = isWhite ? \"♗\" : \"♝\";\n          break;\n        case \"N\":\n          newPiece = isWhite ? \"♘\" : \"♞\";\n          break;\n        default:\n          newPiece = isWhite ? \"♕\" : \"♛\";\n        // Mặc định là Hậu\n      }\n      board[row][col] = newPiece; // Cập nhật bàn cờ\n      resolve();\n    }, 100); // Chờ một chút để tránh lỗi UI\n  });\n};\n\n// ✅ Xử lý di chuyển Xe (Rook)\nconst getRookMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\n// ✅ Xử lý di chuyển Tượng (Bishop)\nconst getBishopMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\n// ✅ Xử lý di chuyển Mã (Knight)\nconst getKnightMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n  knightMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý di chuyển Vua (King)\nconst getKingMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n  kingMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý nước đi theo đường thẳng\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\n  let moves = [];\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      } else {\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n          moves.push({\n            row: newRow,\n            col: newCol\n          });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n  return moves;\n};\n\n// ✅ Xuất tất cả các hàm cần thiết\nexport { getPawnMoves, getRookMoves, getBishopMoves, getKnightMoves, getKingMoves, getLinearMoves };","map":{"version":3,"names":["currentTurn","getValidMoves","piece","row","col","board","validMoves","isWhite","includes","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","moves","direction","push","isOpponent","getLinearMoves","targetPiece","directions","forEach","dr","dc","r","c","knightMoves","kingMoves","isValidMove","fromRow","fromCol","toRow","toCol","some","move","startRow","endRow","promote","promotePawn","Promise","resolve","setTimeout","promotedPiece","window","prompt","newPiece","toUpperCase","dx","dy","newRow","newCol","target"],"sources":["C:/Users/admin/se06206-final-thaydong-nhom1/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["let currentTurn = true; // true là Trắng, false là Đen\r\n\r\nexport const getValidMoves = (piece, row, col, board) => {\r\n  let validMoves = [];\r\n\r\n  // Kiểm tra màu quân cờ\r\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\r\n\r\n  switch (piece) {\r\n    case \"♙\": case \"♟\": // Tốt\r\n      validMoves = getPawnMoves(row, col, board, isWhite);\r\n      break;\r\n    case \"♖\": case \"♜\": // Xe\r\n      validMoves = getRookMoves(row, col, board, isWhite);\r\n      break;\r\n    case \"♘\": case \"♞\": // Mã\r\n      validMoves = getKnightMoves(row, col, board, isWhite);\r\n      break;\r\n    case \"♗\": case \"♝\": // Tượng\r\n      validMoves = getBishopMoves(row, col, board, isWhite);\r\n      break;\r\n    case \"♕\": case \"♛\": // Hậu\r\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\r\n      break;\r\n    case \"♔\": case \"♚\": // Vua\r\n      validMoves = getKingMoves(row, col, board, isWhite);\r\n      break;\r\n    default:\r\n\r\n  const moves = [];\r\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\r\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\r\n\r\n  switch (piece) {\r\n    case \"♙\": // Tốt trắng\r\n    case \"♟\": // Tốt đen\r\n      if (!board[row + direction][col]) {\r\n        moves.push({ row: row + direction, col });\r\n        if ((isWhite && row === 6) || (!isWhite && row === 1)) {\r\n          if (!board[row + 2 * direction][col]) {\r\n            moves.push({ row: row + 2 * direction, col });\r\n          }\r\n        }\r\n      }\r\n      if (col > 0 && board[row + direction][col - 1] && isOpponent(piece, board[row + direction][col - 1])) {\r\n        moves.push({ row: row + direction, col: col - 1 });\r\n      }\r\n      if (col < 7 && board[row + direction][col + 1] && isOpponent(piece, board[row + direction][col + 1])) {\r\n        moves.push({ row: row + direction, col: col + 1 });\r\n      }\r\n      break;\r\n\r\n    case \"♖\": case \"♜\": // Xe\r\n      moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1]]));\r\n      break;\r\n\r\n    case \"♘\": case \"♞\": // Mã\r\n      moves.push(...getKnightMoves(row, col, board));\r\n      break;\r\n\r\n    case \"♗\": case \"♝\": // Tượng\r\n      moves.push(...getLinearMoves(row, col, board, [[-1, -1], [-1, 1], [1, -1], [1, 1]]));\r\n      break;\r\n\r\n    case \"♕\": case \"♛\": // Hậu\r\n      moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]]));\r\n      break;\r\n\r\n    case \"♔\": case \"♚\": // Vua\r\n      moves.push(...getKingMoves(row, col, board));\r\n\r\n      break;\r\n  }\r\n\r\n  return moves;\r\n};\r\n\r\n\r\n// ✅ Xác minh nước đi có hợp lệ không\r\n// Kiểm tra xem có phải quân địch không\r\nconst isOpponent = (piece, targetPiece) => {\r\n  return targetPiece && (\"♙♖♘♗♕♔\".includes(piece) !== \"♙♖♘♗♕♔\".includes(targetPiece));\r\n};\r\n\r\n// Lấy nước đi tuyến tính (dùng cho Xe, Tượng, Hậu)\r\nconst getLinearMoves = (row, col, board, directions) => {\r\n  const moves = [];\r\n  directions.forEach(([dr, dc]) => {\r\n    let r = row + dr, c = col + dc;\r\n    while (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      if (!board[r][c]) {\r\n        moves.push({ row: r, col: c });\r\n      } else {\r\n        if (isOpponent(board[row][col], board[r][c])) {\r\n          moves.push({ row: r, col: c });\r\n        }\r\n        break;\r\n      }\r\n      r += dr;\r\n      c += dc;\r\n    }\r\n  });\r\n  return moves;\r\n};\r\n\r\n// Lấy nước đi của Mã\r\nconst getKnightMoves = (row, col, board) => {\r\n  const moves = [];\r\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\r\n  knightMoves.forEach(([dr, dc]) => {\r\n    const r = row + dr, c = col + dc;\r\n    if (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\r\n        moves.push({ row: r, col: c });\r\n      }\r\n    }\r\n  });\r\n  return moves;\r\n};\r\n\r\n// Lấy nước đi của Vua\r\nconst getKingMoves = (row, col, board) => {\r\n  const moves = [];\r\n  const kingMoves = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\r\n  kingMoves.forEach(([dr, dc]) => {\r\n    const r = row + dr, c = col + dc;\r\n    if (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\r\n        moves.push({ row: r, col: c });\r\n      }\r\n    }\r\n  });\r\n  return moves;\r\n};\r\n}\r\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\r\n  const validMoves = getValidMoves(piece, fromRow, fromCol, board);\r\n  return validMoves.some(move => move.row === toRow && move.col === toCol);\r\n};\r\n\r\n// ✅ Xử lý di chuyển Tốt (Pawn) + Phong cấp\r\nconst getPawnMoves = (row, col, board, isWhite) => {\r\n  let moves = [];\r\n  const direction = isWhite ? -1 : 1;\r\n  const startRow = isWhite ? 6 : 1;\r\n  const endRow = isWhite ? 0 : 7;\r\n\r\n  // Tiến lên một ô (nếu trống)\r\n  if (row + direction >= 0 && row + direction < 8) {\r\n    if (!board[row + direction][col]) {\r\n      moves.push({ row: row + direction, col, promote: row + direction === endRow });\r\n\r\n      // Nếu là nước đi đầu tiên của tốt, có thể đi hai ô\r\n      if (row === startRow && !board[row + 2 * direction][col]) {\r\n        moves.push({ row: row + 2 * direction, col });\r\n      }\r\n    }\r\n\r\n    // Ăn chéo (bắt quân đối thủ)\r\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\r\n      moves.push({ row: row + direction, col: col - 1, promote: row + direction === endRow });\r\n    }\r\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\r\n      moves.push({ row: row + direction, col: col + 1, promote: row + direction === endRow });\r\n    }\r\n  }\r\n  return moves;\r\n};\r\n\r\nexport const promotePawn = async (row, col, board, isWhite) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      const promotedPiece = window.prompt(\r\n        \"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\",\r\n        \"Q\"\r\n      );\r\n\r\n      let newPiece;\r\n      switch (promotedPiece?.toUpperCase()) {\r\n        case \"R\": newPiece = isWhite ? \"♖\" : \"♜\"; break;\r\n        case \"B\": newPiece = isWhite ? \"♗\" : \"♝\"; break;\r\n        case \"N\": newPiece = isWhite ? \"♘\" : \"♞\"; break;\r\n        default: newPiece = isWhite ? \"♕\" : \"♛\"; // Mặc định là Hậu\r\n      }\r\n\r\n      board[row][col] = newPiece; // Cập nhật bàn cờ\r\n      resolve();\r\n    }, 100); // Chờ một chút để tránh lỗi UI\r\n  });\r\n};\r\n\r\n\r\n\r\n// ✅ Xử lý di chuyển Xe (Rook)\r\nconst getRookMoves = (row, col, board, isWhite) => {\r\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\r\n};\r\n\r\n// ✅ Xử lý di chuyển Tượng (Bishop)\r\nconst getBishopMoves = (row, col, board, isWhite) => {\r\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\r\n};\r\n\r\n// ✅ Xử lý di chuyển Mã (Knight)\r\nconst getKnightMoves = (row, col, board, isWhite) => {\r\n  let moves = [];\r\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\r\n\r\n  knightMoves.forEach(([dx, dy]) => {\r\n    let newRow = row + dx, newCol = col + dy;\r\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n      let target = board[newRow][newCol];\r\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\r\n        moves.push({ row: newRow, col: newCol });\r\n      }\r\n    }\r\n  });\r\n\r\n  return moves;\r\n};\r\n\r\n// ✅ Xử lý di chuyển Vua (King)\r\nconst getKingMoves = (row, col, board, isWhite) => {\r\n  let moves = [];\r\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\r\n\r\n  kingMoves.forEach(([dx, dy]) => {\r\n    let newRow = row + dx, newCol = col + dy;\r\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n      let target = board[newRow][newCol];\r\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\r\n        moves.push({ row: newRow, col: newCol });\r\n      }\r\n    }\r\n  });\r\n\r\n  return moves;\r\n};\r\n\r\n// ✅ Xử lý nước đi theo đường thẳng\r\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\r\n  let moves = [];\r\n\r\n  directions.forEach(([dx, dy]) => {\r\n    let newRow = row + dx, newCol = col + dy;\r\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n      let target = board[newRow][newCol];\r\n      if (!target) {\r\n        moves.push({ row: newRow, col: newCol });\r\n      } else {\r\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\r\n          moves.push({ row: newRow, col: newCol });\r\n        }\r\n        break;\r\n      }\r\n      newRow += dx;\r\n      newCol += dy;\r\n    }\r\n  });\r\n\r\n  return moves;\r\n};\r\n\r\n\r\n// ✅ Xuất tất cả các hàm cần thiết\r\nexport { getPawnMoves, getRookMoves, getBishopMoves, getKnightMoves, getKingMoves, getLinearMoves };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}