{"ast":null,"code":"let currentTurn = true; // true = Trắng, false = Đen\n\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n\n  // Kiểm tra nếu là quân của người chơi hiện tại\n  if (isWhite !== currentTurn) return validMoves;\n  switch (piece) {\n    case \"♙\":\n    case \"♟\":\n      validMoves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\":\n    case \"♜\":\n      validMoves = getRookMoves(row, col, board, isWhite);\n      break;\n    case \"♘\":\n    case \"♞\":\n      validMoves = getKnightMoves(row, col, board, isWhite);\n      break;\n    case \"♗\":\n    case \"♝\":\n      validMoves = getBishopMoves(row, col, board, isWhite);\n      break;\n    case \"♕\":\n    case \"♛\":\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\n      break;\n    case \"♔\":\n    case \"♚\":\n      validMoves = getKingMoves(row, col, board, isWhite);\n      break;\n    default:\n      break;\n  }\n  return validMoves;\n};\n\n// ✅ Xử lý di chuyển Tốt (Pawn) + Phong cấp\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const endRow = isWhite ? 0 : 7;\n  if (row + direction >= 0 && row + direction < 8) {\n    if (!board[row + direction][col]) {\n      moves.push({\n        row: row + direction,\n        col\n      });\n      if (row === startRow && !board[row + 2 * direction][col]) {\n        moves.push({\n          row: row + 2 * direction,\n          col\n        });\n      }\n    }\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col - 1\n      });\n    }\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\n      moves.push({\n        row: row + direction,\n        col: col + 1\n      });\n    }\n  }\n  return moves;\n};\n\n// ✅ Xử lý Xe (Rook)\nconst getRookMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\n// ✅ Xử lý Tượng (Bishop)\nconst getBishopMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\n// ✅ Xử lý Mã (Knight)\nconst getKnightMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n  knightMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý Vua (King)\nconst getKingMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n  kingMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý nước đi theo đường thẳng (Xe, Hậu, Tượng)\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\n  let moves = [];\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx,\n      newCol = col + dy;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      } else {\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n          moves.push({\n            row: newRow,\n            col: newCol\n          });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n  return moves;\n};\n\n// ✅ Xử lý phong cấp quân Tốt\nconst promotePawn = async (row, col, board, isWhite) => {\n  return new Promise(resolve => {\n    const promotedPiece = window.prompt(\"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\", \"Q\");\n    let newPiece;\n    switch (promotedPiece === null || promotedPiece === void 0 ? void 0 : promotedPiece.toUpperCase()) {\n      case \"R\":\n        newPiece = isWhite ? \"♖\" : \"♜\";\n        break;\n      case \"B\":\n        newPiece = isWhite ? \"♗\" : \"♝\";\n        break;\n      case \"N\":\n        newPiece = isWhite ? \"♘\" : \"♞\";\n        break;\n      default:\n        newPiece = isWhite ? \"♕\" : \"♛\";\n      // Mặc định là Hậu\n    }\n    board[row][col] = newPiece;\n    resolve();\n  });\n};\n\n// ✅ Xuất tất cả các hàm cần thiết","map":{"version":3,"names":["currentTurn","getValidMoves","piece","row","col","board","validMoves","isWhite","includes","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","moves","direction","startRow","endRow","push","getLinearMoves","knightMoves","forEach","dx","dy","newRow","newCol","target","kingMoves","directions","promotePawn","Promise","resolve","promotedPiece","window","prompt","newPiece","toUpperCase"],"sources":["/root/se06206-final-thaydong-nhom1/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["let currentTurn = true; // true = Trắng, false = Đen\n\nexport const getValidMoves = (piece, row, col, board) => {\n  let validMoves = [];\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n\n  // Kiểm tra nếu là quân của người chơi hiện tại\n  if (isWhite !== currentTurn) return validMoves;\n\n  switch (piece) {\n    case \"♙\": case \"♟\":\n      validMoves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\": case \"♜\":\n      validMoves = getRookMoves(row, col, board, isWhite);\n      break;\n    case \"♘\": case \"♞\":\n      validMoves = getKnightMoves(row, col, board, isWhite);\n      break;\n    case \"♗\": case \"♝\":\n      validMoves = getBishopMoves(row, col, board, isWhite);\n      break;\n    case \"♕\": case \"♛\":\n      validMoves = [...getRookMoves(row, col, board, isWhite), ...getBishopMoves(row, col, board, isWhite)];\n      break;\n    case \"♔\": case \"♚\":\n      validMoves = getKingMoves(row, col, board, isWhite);\n      break;\n    default:\n      break;\n  }\n\n  return validMoves;\n};\n\n// ✅ Xử lý di chuyển Tốt (Pawn) + Phong cấp\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const endRow = isWhite ? 0 : 7;\n\n  if (row + direction >= 0 && row + direction < 8) {\n    if (!board[row + direction][col]) {\n      moves.push({ row: row + direction, col });\n      if (row === startRow && !board[row + 2 * direction][col]) {\n        moves.push({ row: row + 2 * direction, col });\n      }\n    }\n    if (col > 0 && board[row + direction][col - 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col - 1]) !== isWhite) {\n      moves.push({ row: row + direction, col: col - 1 });\n    }\n    if (col < 7 && board[row + direction][col + 1] && \"♙♖♘♗♕♔\".includes(board[row + direction][col + 1]) !== isWhite) {\n      moves.push({ row: row + direction, col: col + 1 });\n    }\n  }\n  return moves;\n};\n\n// ✅ Xử lý Xe (Rook)\nconst getRookMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\n// ✅ Xử lý Tượng (Bishop)\nconst getBishopMoves = (row, col, board, isWhite) => {\n  return getLinearMoves(row, col, board, isWhite, [[1, 1], [-1, -1], [1, -1], [-1, 1]]);\n};\n\n// ✅ Xử lý Mã (Knight)\nconst getKnightMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n  \n  knightMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({ row: newRow, col: newCol });\n      }\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xử lý Vua (King)\nconst getKingMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  const kingMoves = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [-1, -1], [1, -1], [-1, 1]];\n\n  kingMoves.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target || \"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n        moves.push({ row: newRow, col: newCol });\n      }\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xử lý nước đi theo đường thẳng (Xe, Hậu, Tượng)\nconst getLinearMoves = (row, col, board, isWhite, directions) => {\n  let moves = [];\n\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx, newCol = col + dy;\n    while (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      let target = board[newRow][newCol];\n      if (!target) {\n        moves.push({ row: newRow, col: newCol });\n      } else {\n        if (\"♙♖♘♗♕♔\".includes(target) !== isWhite) {\n          moves.push({ row: newRow, col: newCol });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n\n  return moves;\n};\n\n// ✅ Xử lý phong cấp quân Tốt\nconst promotePawn = async (row, col, board, isWhite) => {\n  return new Promise((resolve) => {\n    const promotedPiece = window.prompt(\n      \"Chọn quân để phong cấp: (Q) Hậu, (R) Xe, (B) Tượng, (N) Mã\",\n      \"Q\"\n    );\n\n    let newPiece;\n    switch (promotedPiece?.toUpperCase()) {\n      case \"R\": newPiece = isWhite ? \"♖\" : \"♜\"; break;\n      case \"B\": newPiece = isWhite ? \"♗\" : \"♝\"; break;\n      case \"N\": newPiece = isWhite ? \"♘\" : \"♞\"; break;\n      default: newPiece = isWhite ? \"♕\" : \"♛\"; // Mặc định là Hậu\n    }\n\n    board[row][col] = newPiece;\n    resolve();\n  });\n};\n\n// ✅ Xuất tất cả các hàm cần thiết\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}