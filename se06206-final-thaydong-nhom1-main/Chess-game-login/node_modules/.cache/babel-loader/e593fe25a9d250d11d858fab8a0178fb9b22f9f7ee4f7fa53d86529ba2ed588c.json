{"ast":null,"code":"import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\n\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\nexport const findKingPosition = (board, isWhite) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\nexport const isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\n\n  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingPos.row}, ${kingPos.col})`);\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\n\n      // Ki·ªÉm tra qu√¢n ƒë·ªëi th·ªß\n      const isEnemy = isWhite ? \"‚ôü‚ôú‚ôû‚ôù‚ôõ‚ôö\".includes(piece) : \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece);\n      if (!isEnemy) continue; // N·∫øu kh√¥ng ph·∫£i qu√¢n ƒë·ªãch, b·ªè qua\n\n      // Ki·ªÉm tra xem qu√¢n ƒë·ªëi th·ªß c√≥ th·ªÉ t·∫•n c√¥ng vua kh√¥ng\n      if (isValidMove(piece, row, col, kingPos.row, kingPos.col, board)) {\n        console.log(`‚ö†Ô∏è Vua b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·∫°i (${row}, ${col})`);\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\nexport const isCheckmate = (board, isWhite) => {\n  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu vua kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\n\n  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n n√†o ·ªü √¥ n√†y\n\n      const isFriendly = isWhite ? \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) : \"‚ôü‚ôú‚ôû‚ôù‚ôõ‚ôö\".includes(piece);\n      if (!isFriendly) continue; // Ch·ªâ x√©t qu√¢n c·ªßa ch√≠nh m√¨nh\n\n      for (let newRow = 0; newRow < 8; newRow++) {\n        for (let newCol = 0; newCol < 8; newCol++) {\n          if (!isValidMove(piece, row, col, newRow, newCol, board)) continue; // B·ªè qua n∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá\n\n          // T·∫°o b·∫£n sao b√†n c·ªù ƒë·ªÉ ki·ªÉm tra n∆∞·ªõc ƒëi\n          const newBoard = board.map(innerRow => [...innerRow]);\n          newBoard[newRow][newCol] = piece;\n          newBoard[row][col] = \"\"; // X√≥a qu√¢n kh·ªèi v·ªã tr√≠ c≈©\n\n          // N·∫øu vua tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\n          if (!isKingInCheck(newBoard, isWhite)) {\n            console.log(`‚úÖ C√≥ n∆∞·ªõc tho√°t: (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\n            return false;\n          }\n        }\n      }\n    }\n  }\n  console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\n  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\n};","map":{"version":3,"names":["isValidMove","findKingPosition","board","isWhite","row","col","isKingInCheck","kingPos","console","log","piece","isEnemy","includes","isCheckmate","isFriendly","newRow","newCol","newBoard","map","innerRow"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/checkmate.js"],"sourcesContent":["import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\r\n\r\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\r\nexport const findKingPosition = (board, isWhite) => {\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\r\n        return { row, col };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\r\nexport const isKingInCheck = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\r\n\r\n  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingPos.row}, ${kingPos.col})`);\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\r\n\r\n      // Ki·ªÉm tra qu√¢n ƒë·ªëi th·ªß\r\n      const isEnemy = isWhite ? \"‚ôü‚ôú‚ôû‚ôù‚ôõ‚ôö\".includes(piece) : \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece);\r\n      if (!isEnemy) continue; // N·∫øu kh√¥ng ph·∫£i qu√¢n ƒë·ªãch, b·ªè qua\r\n\r\n      // Ki·ªÉm tra xem qu√¢n ƒë·ªëi th·ªß c√≥ th·ªÉ t·∫•n c√¥ng vua kh√¥ng\r\n      if (isValidMove(piece, row, col, kingPos.row, kingPos.col, board)) {\r\n        console.log(`‚ö†Ô∏è Vua b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·∫°i (${row}, ${col})`);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\r\nexport const isCheckmate = (board, isWhite) => {\r\n  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu vua kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\r\n\r\n  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n n√†o ·ªü √¥ n√†y\r\n\r\n      const isFriendly = isWhite ? \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) : \"‚ôü‚ôú‚ôû‚ôù‚ôõ‚ôö\".includes(piece);\r\n      if (!isFriendly) continue; // Ch·ªâ x√©t qu√¢n c·ªßa ch√≠nh m√¨nh\r\n\r\n      for (let newRow = 0; newRow < 8; newRow++) {\r\n        for (let newCol = 0; newCol < 8; newCol++) {\r\n          if (!isValidMove(piece, row, col, newRow, newCol, board)) continue; // B·ªè qua n∆∞·ªõc ƒëi kh√¥ng h·ª£p l·ªá\r\n\r\n          // T·∫°o b·∫£n sao b√†n c·ªù ƒë·ªÉ ki·ªÉm tra n∆∞·ªõc ƒëi\r\n          const newBoard = board.map(innerRow => [...innerRow]);\r\n          newBoard[newRow][newCol] = piece;\r\n          newBoard[row][col] = \"\"; // X√≥a qu√¢n kh·ªèi v·ªã tr√≠ c≈©\r\n\r\n          // N·∫øu vua tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\r\n          if (!isKingInCheck(newBoard, isWhite)) {\r\n            console.log(`‚úÖ C√≥ n∆∞·ªõc tho√°t: (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\r\n  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}