{"ast":null,"code":"import { Versions } from '../versions.js';\nimport { CompatClient } from './compat-client.js';\n/**\r\n * STOMP Class, acts like a factory to create {@link Client}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * **Deprecated**\r\n *\r\n * It will be removed in next major version. Please switch to {@link Client}.\r\n */\nexport class Stomp {\n  /**\r\n   * This method creates a WebSocket client that is connected to\r\n   * the STOMP server located at the url.\r\n   *\r\n   * ```javascript\r\n   *        var url = \"ws://localhost:61614/stomp\";\r\n   *        var client = Stomp.client(url);\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#brokerURL]{@link Client#brokerURL}.\r\n   */\n  static client(url, protocols) {\n    // This is a hack to allow another implementation than the standard\n    // HTML5 WebSocket class.\n    //\n    // It is possible to use another class by calling\n    //\n    //     Stomp.WebSocketClass = MozWebSocket\n    //\n    // *prior* to call `Stomp.client()`.\n    //\n    // This hack is deprecated and `Stomp.over()` method should be used\n    // instead.\n    // See remarks on the function Stomp.over\n    if (protocols == null) {\n      protocols = Versions.default.protocolVersions();\n    }\n    const wsFn = () => {\n      const klass = Stomp.WebSocketClass || WebSocket;\n      return new klass(url, protocols);\n    };\n    return new CompatClient(wsFn);\n  }\n  /**\r\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\r\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\r\n   * a similar object).\r\n   *\r\n   * In order to support reconnection, the function Client._connect should be callable more than once.\r\n   * While reconnecting\r\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\r\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\r\n   *\r\n   * ```javascript\r\n   *        var client = Stomp.over(function(){\r\n   *          return new WebSocket('ws://localhost:15674/ws')\r\n   *        });\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\n  static over(ws) {\n    let wsFn;\n    if (typeof ws === 'function') {\n      wsFn = ws;\n    } else {\n      console.warn('Stomp.over did not receive a factory, auto reconnect will not work. ' + 'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over');\n      wsFn = () => ws;\n    }\n    return new CompatClient(wsFn);\n  }\n}\n/**\r\n * In case you need to use a non standard class for WebSocket.\r\n *\r\n * For example when using within NodeJS environment:\r\n *\r\n * ```javascript\r\n *        StompJs = require('../../esm5/');\r\n *        Stomp = StompJs.Stomp;\r\n *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\r\n * ```\r\n *\r\n * **Deprecated**\r\n *\r\n *\r\n * It will be removed in next major version. Please switch to {@link Client}\r\n * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n */\n// tslint:disable-next-line:variable-name\nStomp.WebSocketClass = null;","map":{"version":3,"names":["Versions","CompatClient","Stomp","client","url","protocols","default","protocolVersions","wsFn","klass","WebSocketClass","WebSocket","over","ws","console","warn"],"sources":["C:\\Users\\admin\\se06206-final-thaydong-nhom1\\se06206-final-thaydong-nhom1-main\\Chess-game-login\\node_modules\\@stomp\\stompjs\\src\\compatibility\\stomp.ts"],"sourcesContent":["import { Versions } from '../versions.js';\r\nimport { CompatClient } from './compat-client.js';\r\nimport { IStompSocket } from '../types.js';\r\n\r\n/**\r\n * @internal\r\n */\r\ndeclare const WebSocket: {\r\n  prototype: IStompSocket;\r\n  new (url: string, protocols?: string | string[]): IStompSocket;\r\n};\r\n\r\n/**\r\n * STOMP Class, acts like a factory to create {@link Client}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n *\r\n * **Deprecated**\r\n *\r\n * It will be removed in next major version. Please switch to {@link Client}.\r\n */\r\nexport class Stomp {\r\n  /**\r\n   * In case you need to use a non standard class for WebSocket.\r\n   *\r\n   * For example when using within NodeJS environment:\r\n   *\r\n   * ```javascript\r\n   *        StompJs = require('../../esm5/');\r\n   *        Stomp = StompJs.Stomp;\r\n   *        Stomp.WebSocketClass = require('websocket').w3cwebsocket;\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\r\n  // tslint:disable-next-line:variable-name\r\n  public static WebSocketClass: any = null;\r\n\r\n  /**\r\n   * This method creates a WebSocket client that is connected to\r\n   * the STOMP server located at the url.\r\n   *\r\n   * ```javascript\r\n   *        var url = \"ws://localhost:61614/stomp\";\r\n   *        var client = Stomp.client(url);\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#brokerURL]{@link Client#brokerURL}.\r\n   */\r\n  public static client(url: string, protocols?: string[]): CompatClient {\r\n    // This is a hack to allow another implementation than the standard\r\n    // HTML5 WebSocket class.\r\n    //\r\n    // It is possible to use another class by calling\r\n    //\r\n    //     Stomp.WebSocketClass = MozWebSocket\r\n    //\r\n    // *prior* to call `Stomp.client()`.\r\n    //\r\n    // This hack is deprecated and `Stomp.over()` method should be used\r\n    // instead.\r\n\r\n    // See remarks on the function Stomp.over\r\n    if (protocols == null) {\r\n      protocols = Versions.default.protocolVersions();\r\n    }\r\n    const wsFn = () => {\r\n      const klass = Stomp.WebSocketClass || WebSocket;\r\n      return new klass(url, protocols);\r\n    };\r\n\r\n    return new CompatClient(wsFn);\r\n  }\r\n\r\n  /**\r\n   * This method is an alternative to [Stomp#client]{@link Stomp#client} to let the user\r\n   * specify the WebSocket to use (either a standard HTML5 WebSocket or\r\n   * a similar object).\r\n   *\r\n   * In order to support reconnection, the function Client._connect should be callable more than once.\r\n   * While reconnecting\r\n   * a new instance of underlying transport (TCP Socket, WebSocket or SockJS) will be needed. So, this function\r\n   * alternatively allows passing a function that should return a new instance of the underlying socket.\r\n   *\r\n   * ```javascript\r\n   *        var client = Stomp.over(function(){\r\n   *          return new WebSocket('ws://localhost:15674/ws')\r\n   *        });\r\n   * ```\r\n   *\r\n   * **Deprecated**\r\n   *\r\n   * It will be removed in next major version. Please switch to {@link Client}\r\n   * using [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\r\n  public static over(ws: any): CompatClient {\r\n    let wsFn: () => any;\r\n\r\n    if (typeof ws === 'function') {\r\n      wsFn = ws;\r\n    } else {\r\n      console.warn(\r\n        'Stomp.over did not receive a factory, auto reconnect will not work. ' +\r\n          'Please see https://stomp-js.github.io/api-docs/latest/classes/Stomp.html#over'\r\n      );\r\n      wsFn = () => ws;\r\n    }\r\n\r\n    return new CompatClient(wsFn);\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,YAAY,QAAQ,oBAAoB;AAWjD;;;;;;;;;AASA,OAAM,MAAOC,KAAK;EAqBhB;;;;;;;;;;;;;;EAcO,OAAOC,MAAMA,CAACC,GAAW,EAAEC,SAAoB;IACpD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA,IAAIA,SAAS,IAAI,IAAI,EAAE;MACrBA,SAAS,GAAGL,QAAQ,CAACM,OAAO,CAACC,gBAAgB,EAAE;IACjD;IACA,MAAMC,IAAI,GAAGA,CAAA,KAAK;MAChB,MAAMC,KAAK,GAAGP,KAAK,CAACQ,cAAc,IAAIC,SAAS;MAC/C,OAAO,IAAIF,KAAK,CAACL,GAAG,EAAEC,SAAS,CAAC;IAClC,CAAC;IAED,OAAO,IAAIJ,YAAY,CAACO,IAAI,CAAC;EAC/B;EAEA;;;;;;;;;;;;;;;;;;;;;EAqBO,OAAOI,IAAIA,CAACC,EAAO;IACxB,IAAIL,IAAe;IAEnB,IAAI,OAAOK,EAAE,KAAK,UAAU,EAAE;MAC5BL,IAAI,GAAGK,EAAE;IACX,CAAC,MAAM;MACLC,OAAO,CAACC,IAAI,CACV,sEAAsE,GACpE,+EAA+E,CAClF;MACDP,IAAI,GAAGA,CAAA,KAAMK,EAAE;IACjB;IAEA,OAAO,IAAIZ,YAAY,CAACO,IAAI,CAAC;EAC/B;;AA9FA;;;;;;;;;;;;;;;;;AAiBA;AACcN,KAAA,CAAAQ,cAAc,GAAQ,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}