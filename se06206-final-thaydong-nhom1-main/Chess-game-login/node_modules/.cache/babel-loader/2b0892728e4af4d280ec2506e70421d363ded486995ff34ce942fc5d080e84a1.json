{"ast":null,"code":"import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\n\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\nexport const findKingPosition = (board, isWhite) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\nexport const isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\n\n  const {\n    row: kingRow,\n    col: kingCol\n  } = kingPos;\n  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingRow}, ${kingCol})`);\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\n\n      const isEnemy = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôö\".includes(piece) !== isWhite; // N·∫øu qu√¢n c·ªù l√† c·ªßa ƒë·ªëi th·ªß\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        console.log(`‚ö†Ô∏è Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·ª´ (${row}, ${col})`);\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\nexport const isCheckmate = (board, isWhite) => {\n  if (!isKingInCheck(board, isWhite)) return false;\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n      const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\n      if (!isFriendly) continue;\n      for (let newRow = 0; newRow < 8; newRow++) {\n        for (let newCol = 0; newCol < 8; newCol++) {\n          if (isValidMove(piece, row, col, newRow, newCol, board)) {\n            const newBoard = board.map(innerRow => [...innerRow]);\n            newBoard[newRow][newCol] = piece;\n            newBoard[row][col] = \"\";\n            if (!isKingInCheck(newBoard, isWhite)) {\n              return false; // C√≤n ƒë∆∞·ªùng tho√°t => ch∆∞a chi·∫øu h·∫øt\n            }\n          }\n        }\n      }\n    }\n  }\n  return true; // Kh√¥ng c√≤n n∆∞·ªõc n√†o tho√°t => chi·∫øu h·∫øt\n};","map":{"version":3,"names":["isValidMove","findKingPosition","board","isWhite","row","col","isKingInCheck","kingPos","kingRow","kingCol","console","log","piece","isEnemy","includes","isCheckmate","isFriendly","newRow","newCol","newBoard","map","innerRow"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/checkmate.js"],"sourcesContent":["import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\r\n\r\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\r\nexport const findKingPosition = (board, isWhite) => {\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\r\n        return { row, col };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\r\nexport const isKingInCheck = (board, isWhite) => {\r\n    const kingPos = findKingPosition(board, isWhite);\r\n    if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\r\n  \r\n    const { row: kingRow, col: kingCol } = kingPos;\r\n  \r\n    console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingRow}, ${kingCol})`);\r\n  \r\n    for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n        const piece = board[row][col];\r\n        if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\r\n  \r\n        const isEnemy = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôö\".includes(piece) !== isWhite; // N·∫øu qu√¢n c·ªù l√† c·ªßa ƒë·ªëi th·ªß\r\n        if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\r\n          console.log(`‚ö†Ô∏è Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·ª´ (${row}, ${col})`);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  \r\n    return false;\r\n  };\r\n  \r\n  \r\n\r\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\r\nexport const isCheckmate = (board, isWhite) => {\r\n    if (!isKingInCheck(board, isWhite)) return false;\r\n  \r\n    for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n        const piece = board[row][col];\r\n        if (!piece) continue;\r\n  \r\n        const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\r\n        if (!isFriendly) continue;\r\n  \r\n        for (let newRow = 0; newRow < 8; newRow++) {\r\n          for (let newCol = 0; newCol < 8; newCol++) {\r\n            if (isValidMove(piece, row, col, newRow, newCol, board)) {\r\n              const newBoard = board.map(innerRow => [...innerRow]);\r\n              newBoard[newRow][newCol] = piece;\r\n              newBoard[row][col] = \"\";\r\n  \r\n              if (!isKingInCheck(newBoard, isWhite)) {\r\n                return false; // C√≤n ƒë∆∞·ªùng tho√°t => ch∆∞a chi·∫øu h·∫øt\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    return true; // Kh√¥ng c√≤n n∆∞·ªõc n√†o tho√°t => chi·∫øu h·∫øt\r\n  };\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}