{"ast":null,"code":"import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\n\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\nexport const findKingPosition = (board, isWhite) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\nexport const isKingInCheck = (board, isWhiteTurn) => {\n  const kingPos = findKingPosition(board, isWhiteTurn);\n  if (!kingPos) return false;\n  return board.some((row, r) => row.some((piece, c) => {\n    if (piece && isOpponent(piece, isWhiteTurn)) {\n      const validMoves = getValidMoves(piece, r, c, board);\n      return validMoves.some(move => move.row === kingPos.row && move.col === kingPos.col);\n    }\n    return false;\n  }));\n};\n\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\nexport const isCheckmate = (board, isWhite) => {\n  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt.\n\n  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n      const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\n      if (!isFriendly) continue;\n      for (let newRow = 0; newRow < 8; newRow++) {\n        for (let newCol = 0; newCol < 8; newCol++) {\n          if (isValidMove(piece, row, col, newRow, newCol, board)) {\n            // Sao ch√©p b√†n c·ªù ƒë√∫ng c√°ch\n            const newBoard = board.map(innerRow => [...innerRow]);\n            newBoard[newRow][newCol] = piece;\n            newBoard[row][col] = \"\";\n            if (!isKingInCheck(newBoard, isWhite)) {\n              console.log(`‚úÖ T√¨m th·∫•y m·ªôt n∆∞·ªõc tho√°t t·∫°i (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\n              return false; // N·∫øu c√≥ n∆∞·ªõc ƒëi tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\n            }\n          }\n        }\n      }\n    }\n  }\n  console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\n  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\n};","map":{"version":3,"names":["isValidMove","findKingPosition","board","isWhite","row","col","isKingInCheck","isWhiteTurn","kingPos","some","r","piece","c","isOpponent","validMoves","getValidMoves","move","isCheckmate","console","log","isFriendly","includes","newRow","newCol","newBoard","map","innerRow"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/checkmate.js"],"sourcesContent":["import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\r\n\r\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\r\nexport const findKingPosition = (board, isWhite) => {\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\r\n        return { row, col };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\r\nexport const isKingInCheck = (board, isWhiteTurn) => {\r\n  const kingPos = findKingPosition(board, isWhiteTurn);\r\n  if (!kingPos) return false;\r\n\r\n  return board.some((row, r) =>\r\n    row.some((piece, c) => {\r\n      if (piece && isOpponent(piece, isWhiteTurn)) {\r\n        const validMoves = getValidMoves(piece, r, c, board);\r\n        return validMoves.some((move) => move.row === kingPos.row && move.col === kingPos.col);\r\n      }\r\n      return false;\r\n    })\r\n  );\r\n};\r\n\r\n  \r\n  \r\n  \r\n\r\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\r\nexport const isCheckmate = (board, isWhite) => {\r\n    if (!isKingInCheck(board, isWhite)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt.\r\n  \r\n    console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\r\n  \r\n    for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n        const piece = board[row][col];\r\n        if (!piece) continue;\r\n  \r\n        const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\r\n        if (!isFriendly) continue;\r\n  \r\n        for (let newRow = 0; newRow < 8; newRow++) {\r\n          for (let newCol = 0; newCol < 8; newCol++) {\r\n            if (isValidMove(piece, row, col, newRow, newCol, board)) {\r\n              // Sao ch√©p b√†n c·ªù ƒë√∫ng c√°ch\r\n              const newBoard = board.map(innerRow => [...innerRow]);\r\n              newBoard[newRow][newCol] = piece;\r\n              newBoard[row][col] = \"\";\r\n  \r\n              if (!isKingInCheck(newBoard, isWhite)) {\r\n                console.log(`‚úÖ T√¨m th·∫•y m·ªôt n∆∞·ªõc tho√°t t·∫°i (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\r\n                return false; // N·∫øu c√≥ n∆∞·ªõc ƒëi tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\r\n    return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\r\n  };\r\n  \r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}