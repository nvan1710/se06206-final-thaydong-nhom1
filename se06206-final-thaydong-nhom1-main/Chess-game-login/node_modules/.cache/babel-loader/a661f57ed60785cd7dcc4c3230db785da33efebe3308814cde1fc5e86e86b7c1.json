{"ast":null,"code":"import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\n\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\nexport const findKingPosition = (board, isWhite) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n};\n\n// üìç Ki·ªÉm tra xem qu√¢n c·ªù c√≥ ph·∫£i l√† qu√¢n ƒë·ªãch kh√¥ng\nconst isEnemyPiece = (piece, isWhite) => {\n  const whitePieces = [\"‚ôô\", \"‚ôñ\", \"‚ôò\", \"‚ôó\", \"‚ôï\", \"‚ôî\"];\n  const blackPieces = [\"‚ôü\", \"‚ôú\", \"‚ôû\", \"‚ôù\", \"‚ôõ\", \"‚ôö\"];\n  return isWhite ? blackPieces.includes(piece) : whitePieces.includes(piece);\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ ƒëang b·ªã chi·∫øu kh√¥ng\nexport const isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // Kh√¥ng t√¨m th·∫•y vua, tr√°nh l·ªói\n\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && isValidMove(piece, row, col, kingPos.row, kingPos.col, board)) {\n        console.log(`üö® Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·∫°i (${row}, ${col})`);\n        return true; // Vua b·ªã chi·∫øu\n      }\n    }\n  }\n  return false;\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ th·ªÉ tho√°t kh·ªèi chi·∫øu kh√¥ng\nconst canKingEscape = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false;\n  const {\n    row,\n    col\n  } = kingPos;\n  const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  for (const [dx, dy] of directions) {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (board[newRow][newCol] === \"\" || isEnemyPiece(board[newRow][newCol], isWhite)) {\n        const tempBoard = JSON.parse(JSON.stringify(board));\n        tempBoard[newRow][newCol] = tempBoard[row][col];\n        tempBoard[row][col] = \"\";\n        if (!isKingInCheck(tempBoard, isWhite)) {\n          return true; // C√≥ n∆∞·ªõc ƒëi tho√°t kh·ªèi chi·∫øu\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\nexport const isCheckmate = (board, isWhite) => {\n  if (!isKingInCheck(board, isWhite)) return false; // Kh√¥ng b·ªã chi·∫øu th√¨ kh√¥ng th·ªÉ l√† chi·∫øu h·∫øt\n\n  if (canKingEscape(board, isWhite)) return false; // Vua c√≥ th·ªÉ ch·∫°y tho√°t\n\n  // Ki·ªÉm tra xem c√≥ qu√¢n n√†o c√≥ th·ªÉ ƒë·ª° chi·∫øu kh√¥ng\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n      const isFriendly = isWhite ? [\"‚ôô\", \"‚ôñ\", \"‚ôò\", \"‚ôó\", \"‚ôï\", \"‚ôî\"].includes(piece) : [\"‚ôü\", \"‚ôú\", \"‚ôû\", \"‚ôù\", \"‚ôõ\", \"‚ôö\"].includes(piece);\n      if (!isFriendly) continue;\n      for (let newRow = 0; newRow < 8; newRow++) {\n        for (let newCol = 0; newCol < 8; newCol++) {\n          if (isValidMove(piece, row, col, newRow, newCol, board)) {\n            const newBoard = JSON.parse(JSON.stringify(board));\n            newBoard[newRow][newCol] = piece;\n            newBoard[row][col] = \"\";\n            if (!isKingInCheck(newBoard, isWhite)) {\n              return false; // C√≥ qu√¢n c·ªù c√≥ th·ªÉ gi√∫p vua tho√°t kh·ªèi chi·∫øu\n            }\n          }\n        }\n      }\n    }\n  }\n  return true; // Kh√¥ng c√≥ c√°ch n√†o tho√°t ‚Üí Chi·∫øu h·∫øt!\n};","map":{"version":3,"names":["isValidMove","findKingPosition","board","isWhite","row","col","isEnemyPiece","piece","whitePieces","blackPieces","includes","isKingInCheck","kingPos","console","log","canKingEscape","directions","dx","dy","newRow","newCol","tempBoard","JSON","parse","stringify","isCheckmate","isFriendly","newBoard"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/checkmate.js"],"sourcesContent":["import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\r\n\r\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\r\nexport const findKingPosition = (board, isWhite) => {\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\r\n        return { row, col };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem qu√¢n c·ªù c√≥ ph·∫£i l√† qu√¢n ƒë·ªãch kh√¥ng\r\nconst isEnemyPiece = (piece, isWhite) => {\r\n  const whitePieces = [\"‚ôô\", \"‚ôñ\", \"‚ôò\", \"‚ôó\", \"‚ôï\", \"‚ôî\"];\r\n  const blackPieces = [\"‚ôü\", \"‚ôú\", \"‚ôû\", \"‚ôù\", \"‚ôõ\", \"‚ôö\"];\r\n  return isWhite ? blackPieces.includes(piece) : whitePieces.includes(piece);\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ ƒëang b·ªã chi·∫øu kh√¥ng\r\nexport const isKingInCheck = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false; // Kh√¥ng t√¨m th·∫•y vua, tr√°nh l·ªói\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (piece && isValidMove(piece, row, col, kingPos.row, kingPos.col, board)) {\r\n        console.log(`üö® Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·∫°i (${row}, ${col})`);\r\n        return true; // Vua b·ªã chi·∫øu\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ th·ªÉ tho√°t kh·ªèi chi·∫øu kh√¥ng\r\nconst canKingEscape = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false;\r\n\r\n  const { row, col } = kingPos;\r\n  const directions = [\r\n    [-1, -1], [-1, 0], [-1, 1],\r\n    [0, -1],         [0, 1],\r\n    [1, -1], [1, 0], [1, 1]\r\n  ]; \r\n\r\n  for (const [dx, dy] of directions) {\r\n    const newRow = row + dx;\r\n    const newCol = col + dy;\r\n\r\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n      if (board[newRow][newCol] === \"\" || isEnemyPiece(board[newRow][newCol], isWhite)) {\r\n        const tempBoard = JSON.parse(JSON.stringify(board));\r\n        tempBoard[newRow][newCol] = tempBoard[row][col];\r\n        tempBoard[row][col] = \"\";\r\n\r\n        if (!isKingInCheck(tempBoard, isWhite)) {\r\n          return true; // C√≥ n∆∞·ªõc ƒëi tho√°t kh·ªèi chi·∫øu\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\r\nexport const isCheckmate = (board, isWhite) => {\r\n  if (!isKingInCheck(board, isWhite)) return false; // Kh√¥ng b·ªã chi·∫øu th√¨ kh√¥ng th·ªÉ l√† chi·∫øu h·∫øt\r\n\r\n  if (canKingEscape(board, isWhite)) return false; // Vua c√≥ th·ªÉ ch·∫°y tho√°t\r\n\r\n  // Ki·ªÉm tra xem c√≥ qu√¢n n√†o c√≥ th·ªÉ ƒë·ª° chi·∫øu kh√¥ng\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (!piece) continue;\r\n\r\n      const isFriendly = isWhite\r\n        ? [\"‚ôô\", \"‚ôñ\", \"‚ôò\", \"‚ôó\", \"‚ôï\", \"‚ôî\"].includes(piece)\r\n        : [\"‚ôü\", \"‚ôú\", \"‚ôû\", \"‚ôù\", \"‚ôõ\", \"‚ôö\"].includes(piece);\r\n\r\n      if (!isFriendly) continue;\r\n\r\n      for (let newRow = 0; newRow < 8; newRow++) {\r\n        for (let newCol = 0; newCol < 8; newCol++) {\r\n          if (isValidMove(piece, row, col, newRow, newCol, board)) {\r\n            const newBoard = JSON.parse(JSON.stringify(board));\r\n            newBoard[newRow][newCol] = piece;\r\n            newBoard[row][col] = \"\";\r\n\r\n            if (!isKingInCheck(newBoard, isWhite)) {\r\n              return false; // C√≥ qu√¢n c·ªù c√≥ th·ªÉ gi√∫p vua tho√°t kh·ªèi chi·∫øu\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return true; // Kh√¥ng c√≥ c√°ch n√†o tho√°t ‚Üí Chi·∫øu h·∫øt!\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}