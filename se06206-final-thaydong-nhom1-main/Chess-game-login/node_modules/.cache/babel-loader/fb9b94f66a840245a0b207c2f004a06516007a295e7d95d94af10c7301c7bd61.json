{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const moves = getValidMoves(piece, fromRow, fromCol, board);\n  return moves.some(move => move.row === toRow && move.col === toCol);\n};\nexport const getValidMoves = (piece, row, col, board) => {\n  if (!piece) return [];\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  let moves = [];\n  switch (piece) {\n    case \"♙\":\n      // Tốt trắng\n      moves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♟\":\n      // Tốt đen\n      moves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\":\n    case \"♜\":\n      // Xe\n      moves = getRookMoves(row, col, board);\n      break;\n    case \"♘\":\n    case \"♞\":\n      // Mã\n      moves = getKnightMoves(row, col, board);\n      break;\n    case \"♗\":\n    case \"♝\":\n      // Tượng\n      moves = getBishopMoves(row, col, board);\n      break;\n    case \"♕\":\n    case \"♛\":\n      // Hậu\n      moves = [...getRookMoves(row, col, board), ...getBishopMoves(row, col, board)];\n      break;\n    case \"♔\":\n    case \"♚\":\n      // Vua\n      moves = getKingMoves(row, col, board);\n      break;\n    default:\n      break;\n  }\n  return moves;\n};\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  let direction = isWhite ? -1 : 1;\n  let startRow = isWhite ? 6 : 1;\n  if (isValidSquare(row + direction, col) && !board[row + direction][col]) {\n    moves.push({\n      row: row + direction,\n      col\n    });\n    if (row === startRow && !board[row + 2 * direction][col]) {\n      moves.push({\n        row: row + 2 * direction,\n        col\n      });\n    }\n  }\n  for (let offset of [-1, 1]) {\n    let newRow = row + direction;\n    let newCol = col + offset;\n    if (isValidSquare(newRow, newCol) && board[newRow][newCol] && isOpponent(board[row][col], board[newRow][newCol])) {\n      moves.push({\n        row: newRow,\n        col: newCol\n      });\n    }\n  }\n  return moves;\n};\nconst getRookMoves = (row, col, board) => {\n  return getLinearMoves(row, col, board, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\nconst getBishopMoves = (row, col, board) => {\n  return getLinearMoves(row, col, board, [[1, 1], [1, -1], [-1, 1], [-1, -1]]);\n};\nconst getKnightMoves = (row, col, board) => {\n  const moves = [];\n  const offsets = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]];\n  offsets.forEach(([dx, dy]) => {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (isValidSquare(newRow, newCol) && (!board[newRow][newCol] || isOpponent(board[row][col], board[newRow][newCol]))) {\n      moves.push({\n        row: newRow,\n        col: newCol\n      });\n    }\n  });\n  return moves;\n};\nconst getKingMoves = (row, col, board) => {\n  const moves = [];\n  const offsets = [[1, 0], [-1, 0], [0, 1], [0, -1], [1, 1], [1, -1], [-1, 1], [-1, -1]];\n  offsets.forEach(([dx, dy]) => {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (isValidSquare(newRow, newCol) && (!board[newRow][newCol] || isOpponent(board[row][col], board[newRow][newCol]))) {\n      moves.push({\n        row: newRow,\n        col: newCol\n      });\n    }\n  });\n  return moves;\n};\nconst getLinearMoves = (row, col, board, directions) => {\n  let moves = [];\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx;\n    let newCol = col + dy;\n    while (isValidSquare(newRow, newCol)) {\n      if (!board[newRow][newCol]) {\n        moves.push({\n          row: newRow,\n          col: newCol\n        });\n      } else {\n        if (isOpponent(board[row][col], board[newRow][newCol])) {\n          moves.push({\n            row: newRow,\n            col: newCol\n          });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n  return moves;\n};\nconst isValidSquare = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\nconst isOpponent = (piece1, piece2) => {\n  return \"♙♖♘♗♕♔\".includes(piece1) && \"♟♜♞♝♛♚\".includes(piece2) || \"♟♜♞♝♛♚\".includes(piece1) && \"♙♖♘♗♕♔\".includes(piece2);\n};","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","moves","getValidMoves","some","move","row","col","isWhite","includes","getPawnMoves","getRookMoves","getKnightMoves","getBishopMoves","getKingMoves","direction","startRow","isValidSquare","push","offset","newRow","newCol","isOpponent","getLinearMoves","offsets","forEach","dx","dy","directions","piece1","piece2"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const moves = getValidMoves(piece, fromRow, fromCol, board);\n  return moves.some((move) => move.row === toRow && move.col === toCol);\n};\n\nexport const getValidMoves = (piece, row, col, board) => {\n  if (!piece) return [];\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  let moves = [];\n\n  switch (piece) {\n    case \"♙\": // Tốt trắng\n      moves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♟\": // Tốt đen\n      moves = getPawnMoves(row, col, board, isWhite);\n      break;\n    case \"♖\": case \"♜\": // Xe\n      moves = getRookMoves(row, col, board);\n      break;\n    case \"♘\": case \"♞\": // Mã\n      moves = getKnightMoves(row, col, board);\n      break;\n    case \"♗\": case \"♝\": // Tượng\n      moves = getBishopMoves(row, col, board);\n      break;\n    case \"♕\": case \"♛\": // Hậu\n      moves = [...getRookMoves(row, col, board), ...getBishopMoves(row, col, board)];\n      break;\n    case \"♔\": case \"♚\": // Vua\n      moves = getKingMoves(row, col, board);\n      break;\n    default:\n      break;\n  }\n\n  return moves;\n};\n\nconst getPawnMoves = (row, col, board, isWhite) => {\n  let moves = [];\n  let direction = isWhite ? -1 : 1;\n  let startRow = isWhite ? 6 : 1;\n\n  if (isValidSquare(row + direction, col) && !board[row + direction][col]) {\n    moves.push({ row: row + direction, col });\n    if (row === startRow && !board[row + 2 * direction][col]) {\n      moves.push({ row: row + 2 * direction, col });\n    }\n  }\n\n  for (let offset of [-1, 1]) {\n    let newRow = row + direction;\n    let newCol = col + offset;\n    if (isValidSquare(newRow, newCol) && board[newRow][newCol] && isOpponent(board[row][col], board[newRow][newCol])) {\n      moves.push({ row: newRow, col: newCol });\n    }\n  }\n\n  return moves;\n};\n\nconst getRookMoves = (row, col, board) => {\n  return getLinearMoves(row, col, board, [[1, 0], [-1, 0], [0, 1], [0, -1]]);\n};\n\nconst getBishopMoves = (row, col, board) => {\n  return getLinearMoves(row, col, board, [[1, 1], [1, -1], [-1, 1], [-1, -1]]);\n};\n\nconst getKnightMoves = (row, col, board) => {\n  const moves = [];\n  const offsets = [\n    [2, 1], [2, -1], [-2, 1], [-2, -1],\n    [1, 2], [1, -2], [-1, 2], [-1, -2],\n  ];\n\n  offsets.forEach(([dx, dy]) => {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (isValidSquare(newRow, newCol) && (!board[newRow][newCol] || isOpponent(board[row][col], board[newRow][newCol]))) {\n      moves.push({ row: newRow, col: newCol });\n    }\n  });\n\n  return moves;\n};\n\nconst getKingMoves = (row, col, board) => {\n  const moves = [];\n  const offsets = [\n    [1, 0], [-1, 0], [0, 1], [0, -1],\n    [1, 1], [1, -1], [-1, 1], [-1, -1],\n  ];\n\n  offsets.forEach(([dx, dy]) => {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (isValidSquare(newRow, newCol) && (!board[newRow][newCol] || isOpponent(board[row][col], board[newRow][newCol]))) {\n      moves.push({ row: newRow, col: newCol });\n    }\n  });\n\n  return moves;\n};\n\nconst getLinearMoves = (row, col, board, directions) => {\n  let moves = [];\n  directions.forEach(([dx, dy]) => {\n    let newRow = row + dx;\n    let newCol = col + dy;\n    while (isValidSquare(newRow, newCol)) {\n      if (!board[newRow][newCol]) {\n        moves.push({ row: newRow, col: newCol });\n      } else {\n        if (isOpponent(board[row][col], board[newRow][newCol])) {\n          moves.push({ row: newRow, col: newCol });\n        }\n        break;\n      }\n      newRow += dx;\n      newCol += dy;\n    }\n  });\n  return moves;\n};\n\nconst isValidSquare = (row, col) => row >= 0 && row < 8 && col >= 0 && col < 8;\n\nconst isOpponent = (piece1, piece2) => {\n  return (\"♙♖♘♗♕♔\".includes(piece1) && \"♟♜♞♝♛♚\".includes(piece2)) ||\n         (\"♟♜♞♝♛♚\".includes(piece1) && \"♙♖♘♗♕♔\".includes(piece2));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}