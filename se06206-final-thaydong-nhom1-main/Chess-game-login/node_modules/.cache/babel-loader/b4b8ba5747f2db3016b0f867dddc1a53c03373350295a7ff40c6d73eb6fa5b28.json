{"ast":null,"code":"import { isValidMove } from \"./moveRules\"; // Import luật di chuyển\n\n// 📍 Tìm vị trí của vua trên bàn cờ\nexport const findKingPosition = (board, isWhite) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (isWhite ? \"♔\" : \"♚\")) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n};\n\n// 📍 Kiểm tra xem quân cờ có phải là quân địch không\nconst isEnemyPiece = (piece, isWhite) => {\n  const whitePieces = [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\"];\n  const blackPieces = [\"♟\", \"♜\", \"♞\", \"♝\", \"♛\", \"♚\"];\n  return isWhite ? blackPieces.includes(piece) : whitePieces.includes(piece);\n};\n\n// 📍 Kiểm tra đường đi có bị cản trở không (áp dụng cho xe, tượng, hậu)\nconst isPathClear = (board, startRow, startCol, endRow, endCol, piece) => {\n  if ([\"♖\", \"♜\"].includes(piece)) {\n    // Xe\n    if (startRow === endRow) {\n      let step = startCol < endCol ? 1 : -1;\n      for (let c = startCol + step; c !== endCol; c += step) {\n        if (board[startRow][c] !== \"\") return false;\n      }\n    } else if (startCol === endCol) {\n      let step = startRow < endRow ? 1 : -1;\n      for (let r = startRow + step; r !== endRow; r += step) {\n        if (board[r][startCol] !== \"\") return false;\n      }\n    }\n  } else if ([\"♗\", \"♝\", \"♕\", \"♛\"].includes(piece)) {\n    // Tượng / Hậu\n    let rowStep = startRow < endRow ? 1 : -1;\n    let colStep = startCol < endCol ? 1 : -1;\n    let r = startRow + rowStep;\n    let c = startCol + colStep;\n    while (r !== endRow && c !== endCol) {\n      if (board[r][c] !== \"\") return false;\n      r += rowStep;\n      c += colStep;\n    }\n  }\n  return true; // Không bị cản trở\n};\n\n// Kiểm tra xem vua có đang bị chiếu không\nconst isKingInCheck = (board, kingColor) => {\n  let kingPosition = null;\n\n  // Tìm vị trí của vua\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && piece.type === \"king\" && piece.color === kingColor) {\n        kingPosition = {\n          row,\n          col\n        };\n      }\n    }\n  }\n  if (!kingPosition) return false; // Nếu không tìm thấy vua, tránh lỗi\n\n  // Kiểm tra xem có quân nào đang tấn công vị trí vua không\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && piece.color !== kingColor) {\n        const possibleMoves = getValidMoves(board, row, col); // Hàm kiểm tra nước đi hợp lệ\n        if (possibleMoves.some(move => move.row === kingPosition.row && move.col === kingPosition.col)) {\n          return true; // Vua đang bị chiếu\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// 📍 Kiểm tra xem vua có thể thoát chiếu không\nconst canKingEscape = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false;\n  const {\n    row,\n    col\n  } = kingPos;\n  const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  for (const [dx, dy] of directions) {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      if (board[newRow][newCol] === \"\" || isEnemyPiece(board[newRow][newCol], isWhite)) {\n        const tempBoard = JSON.parse(JSON.stringify(board));\n        tempBoard[newRow][newCol] = tempBoard[row][col];\n        tempBoard[row][col] = \"\";\n        if (!isKingInCheck(tempBoard, isWhite)) {\n          console.log(`✅ Vua có thể thoát đến (${newRow}, ${newCol})`);\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// 📍 Kiểm tra chiếu hết (Checkmate)\nexport const isCheckmate = (board, isWhite) => {\n  if (!isKingInCheck(board, isWhite)) return false;\n  console.log(`🔎 Kiểm tra chiếu hết cho vua ${isWhite ? \"trắng\" : \"đen\"}...`);\n  if (canKingEscape(board, isWhite)) return false;\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n      const isFriendly = isWhite ? [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\"].includes(piece) : [\"♟\", \"♜\", \"♞\", \"♝\", \"♛\", \"♚\"].includes(piece);\n      if (!isFriendly) continue;\n      for (let newRow = 0; newRow < 8; newRow++) {\n        for (let newCol = 0; newCol < 8; newCol++) {\n          if (isValidMove(piece, row, col, newRow, newCol, board) && isPathClear(board, row, col, newRow, newCol, piece)) {\n            const newBoard = JSON.parse(JSON.stringify(board));\n            newBoard[newRow][newCol] = piece;\n            newBoard[row][col] = \"\";\n            if (!isKingInCheck(newBoard, isWhite)) {\n              console.log(`✅ Tìm thấy một nước thoát tại (${row}, ${col}) → (${newRow}, ${newCol})`);\n              return false;\n            }\n          }\n        }\n      }\n    }\n  }\n  console.log(`🏆 Chiếu hết! Không còn nước nào hợp lệ.`);\n  return true;\n};","map":{"version":3,"names":["isValidMove","findKingPosition","board","isWhite","row","col","isEnemyPiece","piece","whitePieces","blackPieces","includes","isPathClear","startRow","startCol","endRow","endCol","step","c","r","rowStep","colStep","isKingInCheck","kingColor","kingPosition","type","color","possibleMoves","getValidMoves","some","move","canKingEscape","kingPos","directions","dx","dy","newRow","newCol","tempBoard","JSON","parse","stringify","console","log","isCheckmate","isFriendly","newBoard"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/checkmate.js"],"sourcesContent":["import { isValidMove } from \"./moveRules\"; // Import luật di chuyển\r\n\r\n// 📍 Tìm vị trí của vua trên bàn cờ\r\nexport const findKingPosition = (board, isWhite) => {\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === (isWhite ? \"♔\" : \"♚\")) {\r\n        return { row, col };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// 📍 Kiểm tra xem quân cờ có phải là quân địch không\r\nconst isEnemyPiece = (piece, isWhite) => {\r\n  const whitePieces = [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\"];\r\n  const blackPieces = [\"♟\", \"♜\", \"♞\", \"♝\", \"♛\", \"♚\"];\r\n  return isWhite ? blackPieces.includes(piece) : whitePieces.includes(piece);\r\n};\r\n\r\n// 📍 Kiểm tra đường đi có bị cản trở không (áp dụng cho xe, tượng, hậu)\r\nconst isPathClear = (board, startRow, startCol, endRow, endCol, piece) => {\r\n  if ([\"♖\", \"♜\"].includes(piece)) { // Xe\r\n    if (startRow === endRow) {\r\n      let step = startCol < endCol ? 1 : -1;\r\n      for (let c = startCol + step; c !== endCol; c += step) {\r\n        if (board[startRow][c] !== \"\") return false;\r\n      }\r\n    } else if (startCol === endCol) {\r\n      let step = startRow < endRow ? 1 : -1;\r\n      for (let r = startRow + step; r !== endRow; r += step) {\r\n        if (board[r][startCol] !== \"\") return false;\r\n      }\r\n    }\r\n  } else if ([\"♗\", \"♝\", \"♕\", \"♛\"].includes(piece)) { // Tượng / Hậu\r\n    let rowStep = startRow < endRow ? 1 : -1;\r\n    let colStep = startCol < endCol ? 1 : -1;\r\n    let r = startRow + rowStep;\r\n    let c = startCol + colStep;\r\n    while (r !== endRow && c !== endCol) {\r\n      if (board[r][c] !== \"\") return false;\r\n      r += rowStep;\r\n      c += colStep;\r\n    }\r\n  }\r\n  return true; // Không bị cản trở\r\n};\r\n\r\n\r\n// Kiểm tra xem vua có đang bị chiếu không\r\nconst isKingInCheck = (board, kingColor) => {\r\n  let kingPosition = null;\r\n  \r\n  // Tìm vị trí của vua\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (piece && piece.type === \"king\" && piece.color === kingColor) {\r\n        kingPosition = { row, col };\r\n      }\r\n    }\r\n  }\r\n\r\n  if (!kingPosition) return false; // Nếu không tìm thấy vua, tránh lỗi\r\n\r\n  // Kiểm tra xem có quân nào đang tấn công vị trí vua không\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (piece && piece.color !== kingColor) {\r\n        const possibleMoves = getValidMoves(board, row, col); // Hàm kiểm tra nước đi hợp lệ\r\n        if (possibleMoves.some(move => move.row === kingPosition.row && move.col === kingPosition.col)) {\r\n          return true; // Vua đang bị chiếu\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n\r\n\r\n// 📍 Kiểm tra xem vua có thể thoát chiếu không\r\nconst canKingEscape = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false;\r\n\r\n  const { row, col } = kingPos;\r\n  const directions = [\r\n    [-1, -1], [-1, 0], [-1, 1], \r\n    [0, -1],          [0, 1], \r\n    [1, -1], [1, 0], [1, 1]\r\n  ]; \r\n\r\n  for (const [dx, dy] of directions) {\r\n    const newRow = row + dx;\r\n    const newCol = col + dy;\r\n\r\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n      if (board[newRow][newCol] === \"\" || isEnemyPiece(board[newRow][newCol], isWhite)) {\r\n        const tempBoard = JSON.parse(JSON.stringify(board));\r\n        tempBoard[newRow][newCol] = tempBoard[row][col];\r\n        tempBoard[row][col] = \"\";\r\n\r\n        if (!isKingInCheck(tempBoard, isWhite)) {\r\n          console.log(`✅ Vua có thể thoát đến (${newRow}, ${newCol})`);\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// 📍 Kiểm tra chiếu hết (Checkmate)\r\nexport const isCheckmate = (board, isWhite) => {\r\n  if (!isKingInCheck(board, isWhite)) return false;\r\n\r\n  console.log(`🔎 Kiểm tra chiếu hết cho vua ${isWhite ? \"trắng\" : \"đen\"}...`);\r\n\r\n  if (canKingEscape(board, isWhite)) return false;\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (!piece) continue;\r\n\r\n      const isFriendly = isWhite\r\n        ? [\"♙\", \"♖\", \"♘\", \"♗\", \"♕\", \"♔\"].includes(piece)\r\n        : [\"♟\", \"♜\", \"♞\", \"♝\", \"♛\", \"♚\"].includes(piece);\r\n\r\n      if (!isFriendly) continue;\r\n\r\n      for (let newRow = 0; newRow < 8; newRow++) {\r\n        for (let newCol = 0; newCol < 8; newCol++) {\r\n          if (isValidMove(piece, row, col, newRow, newCol, board) &&\r\n              isPathClear(board, row, col, newRow, newCol, piece)) {\r\n            \r\n            const newBoard = JSON.parse(JSON.stringify(board));\r\n            newBoard[newRow][newCol] = piece;\r\n            newBoard[row][col] = \"\";\r\n\r\n            if (!isKingInCheck(newBoard, isWhite)) {\r\n              console.log(`✅ Tìm thấy một nước thoát tại (${row}, ${col}) → (${newRow}, ${newCol})`);\r\n              return false;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(`🏆 Chiếu hết! Không còn nước nào hợp lệ.`);\r\n  return true;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}