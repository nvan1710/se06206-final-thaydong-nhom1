{"ast":null,"code":"let currentTurn = true; // true là Trắng, false là Đen\n\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== currentTurn) return false;\n  const targetPiece = board[toRow][toCol];\n\n  // Không thể đi vào ô chứa quân đồng minh\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\n  let validMove = false;\n  switch (piece) {\n    case \"♙\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n      break;\n    case \"♟\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n      break;\n    case \"♖\":\n    case \"♜\":\n      validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♘\":\n    case \"♞\":\n      validMove = isValidKnightMove(toCol - fromCol, toRow - fromRow);\n      break;\n    case \"♗\":\n    case \"♝\":\n      validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♕\":\n    case \"♛\":\n      validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♔\":\n    case \"♚\":\n      validMove = isValidKingMove(toCol - fromCol, toRow - fromRow);\n      break;\n    default:\n      return false;\n  }\n  if (validMove) {\n    // Giả lập bàn cờ sau nước đi\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n\n    // Kiểm tra nước đi có làm vua bị chiếu không\n    if (isKingInCheck(newBoard, isWhite)) return false;\n    return true;\n  }\n  return false;\n};\n\n// ✅ Tốt (Pawn) - Kiểm tra ăn chéo hợp lệ\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  const targetPiece = board[toRow][toCol];\n\n  // Đi thẳng (không có quân cản)\n  if (dx === 0 && !targetPiece) {\n    if (dy === direction) return true;\n    if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\n      return true;\n    }\n  }\n\n  // Ăn chéo (chỉ khi có quân đối thủ)\n  if (dx === 1 && dy === direction && targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) !== isWhite) {\n    return true;\n  }\n  return false;\n};\n\n// ✅ Xe (Rook) - Kiểm tra đường đi hợp lệ\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Mã (Knight)\nconst isValidKnightMove = (dx, dy) => {\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n};\n\n// ✅ Tượng (Bishop)\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Hậu (Queen)\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Vua (King)\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// ✅ Kiểm tra đường đi rõ ràng\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x] !== \"\") return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\n\n// ✅ Xác định vị trí vua\nconst findKingPosition = (board, isWhite) => {\n  const king = isWhite ? \"♔\" : \"♚\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) return {\n        row,\n        col\n      };\n    }\n  }\n  return null;\n};\n\n// ✅ Kiểm tra vua có bị chiếu không\nconst isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false;\n  const {\n    row: kingRow,\n    col: kingCol\n  } = kingPos;\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n      const isEnemy = \"♙♖♘♗♕♔\".includes(piece) !== isWhite;\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// ✅ Hàm di chuyển quân cờ (đổi lượt đúng cách)\nexport const movePiece = (fromRow, fromCol, toRow, toCol, board) => {\n  if (isValidMove(board[fromRow][fromCol], fromRow, fromCol, toRow, toCol, board)) {\n    board[toRow][toCol] = board[fromRow][fromCol];\n    board[fromRow][fromCol] = \"\";\n    currentTurn = !currentTurn; // Đổi lượt sau khi di chuyển hợp lệ\n    renderBoard();\n  }\n};","map":{"version":3,"names":["currentTurn","isValidMove","piece","fromRow","fromCol","toRow","toCol","board","isWhite","includes","targetPiece","validMove","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","newBoard","map","row","isKingInCheck","direction","startRow","dy","dx","Math","abs","isPathClear","sign","x","y","findKingPosition","king","col","kingPos","kingRow","kingCol","isEnemy","movePiece","renderBoard"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["let currentTurn = true; // true là Trắng, false là Đen\n\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== currentTurn) return false;\n\n  const targetPiece = board[toRow][toCol];\n\n  // Không thể đi vào ô chứa quân đồng minh\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\n\n  let validMove = false;\n  switch (piece) {\n    case \"♙\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true); break;\n    case \"♟\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false); break;\n    case \"♖\": case \"♜\": validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♘\": case \"♞\": validMove = isValidKnightMove(toCol - fromCol, toRow - fromRow); break;\n    case \"♗\": case \"♝\": validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♕\": case \"♛\": validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board); break;\n    case \"♔\": case \"♚\": validMove = isValidKingMove(toCol - fromCol, toRow - fromRow); break;\n    default: return false;\n  }\n\n  if (validMove) {\n    // Giả lập bàn cờ sau nước đi\n    const newBoard = board.map((row) => [...row]);\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n\n    // Kiểm tra nước đi có làm vua bị chiếu không\n    if (isKingInCheck(newBoard, isWhite)) return false;\n    return true;\n  }\n\n  return false;\n};\n\n// ✅ Tốt (Pawn) - Kiểm tra ăn chéo hợp lệ\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  const targetPiece = board[toRow][toCol];\n\n  // Đi thẳng (không có quân cản)\n  if (dx === 0 && !targetPiece) {\n    if (dy === direction) return true;\n    if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\n      return true;\n    }\n  }\n\n  // Ăn chéo (chỉ khi có quân đối thủ)\n  if (dx === 1 && dy === direction && targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) !== isWhite) {\n    return true;\n  }\n\n  return false;\n};\n\n// ✅ Xe (Rook) - Kiểm tra đường đi hợp lệ\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Mã (Knight)\nconst isValidKnightMove = (dx, dy) => {\n  return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n};\n\n// ✅ Tượng (Bishop)\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Hậu (Queen)\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return (\n    isValidRookMove(fromRow, fromCol, toRow, toCol, board) ||\n    isValidBishopMove(fromRow, fromCol, toRow, toCol, board)\n  );\n};\n\n// ✅ Vua (King)\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// ✅ Kiểm tra đường đi rõ ràng\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) { \n    if (board[y][x] !== \"\") return false; \n    x += dx;\n    y += dy;\n  }\n\n  return true;\n};\n\n// ✅ Xác định vị trí vua\nconst findKingPosition = (board, isWhite) => {\n  const king = isWhite ? \"♔\" : \"♚\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) return { row, col };\n    }\n  }\n  return null;\n};\n\n// ✅ Kiểm tra vua có bị chiếu không\nconst isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false;\n\n  const { row: kingRow, col: kingCol } = kingPos;\n\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n\n      const isEnemy = \"♙♖♘♗♕♔\".includes(piece) !== isWhite;\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n\n// ✅ Hàm di chuyển quân cờ (đổi lượt đúng cách)\nexport const movePiece = (fromRow, fromCol, toRow, toCol, board) => {\n  if (isValidMove(board[fromRow][fromCol], fromRow, fromCol, toRow, toCol, board)) {\n    board[toRow][toCol] = board[fromRow][fromCol];\n    board[fromRow][fromCol] = \"\";\n    currentTurn = !currentTurn; // Đổi lượt sau khi di chuyển hợp lệ\n    renderBoard();\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}