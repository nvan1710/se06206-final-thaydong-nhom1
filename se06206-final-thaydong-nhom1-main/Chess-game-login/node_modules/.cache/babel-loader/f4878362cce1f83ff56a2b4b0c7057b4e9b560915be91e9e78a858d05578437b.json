{"ast":null,"code":"var _jsxFileName = \"D:\\\\se06206-final-thaydong-nhom1-main\\\\se06206-final-thaydong-nhom1-main\\\\Chess-game-login\\\\src\\\\components\\\\ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { isValidMove } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\";\nimport pieceImages from \"../assets/pieceImages\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  PIECE: \"piece\"\n};\nconst Square = ({\n  piece,\n  row,\n  col,\n  onClick,\n  isHighlighted,\n  isKingInCheck\n}) => {\n  const isDark = (row + col) % 2 === 1;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onClick: () => onClick(row, col),\n    className: `w-16 h-16 flex justify-center items-center cursor-pointer \n        ${isDark ? \"bg-[#9A6553]\" : \"bg-[#D5B793]\"} \n        ${isKingInCheck ? \"border-4 border-red-500\" : \"\"} \n        ${isHighlighted ? \"bg-green-400\" : \"\"} \n      `,\n    children: piece && pieceImages[piece] && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: pieceImages[piece],\n      alt: piece,\n      className: \"w-12 h-12 object-contain\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n_c = Square;\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n  const handleSquareClick = (row, col) => {\n    const piece = board[row][col];\n    if (selectedPiece) {\n      // Nếu đã chọn quân cờ và bấm vào ô hợp lệ -> di chuyển quân cờ\n      if (validMoves.some(move => move.row === row && move.col === col)) {\n        movePiece(selectedPiece.row, selectedPiece.col, row, col);\n        setSelectedPiece(null);\n        setValidMoves([]);\n        return;\n      } else {\n        // Nếu bấm vào quân khác -> chọn lại\n        setSelectedPiece(null);\n        setValidMoves([]);\n      }\n    }\n\n    // Nếu bấm vào quân cờ mới, tìm ô hợp lệ\n    if (piece) {\n      const possibleMoves = [];\n      for (let r = 0; r < 8; r++) {\n        for (let c = 0; c < 8; c++) {\n          if (isValidMove(piece, row, col, r, c, board)) {\n            possibleMoves.push({\n              row: r,\n              col: c\n            });\n          }\n        }\n      }\n      if (possibleMoves.length > 0) {\n        setSelectedPiece({\n          row,\n          col\n        });\n        setValidMoves(possibleMoves);\n      }\n    }\n  };\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard(prevBoard => {\n      const newBoard = prevBoard.map(row => [...row]);\n      const piece = newBoard[fromRow][fromCol];\n      if (isValidMove(piece, fromRow, fromCol, toRow, toCol, newBoard)) {\n        newBoard[toRow][toCol] = piece;\n        newBoard[fromRow][fromCol] = \"\";\n        const isWhiteTurn = \"♙♖♘♗♕♔\".includes(piece);\n        const isNowCheck = isKingInCheck(newBoard, !isWhiteTurn);\n        setIsCheck(isNowCheck);\n        if (isNowCheck) {\n          setCheckedKing(findKingPosition(newBoard, !isWhiteTurn));\n        } else {\n          setCheckedKing(null);\n        }\n        setIsCheckMate(isCheckmate(newBoard, !isWhiteTurn));\n        return newBoard;\n      }\n      return prevBoard;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col justify-center items-center bg-gray-200\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-2xl font-bold mb-4\",\n      children: \"\\u265F\\uFE0F Chess Game \\u265F\\uFE0F\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), isCheck && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-600 text-lg font-bold\",\n      children: \"\\uD83D\\uDD25 Vua \\u0111ang b\\u1ECB chi\\u1EBFu! \\uD83D\\uDD25\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }, this), isCheckMate && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-red-800 text-lg font-bold\",\n      children: \"\\uD83C\\uDFC6 Chi\\u1EBFu h\\u1EBFt! Tr\\xF2 ch\\u01A1i k\\u1EBFt th\\xFAc \\uD83C\\uDFC6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-8 border-4 border-black shadow-lg\",\n      children: board.map((row, rowIndex) => row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(Square, {\n        piece: piece,\n        row: rowIndex,\n        col: colIndex,\n        onClick: handleSquareClick,\n        isHighlighted: validMoves.some(m => m.row === rowIndex && m.col === colIndex),\n        isKingInCheck: (checkedKing === null || checkedKing === void 0 ? void 0 : checkedKing.row) === rowIndex && (checkedKing === null || checkedKing === void 0 ? void 0 : checkedKing.col) === colIndex\n      }, `${rowIndex}-${colIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 13\n      }, this)))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"m11/vogkP0fcK/CTyuGt2GHGfeU=\");\n_c2 = Chessboard;\nexport default Chessboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Chessboard\");","map":{"version":3,"names":["React","useState","useDrag","useDrop","DndProvider","HTML5Backend","isValidMove","initialBoardSetup","isKingInCheck","isCheckmate","findKingPosition","pieceImages","jsxDEV","_jsxDEV","ItemTypes","PIECE","Square","piece","row","col","onClick","isHighlighted","isDark","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","Chessboard","_s","board","setBoard","selectedPiece","setSelectedPiece","validMoves","setValidMoves","isCheck","setIsCheck","isCheckMate","setIsCheckMate","checkedKing","setCheckedKing","handleSquareClick","some","move","movePiece","possibleMoves","r","c","push","length","fromRow","fromCol","toRow","toCol","prevBoard","newBoard","map","isWhiteTurn","includes","isNowCheck","rowIndex","colIndex","m","_c2","$RefreshReg$"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/components/ChessBoard.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { isValidMove } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\"; \nimport pieceImages from \"../assets/pieceImages\";\n\nconst ItemTypes = { PIECE: \"piece\" };\n\nconst Square = ({ piece, row, col, onClick, isHighlighted, isKingInCheck }) => {\n  const isDark = (row + col) % 2 === 1;\n\n  return (\n    <div\n      onClick={() => onClick(row, col)}\n      className={`w-16 h-16 flex justify-center items-center cursor-pointer \n        ${isDark ? \"bg-[#9A6553]\" : \"bg-[#D5B793]\"} \n        ${isKingInCheck ? \"border-4 border-red-500\" : \"\"} \n        ${isHighlighted ? \"bg-green-400\" : \"\"} \n      `}\n    >\n      {piece && pieceImages[piece] && (\n        <img\n          src={pieceImages[piece]}\n          alt={piece}\n          className=\"w-12 h-12 object-contain\"\n        />\n      )}\n    </div>\n  );\n};\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n\n  const handleSquareClick = (row, col) => {\n    const piece = board[row][col];\n\n    if (selectedPiece) {\n      // Nếu đã chọn quân cờ và bấm vào ô hợp lệ -> di chuyển quân cờ\n      if (validMoves.some(move => move.row === row && move.col === col)) {\n        movePiece(selectedPiece.row, selectedPiece.col, row, col);\n        setSelectedPiece(null);\n        setValidMoves([]);\n        return;\n      } else {\n        // Nếu bấm vào quân khác -> chọn lại\n        setSelectedPiece(null);\n        setValidMoves([]);\n      }\n    }\n\n    // Nếu bấm vào quân cờ mới, tìm ô hợp lệ\n    if (piece) {\n      const possibleMoves = [];\n      for (let r = 0; r < 8; r++) {\n        for (let c = 0; c < 8; c++) {\n          if (isValidMove(piece, row, col, r, c, board)) {\n            possibleMoves.push({ row: r, col: c });\n          }\n        }\n      }\n\n      if (possibleMoves.length > 0) {\n        setSelectedPiece({ row, col });\n        setValidMoves(possibleMoves);\n      }\n    }\n  };\n\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard((prevBoard) => {\n      const newBoard = prevBoard.map(row => [...row]);\n      const piece = newBoard[fromRow][fromCol];\n\n      if (isValidMove(piece, fromRow, fromCol, toRow, toCol, newBoard)) {\n        newBoard[toRow][toCol] = piece;\n        newBoard[fromRow][fromCol] = \"\";\n\n        const isWhiteTurn = \"♙♖♘♗♕♔\".includes(piece);\n        const isNowCheck = isKingInCheck(newBoard, !isWhiteTurn);\n        setIsCheck(isNowCheck);\n\n        if (isNowCheck) {\n          setCheckedKing(findKingPosition(newBoard, !isWhiteTurn));\n        } else {\n          setCheckedKing(null);\n        }\n\n        setIsCheckMate(isCheckmate(newBoard, !isWhiteTurn));\n\n        return newBoard;\n      }\n\n      return prevBoard;\n    });\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col justify-center items-center bg-gray-200\">\n      <h1 className=\"text-2xl font-bold mb-4\">♟️ Chess Game ♟️</h1>\n\n      {isCheck && <div className=\"text-red-600 text-lg font-bold\">🔥 Vua đang bị chiếu! 🔥</div>}\n      {isCheckMate && <div className=\"text-red-800 text-lg font-bold\">🏆 Chiếu hết! Trò chơi kết thúc 🏆</div>}\n\n      <div className=\"grid grid-cols-8 border-4 border-black shadow-lg\">\n        {board.map((row, rowIndex) =>\n          row.map((piece, colIndex) => (\n            <Square\n              key={`${rowIndex}-${colIndex}`}\n              piece={piece}\n              row={rowIndex}\n              col={colIndex}\n              onClick={handleSquareClick}\n              isHighlighted={validMoves.some(m => m.row === rowIndex && m.col === colIndex)}\n              isKingInCheck={checkedKing?.row === rowIndex && checkedKing?.col === colIndex}\n            />\n          ))\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Chessboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}