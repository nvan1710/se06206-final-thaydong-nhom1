{"ast":null,"code":"let currentTurn = true; // true là Trắng, false là Đen\nexport const getValidMoves = (piece, row, col, board) => {\n  const moves = [];\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\n\n  switch (piece) {\n    case \"♙\": // Tốt trắng\n    case \"♟\":\n      // Tốt đen\n      if (!board[row + direction][col]) {\n        moves.push({\n          row: row + direction,\n          col\n        });\n        if (isWhite && row === 6 || !isWhite && row === 1) {\n          if (!board[row + 2 * direction][col]) {\n            moves.push({\n              row: row + 2 * direction,\n              col\n            });\n          }\n        }\n      }\n      if (col > 0 && board[row + direction][col - 1] && isOpponent(piece, board[row + direction][col - 1])) {\n        moves.push({\n          row: row + direction,\n          col: col - 1\n        });\n      }\n      if (col < 7 && board[row + direction][col + 1] && isOpponent(piece, board[row + direction][col + 1])) {\n        moves.push({\n          row: row + direction,\n          col: col + 1\n        });\n      }\n      break;\n    case \"♖\":\n    case \"♜\":\n      // Xe\n      moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1]]));\n      break;\n    case \"♘\":\n    case \"♞\":\n      // Mã\n      moves.push(...getKnightMoves(row, col, board));\n      break;\n    case \"♗\":\n    case \"♝\":\n      // Tượng\n      moves.push(...getLinearMoves(row, col, board, [[-1, -1], [-1, 1], [1, -1], [1, 1]]));\n      break;\n    case \"♕\":\n    case \"♛\":\n      // Hậu\n      moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]]));\n      break;\n    case \"♔\":\n    case \"♚\":\n      // Vua\n      moves.push(...getKingMoves(row, col, board));\n      break;\n  }\n  return moves;\n};\n\n// Kiểm tra xem có phải quân địch không\nconst isOpponent = (piece, targetPiece) => {\n  return targetPiece && \"♙♖♘♗♕♔\".includes(piece) !== \"♙♖♘♗♕♔\".includes(targetPiece);\n};\n\n// Lấy nước đi tuyến tính (dùng cho Xe, Tượng, Hậu)\nconst getLinearMoves = (row, col, board, directions) => {\n  const moves = [];\n  directions.forEach(([dr, dc]) => {\n    let r = row + dr,\n      c = col + dc;\n    while (r >= 0 && r < 8 && c >= 0 && c < 8) {\n      if (!board[r][c]) {\n        moves.push({\n          row: r,\n          col: c\n        });\n      } else {\n        if (isOpponent(board[row][col], board[r][c])) {\n          moves.push({\n            row: r,\n            col: c\n          });\n        }\n        break;\n      }\n      r += dr;\n      c += dc;\n    }\n  });\n  return moves;\n};\n\n// Lấy nước đi của Mã\nconst getKnightMoves = (row, col, board) => {\n  const moves = [];\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\n  knightMoves.forEach(([dr, dc]) => {\n    const r = row + dr,\n      c = col + dc;\n    if (r >= 0 && r < 8 && c >= 0 && c < 8) {\n      if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\n        moves.push({\n          row: r,\n          col: c\n        });\n      }\n    }\n  });\n  return moves;\n};\n\n// Lấy nước đi của Vua\nconst getKingMoves = (row, col, board) => {\n  const moves = [];\n  const kingMoves = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\n  kingMoves.forEach(([dr, dc]) => {\n    const r = row + dr,\n      c = col + dc;\n    if (r >= 0 && r < 8 && c >= 0 && c < 8) {\n      if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\n        moves.push({\n          row: r,\n          col: c\n        });\n      }\n    }\n  });\n  return moves;\n};\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (isWhite !== currentTurn) return false;\n  const targetPiece = board[toRow][toCol];\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\n  let validMove = false;\n  switch (piece) {\n    case \"♙\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n      break;\n    case \"♟\":\n      validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n      break;\n    case \"♖\":\n    case \"♜\":\n      validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♘\":\n    case \"♞\":\n      validMove = isValidKnightMove(dx, dy);\n      break;\n    case \"♗\":\n    case \"♝\":\n      validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♕\":\n    case \"♛\":\n      validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n      break;\n    case \"♔\":\n    case \"♚\":\n      validMove = isValidKingMove(dx, dy);\n      break;\n    default:\n      return false;\n  }\n  if (validMove) {\n    // Giả lập bàn cờ mới sau nước đi\n    const newBoard = board.map(row => [...row]);\n    newBoard[toRow][toCol] = piece;\n    newBoard[fromRow][fromCol] = \"\";\n\n    // Kiểm tra nếu nước đi làm vua bị chiếu => không hợp lệ\n    if (isKingInCheck(newBoard, isWhite)) return false;\n    currentTurn = !currentTurn; // Đổi lượt\n    return true;\n  }\n  return false;\n};\n\n// ✅ Tốt (Pawn) - sửa lại kiểm tra nhảy 2 ô & ăn chéo hợp lệ\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  const targetPiece = board[toRow][toCol];\n\n  // Di chuyển thẳng (không được có quân cờ chặn)\n  if (dx === 0 && !targetPiece) {\n    if (dy === direction) return true; // Đi 1 ô hợp lệ\n    if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\n      return true; // Đi 2 ô từ vị trí ban đầu hợp lệ (không nhảy qua quân cờ)\n    }\n  }\n\n  // Ăn quân chéo (chỉ khi có quân địch ở ô đích)\n  if (dx === 1 && dy === direction && targetPiece) {\n    return true;\n  }\n  return false;\n};\n\n// ✅ Xe (Rook) - đảm bảo có thể ăn quân đối thủ hợp lệ\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Mã (Knight) - không cần sửa (nước đi đã đúng)\nconst isValidKnightMove = (dx, dy) => {\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n};\n\n// ✅ Tượng (Bishop) - đảm bảo không bị chặn đường đi\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Hậu (Queen) - kết hợp Xe & Tượng\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\n\n// ✅ Vua (King) - giữ nguyên\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\n// ✅ Sửa lại kiểm tra đường đi isPathClear()\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x] !== \"\") return false; // Nếu có quân cờ chặn đường, không hợp lệ\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\nconst findKingPosition = (board, isWhite) => {\n  const king = isWhite ? \"♔\" : \"♚\";\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === king) return {\n        row,\n        col\n      };\n    }\n  }\n  return null;\n};\nconst isKingInCheck = (board, isWhiteTurn) => {\n  const kingPos = findKingPosition(board, isWhiteTurn);\n  if (!kingPos) return false; // Nếu không tìm thấy vua, trả về false\n\n  // Kiểm tra xem có quân đối phương nào có thể tấn công vua không\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && \"♙♖♘♗♕♔\".includes(piece) !== isWhiteTurn) {\n        const validMoves = getValidMoves(piece, row, col, board);\n        if (validMoves.some(move => move.row === kingPos.row && move.col === kingPos.col)) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n// Kiểm tra xem vua có thể thoát chiếu hay không\nconst canKingEscape = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false;\n  const kingMoves = getKingMoves(kingPos.row, kingPos.col, board);\n  return kingMoves.some(move => {\n    const newBoard = board.map(row => [...row]);\n    newBoard[move.row][move.col] = isWhite ? \"♔\" : \"♚\";\n    newBoard[kingPos.row][kingPos.col] = \"\";\n    return !isKingInCheck(newBoard, isWhite);\n  });\n};\n\n// Kiểm tra nếu có quân nào có thể chặn hoặc ăn quân đang chiếu vua\nconst canBlockOrCapture = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false;\n  let attackers = [];\n  // Xác định tất cả quân cờ đang chiếu vua\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && \"♙♖♘♗♕♔\".includes(piece) !== isWhite) {\n        const moves = getValidMoves(piece, row, col, board);\n        if (moves.some(move => move.row === kingPos.row && move.col === kingPos.col)) {\n          attackers.push({\n            row,\n            col\n          });\n        }\n      }\n    }\n  }\n\n  // Nếu có nhiều hơn 1 quân chiếu, không thể chặn => Checkmate\n  if (attackers.length > 1) return false;\n\n  // Nếu chỉ có 1 quân chiếu, kiểm tra có thể ăn hoặc chặn không\n  const attacker = attackers[0];\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (piece && \"♙♖♘♗♕♔\".includes(piece) === isWhite) {\n        const moves = getValidMoves(piece, row, col, board);\n        if (moves.some(move => move.row === attacker.row && move.col === attacker.col)) {\n          return true; // Có thể ăn quân đang chiếu\n        }\n      }\n    }\n  }\n  return false;\n};","map":{"version":3,"names":["currentTurn","getValidMoves","piece","row","col","board","moves","isWhite","includes","direction","push","isOpponent","getLinearMoves","getKnightMoves","getKingMoves","targetPiece","directions","forEach","dr","dc","r","c","knightMoves","kingMoves","isValidMove","fromRow","fromCol","toRow","toCol","dx","dy","validMove","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","newBoard","map","isKingInCheck","startRow","Math","abs","isPathClear","sign","x","y","findKingPosition","king","isWhiteTurn","kingPos","validMoves","some","move","canKingEscape","canBlockOrCapture","attackers","length","attacker"],"sources":["C:/Users/admin/se06206-final-thaydong-nhom1/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["let currentTurn = true; // true là Trắng, false là Đen\r\nexport const getValidMoves = (piece, row, col, board) => {\r\n  const moves = [];\r\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\r\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\r\n\r\n  switch (piece) {\r\n    case \"♙\": // Tốt trắng\r\n    case \"♟\": // Tốt đen\r\n      if (!board[row + direction][col]) {\r\n        moves.push({ row: row + direction, col });\r\n        if ((isWhite && row === 6) || (!isWhite && row === 1)) {\r\n          if (!board[row + 2 * direction][col]) {\r\n            moves.push({ row: row + 2 * direction, col });\r\n          }\r\n        }\r\n      }\r\n      if (col > 0 && board[row + direction][col - 1] && isOpponent(piece, board[row + direction][col - 1])) {\r\n        moves.push({ row: row + direction, col: col - 1 });\r\n      }\r\n      if (col < 7 && board[row + direction][col + 1] && isOpponent(piece, board[row + direction][col + 1])) {\r\n        moves.push({ row: row + direction, col: col + 1 });\r\n      }\r\n      break;\r\n\r\n    case \"♖\": case \"♜\": // Xe\r\n      moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1]]));\r\n      break;\r\n\r\n    case \"♘\": case \"♞\": // Mã\r\n      moves.push(...getKnightMoves(row, col, board));\r\n      break;\r\n\r\n    case \"♗\": case \"♝\": // Tượng\r\n      moves.push(...getLinearMoves(row, col, board, [[-1, -1], [-1, 1], [1, -1], [1, 1]]));\r\n      break;\r\n\r\n    case \"♕\": case \"♛\": // Hậu\r\n      moves.push(...getLinearMoves(row, col, board, [[-1, 0], [1, 0], [0, -1], [0, 1], [-1, -1], [-1, 1], [1, -1], [1, 1]]));\r\n      break;\r\n\r\n    case \"♔\": case \"♚\": // Vua\r\n      moves.push(...getKingMoves(row, col, board));\r\n      break;\r\n  }\r\n\r\n  return moves;\r\n};\r\n\r\n// Kiểm tra xem có phải quân địch không\r\nconst isOpponent = (piece, targetPiece) => {\r\n  return targetPiece && (\"♙♖♘♗♕♔\".includes(piece) !== \"♙♖♘♗♕♔\".includes(targetPiece));\r\n};\r\n\r\n// Lấy nước đi tuyến tính (dùng cho Xe, Tượng, Hậu)\r\nconst getLinearMoves = (row, col, board, directions) => {\r\n  const moves = [];\r\n  directions.forEach(([dr, dc]) => {\r\n    let r = row + dr, c = col + dc;\r\n    while (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      if (!board[r][c]) {\r\n        moves.push({ row: r, col: c });\r\n      } else {\r\n        if (isOpponent(board[row][col], board[r][c])) {\r\n          moves.push({ row: r, col: c });\r\n        }\r\n        break;\r\n      }\r\n      r += dr;\r\n      c += dc;\r\n    }\r\n  });\r\n  return moves;\r\n};\r\n\r\n// Lấy nước đi của Mã\r\nconst getKnightMoves = (row, col, board) => {\r\n  const moves = [];\r\n  const knightMoves = [[-2, -1], [-2, 1], [2, -1], [2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2]];\r\n  knightMoves.forEach(([dr, dc]) => {\r\n    const r = row + dr, c = col + dc;\r\n    if (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\r\n        moves.push({ row: r, col: c });\r\n      }\r\n    }\r\n  });\r\n  return moves;\r\n};\r\n\r\n// Lấy nước đi của Vua\r\nconst getKingMoves = (row, col, board) => {\r\n  const moves = [];\r\n  const kingMoves = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]];\r\n  kingMoves.forEach(([dr, dc]) => {\r\n    const r = row + dr, c = col + dc;\r\n    if (r >= 0 && r < 8 && c >= 0 && c < 8) {\r\n      if (!board[r][c] || isOpponent(board[row][col], board[r][c])) {\r\n        moves.push({ row: r, col: c });\r\n      }\r\n    }\r\n  });\r\n  return moves;\r\n};\r\n\r\n\r\n\r\nexport const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\r\n  const dx = toCol - fromCol;\r\n  const dy = toRow - fromRow;\r\n\r\n  if (fromRow === toRow && fromCol === toCol) return false;\r\n\r\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\r\n  if (isWhite !== currentTurn) return false;\r\n\r\n  const targetPiece = board[toRow][toCol];\r\n\r\n  if (targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece) === isWhite) return false;\r\n\r\n  let validMove = false;\r\n  switch (piece) {\r\n    case \"♙\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true); break;\r\n    case \"♟\": validMove = isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false); break;\r\n    case \"♖\": case \"♜\": validMove = isValidRookMove(fromRow, fromCol, toRow, toCol, board); break;\r\n    case \"♘\": case \"♞\": validMove = isValidKnightMove(dx, dy); break;\r\n    case \"♗\": case \"♝\": validMove = isValidBishopMove(fromRow, fromCol, toRow, toCol, board); break;\r\n    case \"♕\": case \"♛\": validMove = isValidQueenMove(fromRow, fromCol, toRow, toCol, board); break;\r\n    case \"♔\": case \"♚\": validMove = isValidKingMove(dx, dy); break;\r\n    default: return false;\r\n  }\r\n\r\n  if (validMove) {\r\n    // Giả lập bàn cờ mới sau nước đi\r\n    const newBoard = board.map((row) => [...row]);\r\n    newBoard[toRow][toCol] = piece;\r\n    newBoard[fromRow][fromCol] = \"\";\r\n\r\n    // Kiểm tra nếu nước đi làm vua bị chiếu => không hợp lệ\r\n    if (isKingInCheck(newBoard, isWhite)) return false;\r\n\r\n    currentTurn = !currentTurn; // Đổi lượt\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n// ✅ Tốt (Pawn) - sửa lại kiểm tra nhảy 2 ô & ăn chéo hợp lệ\r\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\r\n  const direction = isWhite ? -1 : 1; // Trắng đi lên (-1), Đen đi xuống (+1)\r\n  const startRow = isWhite ? 6 : 1;\r\n  const dy = toRow - fromRow;\r\n  const dx = Math.abs(toCol - fromCol);\r\n  const targetPiece = board[toRow][toCol];\r\n\r\n  // Di chuyển thẳng (không được có quân cờ chặn)\r\n  if (dx === 0 && !targetPiece) {\r\n      if (dy === direction) return true; // Đi 1 ô hợp lệ\r\n      if (fromRow === startRow && dy === 2 * direction && !board[fromRow + direction][toCol]) {\r\n          return true; // Đi 2 ô từ vị trí ban đầu hợp lệ (không nhảy qua quân cờ)\r\n      }\r\n  }\r\n\r\n  // Ăn quân chéo (chỉ khi có quân địch ở ô đích)\r\n  if (dx === 1 && dy === direction && targetPiece) {\r\n      return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// ✅ Xe (Rook) - đảm bảo có thể ăn quân đối thủ hợp lệ\r\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\r\n  if (fromRow !== toRow && fromCol !== toCol) return false;\r\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\r\n};\r\n\r\n// ✅ Mã (Knight) - không cần sửa (nước đi đã đúng)\r\nconst isValidKnightMove = (dx, dy) => {\r\n  return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\r\n};\r\n\r\n// ✅ Tượng (Bishop) - đảm bảo không bị chặn đường đi\r\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\r\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\r\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\r\n};\r\n\r\n// ✅ Hậu (Queen) - kết hợp Xe & Tượng\r\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\r\n  return (\r\n      isValidRookMove(fromRow, fromCol, toRow, toCol, board) ||\r\n      isValidBishopMove(fromRow, fromCol, toRow, toCol, board)\r\n  );\r\n};\r\n\r\n// ✅ Vua (King) - giữ nguyên\r\nconst isValidKingMove = (dx, dy) => {\r\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\r\n};\r\n\r\n// ✅ Sửa lại kiểm tra đường đi isPathClear()\r\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\r\n  const dx = Math.sign(toCol - fromCol);\r\n  const dy = Math.sign(toRow - fromRow);\r\n  let x = fromCol + dx;\r\n  let y = fromRow + dy;\r\n\r\n  while (x !== toCol || y !== toRow) {\r\n      if (board[y][x] !== \"\") return false; // Nếu có quân cờ chặn đường, không hợp lệ\r\n      x += dx;\r\n      y += dy;\r\n  }\r\n\r\n  return true;\r\n};\r\nconst findKingPosition = (board, isWhite) => {\r\n  const king = isWhite ? \"♔\" : \"♚\";\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === king) return { row, col };\r\n    }\r\n  }\r\n  return null;\r\n};\r\nconst isKingInCheck = (board, isWhiteTurn) => {\r\n  const kingPos = findKingPosition(board, isWhiteTurn);\r\n  if (!kingPos) return false; // Nếu không tìm thấy vua, trả về false\r\n\r\n  // Kiểm tra xem có quân đối phương nào có thể tấn công vua không\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (piece && \"♙♖♘♗♕♔\".includes(piece) !== isWhiteTurn) {\r\n        const validMoves = getValidMoves(piece, row, col, board);\r\n        if (validMoves.some(move => move.row === kingPos.row && move.col === kingPos.col)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n// Kiểm tra xem vua có thể thoát chiếu hay không\r\nconst canKingEscape = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false;\r\n\r\n  const kingMoves = getKingMoves(kingPos.row, kingPos.col, board);\r\n  return kingMoves.some(move => {\r\n      const newBoard = board.map(row => [...row]);\r\n      newBoard[move.row][move.col] = isWhite ? \"♔\" : \"♚\";\r\n      newBoard[kingPos.row][kingPos.col] = \"\";\r\n      return !isKingInCheck(newBoard, isWhite);\r\n  });\r\n};\r\n\r\n// Kiểm tra nếu có quân nào có thể chặn hoặc ăn quân đang chiếu vua\r\nconst canBlockOrCapture = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false;\r\n\r\n  let attackers = [];\r\n  // Xác định tất cả quân cờ đang chiếu vua\r\n  for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n          const piece = board[row][col];\r\n          if (piece && \"♙♖♘♗♕♔\".includes(piece) !== isWhite) {\r\n              const moves = getValidMoves(piece, row, col, board);\r\n              if (moves.some(move => move.row === kingPos.row && move.col === kingPos.col)) {\r\n                  attackers.push({ row, col });\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  // Nếu có nhiều hơn 1 quân chiếu, không thể chặn => Checkmate\r\n  if (attackers.length > 1) return false;\r\n\r\n  // Nếu chỉ có 1 quân chiếu, kiểm tra có thể ăn hoặc chặn không\r\n  const attacker = attackers[0];\r\n  for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n          const piece = board[row][col];\r\n          if (piece && \"♙♖♘♗♕♔\".includes(piece) === isWhite) {\r\n              const moves = getValidMoves(piece, row, col, board);\r\n              if (moves.some(move => move.row === attacker.row && move.col === attacker.col)) {\r\n                  return true; // Có thể ăn quân đang chiếu\r\n              }\r\n          }\r\n      }\r\n  }\r\n\r\n  return false;\r\n};\r\n"],"mappings":"AAAA,IAAIA,WAAW,GAAG,IAAI,CAAC,CAAC;AACxB,OAAO,MAAMC,aAAa,GAAGA,CAACC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACvD,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,OAAO,GAAG,QAAQ,CAACC,QAAQ,CAACN,KAAK,CAAC;EACxC,MAAMO,SAAS,GAAGF,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;;EAEpC,QAAQL,KAAK;IACX,KAAK,GAAG,CAAC,CAAC;IACV,KAAK,GAAG;MAAE;MACR,IAAI,CAACG,KAAK,CAACF,GAAG,GAAGM,SAAS,CAAC,CAACL,GAAG,CAAC,EAAE;QAChCE,KAAK,CAACI,IAAI,CAAC;UAAEP,GAAG,EAAEA,GAAG,GAAGM,SAAS;UAAEL;QAAI,CAAC,CAAC;QACzC,IAAKG,OAAO,IAAIJ,GAAG,KAAK,CAAC,IAAM,CAACI,OAAO,IAAIJ,GAAG,KAAK,CAAE,EAAE;UACrD,IAAI,CAACE,KAAK,CAACF,GAAG,GAAG,CAAC,GAAGM,SAAS,CAAC,CAACL,GAAG,CAAC,EAAE;YACpCE,KAAK,CAACI,IAAI,CAAC;cAAEP,GAAG,EAAEA,GAAG,GAAG,CAAC,GAAGM,SAAS;cAAEL;YAAI,CAAC,CAAC;UAC/C;QACF;MACF;MACA,IAAIA,GAAG,GAAG,CAAC,IAAIC,KAAK,CAACF,GAAG,GAAGM,SAAS,CAAC,CAACL,GAAG,GAAG,CAAC,CAAC,IAAIO,UAAU,CAACT,KAAK,EAAEG,KAAK,CAACF,GAAG,GAAGM,SAAS,CAAC,CAACL,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE;QACpGE,KAAK,CAACI,IAAI,CAAC;UAAEP,GAAG,EAAEA,GAAG,GAAGM,SAAS;UAAEL,GAAG,EAAEA,GAAG,GAAG;QAAE,CAAC,CAAC;MACpD;MACA,IAAIA,GAAG,GAAG,CAAC,IAAIC,KAAK,CAACF,GAAG,GAAGM,SAAS,CAAC,CAACL,GAAG,GAAG,CAAC,CAAC,IAAIO,UAAU,CAACT,KAAK,EAAEG,KAAK,CAACF,GAAG,GAAGM,SAAS,CAAC,CAACL,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE;QACpGE,KAAK,CAACI,IAAI,CAAC;UAAEP,GAAG,EAAEA,GAAG,GAAGM,SAAS;UAAEL,GAAG,EAAEA,GAAG,GAAG;QAAE,CAAC,CAAC;MACpD;MACA;IAEF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE;MAClBE,KAAK,CAACI,IAAI,CAAC,GAAGE,cAAc,CAACT,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MAClF;IAEF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE;MAClBC,KAAK,CAACI,IAAI,CAAC,GAAGG,cAAc,CAACV,GAAG,EAAEC,GAAG,EAAEC,KAAK,CAAC,CAAC;MAC9C;IAEF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE;MAClBC,KAAK,CAACI,IAAI,CAAC,GAAGE,cAAc,CAACT,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACpF;IAEF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE;MAClBC,KAAK,CAACI,IAAI,CAAC,GAAGE,cAAc,CAACT,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;MACtH;IAEF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE;MAClBC,KAAK,CAACI,IAAI,CAAC,GAAGI,YAAY,CAACX,GAAG,EAAEC,GAAG,EAAEC,KAAK,CAAC,CAAC;MAC5C;EACJ;EAEA,OAAOC,KAAK;AACd,CAAC;;AAED;AACA,MAAMK,UAAU,GAAGA,CAACT,KAAK,EAAEa,WAAW,KAAK;EACzC,OAAOA,WAAW,IAAK,QAAQ,CAACP,QAAQ,CAACN,KAAK,CAAC,KAAK,QAAQ,CAACM,QAAQ,CAACO,WAAW,CAAE;AACrF,CAAC;;AAED;AACA,MAAMH,cAAc,GAAGA,CAACT,GAAG,EAAEC,GAAG,EAAEC,KAAK,EAAEW,UAAU,KAAK;EACtD,MAAMV,KAAK,GAAG,EAAE;EAChBU,UAAU,CAACC,OAAO,CAAC,CAAC,CAACC,EAAE,EAAEC,EAAE,CAAC,KAAK;IAC/B,IAAIC,CAAC,GAAGjB,GAAG,GAAGe,EAAE;MAAEG,CAAC,GAAGjB,GAAG,GAAGe,EAAE;IAC9B,OAAOC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;MACzC,IAAI,CAAChB,KAAK,CAACe,CAAC,CAAC,CAACC,CAAC,CAAC,EAAE;QAChBf,KAAK,CAACI,IAAI,CAAC;UAAEP,GAAG,EAAEiB,CAAC;UAAEhB,GAAG,EAAEiB;QAAE,CAAC,CAAC;MAChC,CAAC,MAAM;QACL,IAAIV,UAAU,CAACN,KAAK,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,EAAEC,KAAK,CAACe,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,EAAE;UAC5Cf,KAAK,CAACI,IAAI,CAAC;YAAEP,GAAG,EAAEiB,CAAC;YAAEhB,GAAG,EAAEiB;UAAE,CAAC,CAAC;QAChC;QACA;MACF;MACAD,CAAC,IAAIF,EAAE;MACPG,CAAC,IAAIF,EAAE;IACT;EACF,CAAC,CAAC;EACF,OAAOb,KAAK;AACd,CAAC;;AAED;AACA,MAAMO,cAAc,GAAGA,CAACV,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EAC1C,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMgB,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5FA,WAAW,CAACL,OAAO,CAAC,CAAC,CAACC,EAAE,EAAEC,EAAE,CAAC,KAAK;IAChC,MAAMC,CAAC,GAAGjB,GAAG,GAAGe,EAAE;MAAEG,CAAC,GAAGjB,GAAG,GAAGe,EAAE;IAChC,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;MACtC,IAAI,CAAChB,KAAK,CAACe,CAAC,CAAC,CAACC,CAAC,CAAC,IAAIV,UAAU,CAACN,KAAK,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,EAAEC,KAAK,CAACe,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,EAAE;QAC5Df,KAAK,CAACI,IAAI,CAAC;UAAEP,GAAG,EAAEiB,CAAC;UAAEhB,GAAG,EAAEiB;QAAE,CAAC,CAAC;MAChC;IACF;EACF,CAAC,CAAC;EACF,OAAOf,KAAK;AACd,CAAC;;AAED;AACA,MAAMQ,YAAY,GAAGA,CAACX,GAAG,EAAEC,GAAG,EAAEC,KAAK,KAAK;EACxC,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMiB,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACxFA,SAAS,CAACN,OAAO,CAAC,CAAC,CAACC,EAAE,EAAEC,EAAE,CAAC,KAAK;IAC9B,MAAMC,CAAC,GAAGjB,GAAG,GAAGe,EAAE;MAAEG,CAAC,GAAGjB,GAAG,GAAGe,EAAE;IAChC,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,IAAIC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAG,CAAC,EAAE;MACtC,IAAI,CAAChB,KAAK,CAACe,CAAC,CAAC,CAACC,CAAC,CAAC,IAAIV,UAAU,CAACN,KAAK,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,EAAEC,KAAK,CAACe,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,EAAE;QAC5Df,KAAK,CAACI,IAAI,CAAC;UAAEP,GAAG,EAAEiB,CAAC;UAAEhB,GAAG,EAAEiB;QAAE,CAAC,CAAC;MAChC;IACF;EACF,CAAC,CAAC;EACF,OAAOf,KAAK;AACd,CAAC;AAID,OAAO,MAAMkB,WAAW,GAAGA,CAACtB,KAAK,EAAEuB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,KAAK;EAC3E,MAAMwB,EAAE,GAAGD,KAAK,GAAGF,OAAO;EAC1B,MAAMI,EAAE,GAAGH,KAAK,GAAGF,OAAO;EAE1B,IAAIA,OAAO,KAAKE,KAAK,IAAID,OAAO,KAAKE,KAAK,EAAE,OAAO,KAAK;EAExD,MAAMrB,OAAO,GAAG,QAAQ,CAACC,QAAQ,CAACN,KAAK,CAAC;EACxC,IAAIK,OAAO,KAAKP,WAAW,EAAE,OAAO,KAAK;EAEzC,MAAMe,WAAW,GAAGV,KAAK,CAACsB,KAAK,CAAC,CAACC,KAAK,CAAC;EAEvC,IAAIb,WAAW,IAAI,QAAQ,CAACP,QAAQ,CAACO,WAAW,CAAC,KAAKR,OAAO,EAAE,OAAO,KAAK;EAE3E,IAAIwB,SAAS,GAAG,KAAK;EACrB,QAAQ7B,KAAK;IACX,KAAK,GAAG;MAAE6B,SAAS,GAAGC,eAAe,CAACP,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,EAAE,IAAI,CAAC;MAAE;IACpF,KAAK,GAAG;MAAE0B,SAAS,GAAGC,eAAe,CAACP,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,EAAE,KAAK,CAAC;MAAE;IACrF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE0B,SAAS,GAAGE,eAAe,CAACR,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,CAAC;MAAE;IACxF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE0B,SAAS,GAAGG,iBAAiB,CAACL,EAAE,EAAEC,EAAE,CAAC;MAAE;IAC3D,KAAK,GAAG;IAAE,KAAK,GAAG;MAAEC,SAAS,GAAGI,iBAAiB,CAACV,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,CAAC;MAAE;IAC1F,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE0B,SAAS,GAAGK,gBAAgB,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,CAAC;MAAE;IACzF,KAAK,GAAG;IAAE,KAAK,GAAG;MAAE0B,SAAS,GAAGM,eAAe,CAACR,EAAE,EAAEC,EAAE,CAAC;MAAE;IACzD;MAAS,OAAO,KAAK;EACvB;EAEA,IAAIC,SAAS,EAAE;IACb;IACA,MAAMO,QAAQ,GAAGjC,KAAK,CAACkC,GAAG,CAAEpC,GAAG,IAAK,CAAC,GAAGA,GAAG,CAAC,CAAC;IAC7CmC,QAAQ,CAACX,KAAK,CAAC,CAACC,KAAK,CAAC,GAAG1B,KAAK;IAC9BoC,QAAQ,CAACb,OAAO,CAAC,CAACC,OAAO,CAAC,GAAG,EAAE;;IAE/B;IACA,IAAIc,aAAa,CAACF,QAAQ,EAAE/B,OAAO,CAAC,EAAE,OAAO,KAAK;IAElDP,WAAW,GAAG,CAACA,WAAW,CAAC,CAAC;IAC5B,OAAO,IAAI;EACb;EAEA,OAAO,KAAK;AACd,CAAC;;AAMD;AACA,MAAMgC,eAAe,GAAGA,CAACP,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,EAAEE,OAAO,KAAK;EAC1E,MAAME,SAAS,GAAGF,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;EACpC,MAAMkC,QAAQ,GAAGlC,OAAO,GAAG,CAAC,GAAG,CAAC;EAChC,MAAMuB,EAAE,GAAGH,KAAK,GAAGF,OAAO;EAC1B,MAAMI,EAAE,GAAGa,IAAI,CAACC,GAAG,CAACf,KAAK,GAAGF,OAAO,CAAC;EACpC,MAAMX,WAAW,GAAGV,KAAK,CAACsB,KAAK,CAAC,CAACC,KAAK,CAAC;;EAEvC;EACA,IAAIC,EAAE,KAAK,CAAC,IAAI,CAACd,WAAW,EAAE;IAC1B,IAAIe,EAAE,KAAKrB,SAAS,EAAE,OAAO,IAAI,CAAC,CAAC;IACnC,IAAIgB,OAAO,KAAKgB,QAAQ,IAAIX,EAAE,KAAK,CAAC,GAAGrB,SAAS,IAAI,CAACJ,KAAK,CAACoB,OAAO,GAAGhB,SAAS,CAAC,CAACmB,KAAK,CAAC,EAAE;MACpF,OAAO,IAAI,CAAC,CAAC;IACjB;EACJ;;EAEA;EACA,IAAIC,EAAE,KAAK,CAAC,IAAIC,EAAE,KAAKrB,SAAS,IAAIM,WAAW,EAAE;IAC7C,OAAO,IAAI;EACf;EAEA,OAAO,KAAK;AACd,CAAC;;AAED;AACA,MAAMkB,eAAe,GAAGA,CAACR,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,KAAK;EACjE,IAAIoB,OAAO,KAAKE,KAAK,IAAID,OAAO,KAAKE,KAAK,EAAE,OAAO,KAAK;EACxD,OAAOgB,WAAW,CAACnB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,CAAC;AAC3D,CAAC;;AAED;AACA,MAAM6B,iBAAiB,GAAGA,CAACL,EAAE,EAAEC,EAAE,KAAK;EACpC,OAAQY,IAAI,CAACC,GAAG,CAACd,EAAE,CAAC,KAAK,CAAC,IAAIa,IAAI,CAACC,GAAG,CAACb,EAAE,CAAC,KAAK,CAAC,IAAMY,IAAI,CAACC,GAAG,CAACd,EAAE,CAAC,KAAK,CAAC,IAAIa,IAAI,CAACC,GAAG,CAACb,EAAE,CAAC,KAAK,CAAE;AACjG,CAAC;;AAED;AACA,MAAMK,iBAAiB,GAAGA,CAACV,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,KAAK;EACnE,IAAIqC,IAAI,CAACC,GAAG,CAAClB,OAAO,GAAGE,KAAK,CAAC,KAAKe,IAAI,CAACC,GAAG,CAACjB,OAAO,GAAGE,KAAK,CAAC,EAAE,OAAO,KAAK;EACzE,OAAOgB,WAAW,CAACnB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,CAAC;AAC3D,CAAC;;AAED;AACA,MAAM+B,gBAAgB,GAAGA,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,KAAK;EAClE,OACI4B,eAAe,CAACR,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,CAAC,IACtD8B,iBAAiB,CAACV,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,CAAC;AAE9D,CAAC;;AAED;AACA,MAAMgC,eAAe,GAAGA,CAACR,EAAE,EAAEC,EAAE,KAAK;EAClC,OAAOY,IAAI,CAACC,GAAG,CAACd,EAAE,CAAC,IAAI,CAAC,IAAIa,IAAI,CAACC,GAAG,CAACb,EAAE,CAAC,IAAI,CAAC;AAC/C,CAAC;;AAED;AACA,MAAMc,WAAW,GAAGA,CAACnB,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,KAAK,EAAEvB,KAAK,KAAK;EAC7D,MAAMwB,EAAE,GAAGa,IAAI,CAACG,IAAI,CAACjB,KAAK,GAAGF,OAAO,CAAC;EACrC,MAAMI,EAAE,GAAGY,IAAI,CAACG,IAAI,CAAClB,KAAK,GAAGF,OAAO,CAAC;EACrC,IAAIqB,CAAC,GAAGpB,OAAO,GAAGG,EAAE;EACpB,IAAIkB,CAAC,GAAGtB,OAAO,GAAGK,EAAE;EAEpB,OAAOgB,CAAC,KAAKlB,KAAK,IAAImB,CAAC,KAAKpB,KAAK,EAAE;IAC/B,IAAItB,KAAK,CAAC0C,CAAC,CAAC,CAACD,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,KAAK,CAAC,CAAC;IACtCA,CAAC,IAAIjB,EAAE;IACPkB,CAAC,IAAIjB,EAAE;EACX;EAEA,OAAO,IAAI;AACb,CAAC;AACD,MAAMkB,gBAAgB,GAAGA,CAAC3C,KAAK,EAAEE,OAAO,KAAK;EAC3C,MAAM0C,IAAI,GAAG1C,OAAO,GAAG,GAAG,GAAG,GAAG;EAChC,KAAK,IAAIJ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;IAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,IAAIC,KAAK,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC,KAAK6C,IAAI,EAAE,OAAO;QAAE9C,GAAG;QAAEC;MAAI,CAAC;IACnD;EACF;EACA,OAAO,IAAI;AACb,CAAC;AACD,MAAMoC,aAAa,GAAGA,CAACnC,KAAK,EAAE6C,WAAW,KAAK;EAC5C,MAAMC,OAAO,GAAGH,gBAAgB,CAAC3C,KAAK,EAAE6C,WAAW,CAAC;EACpD,IAAI,CAACC,OAAO,EAAE,OAAO,KAAK,CAAC,CAAC;;EAE5B;EACA,KAAK,IAAIhD,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;IAChC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,MAAMF,KAAK,GAAGG,KAAK,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC;MAC7B,IAAIF,KAAK,IAAI,QAAQ,CAACM,QAAQ,CAACN,KAAK,CAAC,KAAKgD,WAAW,EAAE;QACrD,MAAME,UAAU,GAAGnD,aAAa,CAACC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,CAAC;QACxD,IAAI+C,UAAU,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACnD,GAAG,KAAKgD,OAAO,CAAChD,GAAG,IAAImD,IAAI,CAAClD,GAAG,KAAK+C,OAAO,CAAC/C,GAAG,CAAC,EAAE;UACjF,OAAO,IAAI;QACb;MACF;IACF;EACF;EAEA,OAAO,KAAK;AACd,CAAC;AACD;AACA,MAAMmD,aAAa,GAAGA,CAAClD,KAAK,EAAEE,OAAO,KAAK;EACxC,MAAM4C,OAAO,GAAGH,gBAAgB,CAAC3C,KAAK,EAAEE,OAAO,CAAC;EAChD,IAAI,CAAC4C,OAAO,EAAE,OAAO,KAAK;EAE1B,MAAM5B,SAAS,GAAGT,YAAY,CAACqC,OAAO,CAAChD,GAAG,EAAEgD,OAAO,CAAC/C,GAAG,EAAEC,KAAK,CAAC;EAC/D,OAAOkB,SAAS,CAAC8B,IAAI,CAACC,IAAI,IAAI;IAC1B,MAAMhB,QAAQ,GAAGjC,KAAK,CAACkC,GAAG,CAACpC,GAAG,IAAI,CAAC,GAAGA,GAAG,CAAC,CAAC;IAC3CmC,QAAQ,CAACgB,IAAI,CAACnD,GAAG,CAAC,CAACmD,IAAI,CAAClD,GAAG,CAAC,GAAGG,OAAO,GAAG,GAAG,GAAG,GAAG;IAClD+B,QAAQ,CAACa,OAAO,CAAChD,GAAG,CAAC,CAACgD,OAAO,CAAC/C,GAAG,CAAC,GAAG,EAAE;IACvC,OAAO,CAACoC,aAAa,CAACF,QAAQ,EAAE/B,OAAO,CAAC;EAC5C,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,MAAMiD,iBAAiB,GAAGA,CAACnD,KAAK,EAAEE,OAAO,KAAK;EAC5C,MAAM4C,OAAO,GAAGH,gBAAgB,CAAC3C,KAAK,EAAEE,OAAO,CAAC;EAChD,IAAI,CAAC4C,OAAO,EAAE,OAAO,KAAK;EAE1B,IAAIM,SAAS,GAAG,EAAE;EAClB;EACA,KAAK,IAAItD,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;IAC9B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAC9B,MAAMF,KAAK,GAAGG,KAAK,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC;MAC7B,IAAIF,KAAK,IAAI,QAAQ,CAACM,QAAQ,CAACN,KAAK,CAAC,KAAKK,OAAO,EAAE;QAC/C,MAAMD,KAAK,GAAGL,aAAa,CAACC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,CAAC;QACnD,IAAIC,KAAK,CAAC+C,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACnD,GAAG,KAAKgD,OAAO,CAAChD,GAAG,IAAImD,IAAI,CAAClD,GAAG,KAAK+C,OAAO,CAAC/C,GAAG,CAAC,EAAE;UAC1EqD,SAAS,CAAC/C,IAAI,CAAC;YAAEP,GAAG;YAAEC;UAAI,CAAC,CAAC;QAChC;MACJ;IACJ;EACJ;;EAEA;EACA,IAAIqD,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE,OAAO,KAAK;;EAEtC;EACA,MAAMC,QAAQ,GAAGF,SAAS,CAAC,CAAC,CAAC;EAC7B,KAAK,IAAItD,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;IAC9B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAC9B,MAAMF,KAAK,GAAGG,KAAK,CAACF,GAAG,CAAC,CAACC,GAAG,CAAC;MAC7B,IAAIF,KAAK,IAAI,QAAQ,CAACM,QAAQ,CAACN,KAAK,CAAC,KAAKK,OAAO,EAAE;QAC/C,MAAMD,KAAK,GAAGL,aAAa,CAACC,KAAK,EAAEC,GAAG,EAAEC,GAAG,EAAEC,KAAK,CAAC;QACnD,IAAIC,KAAK,CAAC+C,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACnD,GAAG,KAAKwD,QAAQ,CAACxD,GAAG,IAAImD,IAAI,CAAClD,GAAG,KAAKuD,QAAQ,CAACvD,GAAG,CAAC,EAAE;UAC5E,OAAO,IAAI,CAAC,CAAC;QACjB;MACJ;IACJ;EACJ;EAEA,OAAO,KAAK;AACd,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}