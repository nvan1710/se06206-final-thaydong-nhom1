{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n  if (targetPiece && isWhite === isTargetWhite) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(dx, dy);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(dx, dy);\n    default:\n      return false;\n  }\n};\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return true;\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][fromCol]) return true;\n  }\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n  return false;\n};\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidKnightMove = (dx, dy) => {\n  return Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n};\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\nconst movePiece = (fromRow, fromCol, toRow, toCol) => {\n  setBoard(prevBoard => {\n    const newBoard = prevBoard.map(row => [...row]);\n    const piece = newBoard[fromRow][fromCol];\n    const targetPiece = newBoard[toRow][toCol];\n    if (isValidMove(piece, fromRow, fromCol, toRow, toCol, newBoard)) {\n      newBoard[toRow][toCol] = piece;\n      newBoard[fromRow][fromCol] = \"\";\n      setMoveHistory(prevHistory => [...prevHistory, targetPiece ? `${piece} ${convertToChessNotation(fromRow, fromCol)} captures ${targetPiece} at ${convertToChessNotation(toRow, toCol)}` : `${piece} ${convertToChessNotation(fromRow, fromCol)} → ${convertToChessNotation(toRow, toCol)}`]);\n      return newBoard;\n    }\n    return prevBoard;\n  });\n};","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","dx","dy","isWhite","includes","targetPiece","isTargetWhite","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","direction","startRow","Math","abs","isPathClear","sign","x","y","movePiece","setBoard","prevBoard","newBoard","map","row","setMoveHistory","prevHistory","convertToChessNotation"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board) => {\n  const dx = toCol - fromCol;\n  const dy = toRow - fromRow;\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n\n  if (targetPiece && isWhite === isTargetWhite) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(dx, dy);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(dx, dy);\n    default: return false;\n  }\n};\n\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return true;\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][fromCol]) return true;\n  }\n\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n\n  return false;\n};\n\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (fromRow !== toRow && fromCol !== toCol) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidKnightMove = (dx, dy) => {\n  return (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n};\n\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromRow - toRow) !== Math.abs(fromCol - toCol)) return false;\n  return isPathClear(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => {\n  return isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n};\n\nconst isValidKingMove = (dx, dy) => {\n  return Math.abs(dx) <= 1 && Math.abs(dy) <= 1;\n};\n\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx;\n  let y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\n\nconst movePiece = (fromRow, fromCol, toRow, toCol) => {\n  setBoard((prevBoard) => {\n    const newBoard = prevBoard.map((row) => [...row]);\n    const piece = newBoard[fromRow][fromCol];\n    const targetPiece = newBoard[toRow][toCol];\n\n    if (isValidMove(piece, fromRow, fromCol, toRow, toCol, newBoard)) {\n      newBoard[toRow][toCol] = piece;\n      newBoard[fromRow][fromCol] = \"\";\n\n      setMoveHistory((prevHistory) => [\n        ...prevHistory,\n        targetPiece\n          ? `${piece} ${convertToChessNotation(fromRow, fromCol)} captures ${targetPiece} at ${convertToChessNotation(toRow, toCol)}`\n          : `${piece} ${convertToChessNotation(fromRow, fromCol)} → ${convertToChessNotation(toRow, toCol)}`,\n      ]);\n\n      return newBoard;\n    }\n    return prevBoard;\n  });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}