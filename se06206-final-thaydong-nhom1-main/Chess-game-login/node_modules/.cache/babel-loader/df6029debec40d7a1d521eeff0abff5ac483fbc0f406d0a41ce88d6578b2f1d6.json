{"ast":null,"code":"var _jsxFileName = \"D:\\\\se06206-final-thaydong-nhom1-main\\\\se06206-final-thaydong-nhom1-main\\\\Chess-game-login\\\\src\\\\components\\\\ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { getValidMoves } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\";\nimport pieceImages from \"../assets/pieceImages\";\nimport { connectWebSocket, sendMove } from \"../websocket\"; // Import WebSocket\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  PIECE: \"piece\"\n};\nconst ChessBoard = ({\n  roomId,\n  isBlack\n}) => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [moveHistory, setMoveHistory] = useState([]); // 🆕 Lưu lịch sử nước đi\n  const [currentTurn, setCurrentTurn] = useState(true); // true: Trắng, false: Đen\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [gameMessage, setGameMessage] = useState(\"🎭 New Game Started! White's Turn\");\n  const resetGame = () => {\n    setBoard(initialBoardSetup);\n    setMoveHistory([]); // 🆕 Reset lịch sử nước đi\n    setCurrentTurn(true);\n    setIsCheck(false);\n    setIsCheckMate(false);\n    setCheckedKing(null);\n    setSelectedPiece(null);\n    setValidMoves([]);\n    setGameMessage(\"🎭 New Game Started! White's Turn\");\n  };\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard(prevBoard => {\n      const newBoard = prevBoard.map(row => [...row]);\n      const piece = newBoard[fromRow][fromCol];\n\n      // Lấy danh sách nước đi hợp lệ\n      const validMoves = getValidMoves(piece, fromRow, fromCol, prevBoard);\n      if (!validMoves.some(move => move.row === toRow && move.col === toCol)) {\n        return prevBoard; // Không cho phép đi nước không hợp lệ\n      }\n      newBoard[toRow][toCol] = piece;\n      newBoard[fromRow][fromCol] = \"\";\n\n      // 🆕 Kiểm tra trạng thái vua\n      const nextTurn = !currentTurn;\n      const kingPos = findKingPosition(newBoard, nextTurn);\n      const kingCheck = isKingInCheck(newBoard, nextTurn);\n      const checkmate = isCheckmate(newBoard, nextTurn);\n      setCurrentTurn(nextTurn);\n      setIsCheck(kingCheck);\n      setCheckedKing(kingCheck ? kingPos : null);\n      setIsCheckMate(checkmate);\n      setSelectedPiece(null);\n      setValidMoves([]);\n      if (checkmate) {\n        setGameMessage(`🏆 Checkmate! ${currentTurn ? \"Black Wins!\" : \"White Wins!\"}`);\n      } else if (kingCheck) {\n        setGameMessage(`🔥 ${nextTurn ? \"White\" : \"Black\"} King is in check! 🔥`);\n      } else {\n        setGameMessage(`🎭 Current Turn: ${nextTurn ? \"White\" : \"Black\"}`);\n      }\n\n      // 🆕 Cập nhật lịch sử nước đi\n      setMoveHistory(prevHistory => [...prevHistory, `${piece} ${fromRow},${fromCol} → ${toRow},${toCol}`]);\n\n      // 🆕 Gửi nước đi qua WebSocket\n      sendMove(roomId, {\n        fromRow,\n        fromCol,\n        toRow,\n        toCol,\n        piece\n      });\n      return newBoard;\n    });\n  };\n\n  // 🆕 Nhận nước đi từ WebSocket\n  useEffect(() => {\n    connectWebSocket(roomId, moveData => {\n      setBoard(prevBoard => {\n        if (!prevBoard || !Array.isArray(prevBoard)) return prevBoard;\n        const newBoard = prevBoard.map(row => [...row]);\n        newBoard[moveData.toRow][moveData.toCol] = moveData.piece;\n        newBoard[moveData.fromRow][moveData.fromCol] = \"\";\n        return newBoard;\n      });\n      setMoveHistory(prevHistory => [...prevHistory, `${moveData.piece} ${moveData.fromRow},${moveData.fromCol} → ${moveData.toRow},${moveData.toCol}`]);\n      setCurrentTurn(prevTurn => !prevTurn);\n    });\n  }, [roomId]);\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col justify-center items-center bg-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"\\u265F\\uFE0F Chess Game \\u265F\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), isCheck && !isCheckMate && checkedKing && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fixed top-5 right-5 bg-red-600 text-white px-4 py-2 rounded-md shadow-lg font-bold animate-pulse\",\n        children: [\"\\uD83D\\uDD25 Warning! \", currentTurn ? \"Black\" : \"White\", \" King is in Check! \\uD83D\\uDD25\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-2 bg-yellow-300 text-black px-4 py-2 rounded text-center font-bold shadow-md\",\n        children: gameMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-8\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `grid grid-cols-8 border-4 border-black shadow-lg ${isBlack ? \"rotate-180\" : \"\"}`,\n          children: board.map((row, rowIndex) => row.map((piece, colIndex) => /*#__PURE__*/_jsxDEV(Square, {\n            piece: piece,\n            row: rowIndex,\n            col: colIndex,\n            movePiece: movePiece,\n            isKingSquare: (checkedKing === null || checkedKing === void 0 ? void 0 : checkedKing.row) === rowIndex && (checkedKing === null || checkedKing === void 0 ? void 0 : checkedKing.col) === colIndex,\n            selectedPiece: selectedPiece,\n            setSelectedPiece: setSelectedPiece,\n            currentTurn: currentTurn,\n            board: board,\n            validMoves: selectedPiece ? getValidMoves(selectedPiece.piece, selectedPiece.row, selectedPiece.col, board) : []\n          }, `${rowIndex}-${colIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 17\n          }, this)))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-64 bg-white p-4 rounded-lg shadow-md h-fit\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"text-lg font-semibold mb-2\",\n            children: \"\\uD83D\\uDCDC Move History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"list-decimal pl-5\",\n            children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: move\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 49\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        className: \"mt-4 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\",\n        children: \"Restart Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n_s(ChessBoard, \"VfkTI/e1BOr3kIpkjkGZ5Xp85Xk=\");\n_c = ChessBoard;\nexport default ChessBoard;\nvar _c;\n$RefreshReg$(_c, \"ChessBoard\");","map":{"version":3,"names":["React","useState","useEffect","useDrag","useDrop","DndProvider","HTML5Backend","getValidMoves","initialBoardSetup","isKingInCheck","isCheckmate","findKingPosition","pieceImages","connectWebSocket","sendMove","jsxDEV","_jsxDEV","ItemTypes","PIECE","ChessBoard","roomId","isBlack","_s","board","setBoard","moveHistory","setMoveHistory","currentTurn","setCurrentTurn","isCheck","setIsCheck","isCheckMate","setIsCheckMate","checkedKing","setCheckedKing","selectedPiece","setSelectedPiece","validMoves","setValidMoves","gameMessage","setGameMessage","resetGame","movePiece","fromRow","fromCol","toRow","toCol","prevBoard","newBoard","map","row","piece","some","move","col","nextTurn","kingPos","kingCheck","checkmate","prevHistory","moveData","Array","isArray","prevTurn","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","colIndex","Square","isKingSquare","index","onClick","_c","$RefreshReg$"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/components/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { getValidMoves } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\";\nimport pieceImages from \"../assets/pieceImages\";\nimport { connectWebSocket, sendMove } from \"../websocket\"; // Import WebSocket\n\nconst ItemTypes = { PIECE: \"piece\" };\n\nconst ChessBoard = ({ roomId, isBlack }) => {\n  const [board, setBoard] = useState(initialBoardSetup);\n  const [moveHistory, setMoveHistory] = useState([]); // 🆕 Lưu lịch sử nước đi\n  const [currentTurn, setCurrentTurn] = useState(true); // true: Trắng, false: Đen\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [gameMessage, setGameMessage] = useState(\"🎭 New Game Started! White's Turn\");\n\n  const resetGame = () => {\n    setBoard(initialBoardSetup);\n    setMoveHistory([]); // 🆕 Reset lịch sử nước đi\n    setCurrentTurn(true);\n    setIsCheck(false);\n    setIsCheckMate(false);\n    setCheckedKing(null);\n    setSelectedPiece(null);\n    setValidMoves([]);\n    setGameMessage(\"🎭 New Game Started! White's Turn\");\n  };\n\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard((prevBoard) => {\n      const newBoard = prevBoard.map((row) => [...row]);\n      const piece = newBoard[fromRow][fromCol];\n\n      // Lấy danh sách nước đi hợp lệ\n      const validMoves = getValidMoves(piece, fromRow, fromCol, prevBoard);\n      if (!validMoves.some((move) => move.row === toRow && move.col === toCol)) {\n        return prevBoard; // Không cho phép đi nước không hợp lệ\n      }\n\n      newBoard[toRow][toCol] = piece;\n      newBoard[fromRow][fromCol] = \"\";\n\n      // 🆕 Kiểm tra trạng thái vua\n      const nextTurn = !currentTurn;\n      const kingPos = findKingPosition(newBoard, nextTurn);\n      const kingCheck = isKingInCheck(newBoard, nextTurn);\n      const checkmate = isCheckmate(newBoard, nextTurn);\n\n      setCurrentTurn(nextTurn);\n      setIsCheck(kingCheck);\n      setCheckedKing(kingCheck ? kingPos : null);\n      setIsCheckMate(checkmate);\n      setSelectedPiece(null);\n      setValidMoves([]);\n\n      if (checkmate) {\n        setGameMessage(`🏆 Checkmate! ${currentTurn ? \"Black Wins!\" : \"White Wins!\"}`);\n      } else if (kingCheck) {\n        setGameMessage(`🔥 ${nextTurn ? \"White\" : \"Black\"} King is in check! 🔥`);\n      } else {\n        setGameMessage(`🎭 Current Turn: ${nextTurn ? \"White\" : \"Black\"}`);\n      }\n\n      // 🆕 Cập nhật lịch sử nước đi\n      setMoveHistory((prevHistory) => [...prevHistory, `${piece} ${fromRow},${fromCol} → ${toRow},${toCol}`]);\n\n      // 🆕 Gửi nước đi qua WebSocket\n      sendMove(roomId, { fromRow, fromCol, toRow, toCol, piece });\n\n      return newBoard;\n    });\n  };\n\n  // 🆕 Nhận nước đi từ WebSocket\n  useEffect(() => {\n    connectWebSocket(roomId, (moveData) => {\n      setBoard((prevBoard) => {\n        if (!prevBoard || !Array.isArray(prevBoard)) return prevBoard;\n\n        const newBoard = prevBoard.map(row => [...row]);\n        newBoard[moveData.toRow][moveData.toCol] = moveData.piece;\n        newBoard[moveData.fromRow][moveData.fromCol] = \"\";\n        return newBoard;\n      });\n\n      setMoveHistory((prevHistory) => [...prevHistory, `${moveData.piece} ${moveData.fromRow},${moveData.fromCol} → ${moveData.toRow},${moveData.toCol}`]);\n      setCurrentTurn((prevTurn) => !prevTurn);\n    });\n  }, [roomId]);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"min-h-screen flex flex-col justify-center items-center bg-gray-200\">\n        <h1 className=\"text-2xl font-bold mb-4\">♟️ Chess Game ♟️</h1>\n\n        {/* 🔥 Cảnh báo chiếu vua */}\n        {isCheck && !isCheckMate && checkedKing && (\n          <div className=\"fixed top-5 right-5 bg-red-600 text-white px-4 py-2 rounded-md shadow-lg font-bold animate-pulse\">\n            🔥 Warning! {currentTurn ? \"Black\" : \"White\"} King is in Check! 🔥\n          </div>\n        )}\n\n        {/* 🎭 Thông báo trạng thái game */}\n        {gameMessage && (\n          <div className=\"mb-2 bg-yellow-300 text-black px-4 py-2 rounded text-center font-bold shadow-md\">\n            {gameMessage}\n          </div>\n        )}\n\n        <div className=\"flex gap-8\">\n          {/* 🎯 Bàn cờ có thể xoay */}\n          <div className={`grid grid-cols-8 border-4 border-black shadow-lg ${isBlack ? \"rotate-180\" : \"\"}`}>\n            {board.map((row, rowIndex) =>\n              row.map((piece, colIndex) => (\n                <Square\n                  key={`${rowIndex}-${colIndex}`}\n                  piece={piece}\n                  row={rowIndex}\n                  col={colIndex}\n                  movePiece={movePiece}\n                  isKingSquare={checkedKing?.row === rowIndex && checkedKing?.col === colIndex}\n                  selectedPiece={selectedPiece}\n                  setSelectedPiece={setSelectedPiece}\n                  currentTurn={currentTurn}\n                  board={board}\n                  validMoves={selectedPiece ? getValidMoves(selectedPiece.piece, selectedPiece.row, selectedPiece.col, board) : []}\n                />\n              ))\n            )}\n          </div>\n\n          {/* 📜 Lịch sử nước đi */}\n          <div className=\"w-64 bg-white p-4 rounded-lg shadow-md h-fit\">\n            <h2 className=\"text-lg font-semibold mb-2\">📜 Move History</h2>\n            <ul className=\"list-decimal pl-5\">\n              {moveHistory.map((move, index) => <li key={index}>{move}</li>)}\n            </ul>\n          </div>\n        </div>\n\n        {/* 🔄 Nút reset game */}\n        <button onClick={resetGame} className=\"mt-4 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\">\n          Restart Game\n        </button>\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default ChessBoard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}