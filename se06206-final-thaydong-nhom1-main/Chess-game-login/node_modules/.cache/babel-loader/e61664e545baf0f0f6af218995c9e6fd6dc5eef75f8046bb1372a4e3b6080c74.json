{"ast":null,"code":"import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\n\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\nexport const findKingPosition = (board, isWhite) => {\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  return null;\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\nexport const isKingInCheck = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\n\n  const {\n    row: kingRow,\n    col: kingCol\n  } = kingPos;\n  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingRow}, ${kingCol})`);\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\n\n      const isEnemy = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôö\".includes(piece) !== isWhite; // Ki·ªÉm tra qu√¢n ƒë·ªëi th·ªß\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\n        console.log(`‚ö†Ô∏è Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·ª´ (${row}, ${col})`);\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// üìç Ki·ªÉm tra xem vua c√≥ n∆∞·ªõc ƒëi n√†o ƒë·ªÉ tho√°t chi·∫øu kh√¥ng\nconst canKingEscape = (board, isWhite) => {\n  const kingPos = findKingPosition(board, isWhite);\n  if (!kingPos) return false;\n  const {\n    row,\n    col\n  } = kingPos;\n  const directions = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]; // 8 h∆∞·ªõng m√† vua c√≥ th·ªÉ ƒëi\n\n  for (const [dx, dy] of directions) {\n    const newRow = row + dx;\n    const newCol = col + dy;\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\n      const tempBoard = JSON.parse(JSON.stringify(board));\n      tempBoard[newRow][newCol] = tempBoard[row][col];\n      tempBoard[row][col] = \"\";\n      if (!isKingInCheck(tempBoard, isWhite)) {\n        console.log(`‚úÖ Vua c√≥ th·ªÉ tho√°t ƒë·∫øn (${newRow}, ${newCol})`);\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\nexport const isCheckmate = (board, isWhite) => {\n  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt.\n\n  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\n\n  // 1. Ki·ªÉm tra n·∫øu vua c√≥ th·ªÉ di chuy·ªÉn tho√°t kh·ªèi chi·∫øu\n  if (canKingEscape(board, isWhite)) return false;\n\n  // 2. Ki·ªÉm tra n·∫øu c√≥ qu√¢n n√†o c·∫£n ƒë∆∞·ª£c n∆∞·ªõc chi·∫øu\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const piece = board[row][col];\n      if (!piece) continue;\n      const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\n      if (!isFriendly) continue;\n      for (let newRow = 0; newRow < 8; newRow++) {\n        for (let newCol = 0; newCol < 8; newCol++) {\n          if (isValidMove(piece, row, col, newRow, newCol, board)) {\n            // Sao ch√©p b√†n c·ªù ƒë√∫ng c√°ch\n            const newBoard = JSON.parse(JSON.stringify(board));\n            newBoard[newRow][newCol] = piece;\n            newBoard[row][col] = \"\";\n            if (!isKingInCheck(newBoard, isWhite)) {\n              console.log(`‚úÖ T√¨m th·∫•y m·ªôt n∆∞·ªõc tho√°t t·∫°i (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\n              return false; // N·∫øu c√≥ n∆∞·ªõc ƒëi tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\n            }\n          }\n        }\n      }\n    }\n  }\n  console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\n  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\n};","map":{"version":3,"names":["isValidMove","findKingPosition","board","isWhite","row","col","isKingInCheck","kingPos","kingRow","kingCol","console","log","piece","isEnemy","includes","canKingEscape","directions","dx","dy","newRow","newCol","tempBoard","JSON","parse","stringify","isCheckmate","isFriendly","newBoard"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/utils/checkmate.js"],"sourcesContent":["import { isValidMove } from \"./moveRules\"; // Import lu·∫≠t di chuy·ªÉn\r\n\r\n// üìç T√¨m v·ªã tr√≠ c·ªßa vua tr√™n b√†n c·ªù\r\nexport const findKingPosition = (board, isWhite) => {\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      if (board[row][col] === (isWhite ? \"‚ôî\" : \"‚ôö\")) {\r\n        return { row, col };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ b·ªã chi·∫øu kh√¥ng\r\nexport const isKingInCheck = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false; // N·∫øu kh√¥ng t√¨m th·∫•y vua, kh√¥ng th·ªÉ b·ªã chi·∫øu\r\n\r\n  const { row: kingRow, col: kingCol } = kingPos;\r\n  console.log(`üîç Ki·ªÉm tra chi·∫øu cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"} t·∫°i (${kingRow}, ${kingCol})`);\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (!piece) continue; // Kh√¥ng c√≥ qu√¢n c·ªù ·ªü √¥ n√†y\r\n\r\n      const isEnemy = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôö\".includes(piece) !== isWhite; // Ki·ªÉm tra qu√¢n ƒë·ªëi th·ªß\r\n      if (isEnemy && isValidMove(piece, row, col, kingRow, kingCol, board)) {\r\n        console.log(`‚ö†Ô∏è Vua ƒëang b·ªã chi·∫øu b·ªüi qu√¢n ${piece} t·ª´ (${row}, ${col})`);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// üìç Ki·ªÉm tra xem vua c√≥ n∆∞·ªõc ƒëi n√†o ƒë·ªÉ tho√°t chi·∫øu kh√¥ng\r\nconst canKingEscape = (board, isWhite) => {\r\n  const kingPos = findKingPosition(board, isWhite);\r\n  if (!kingPos) return false;\r\n\r\n  const { row, col } = kingPos;\r\n  const directions = [\r\n    [-1, -1], [-1, 0], [-1, 1], \r\n    [0, -1],          [0, 1], \r\n    [1, -1], [1, 0], [1, 1]\r\n  ]; // 8 h∆∞·ªõng m√† vua c√≥ th·ªÉ ƒëi\r\n\r\n  for (const [dx, dy] of directions) {\r\n    const newRow = row + dx;\r\n    const newCol = col + dy;\r\n\r\n    if (newRow >= 0 && newRow < 8 && newCol >= 0 && newCol < 8) {\r\n      const tempBoard = JSON.parse(JSON.stringify(board));\r\n      tempBoard[newRow][newCol] = tempBoard[row][col];\r\n      tempBoard[row][col] = \"\";\r\n\r\n      if (!isKingInCheck(tempBoard, isWhite)) {\r\n        console.log(`‚úÖ Vua c√≥ th·ªÉ tho√°t ƒë·∫øn (${newRow}, ${newCol})`);\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// üìç Ki·ªÉm tra chi·∫øu h·∫øt (Checkmate)\r\nexport const isCheckmate = (board, isWhite) => {\r\n  if (!isKingInCheck(board, isWhite)) return false; // N·∫øu kh√¥ng b·ªã chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt.\r\n\r\n  console.log(`üîé Ki·ªÉm tra chi·∫øu h·∫øt cho vua ${isWhite ? \"tr·∫Øng\" : \"ƒëen\"}...`);\r\n\r\n  // 1. Ki·ªÉm tra n·∫øu vua c√≥ th·ªÉ di chuy·ªÉn tho√°t kh·ªèi chi·∫øu\r\n  if (canKingEscape(board, isWhite)) return false;\r\n\r\n  // 2. Ki·ªÉm tra n·∫øu c√≥ qu√¢n n√†o c·∫£n ƒë∆∞·ª£c n∆∞·ªõc chi·∫øu\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const piece = board[row][col];\r\n      if (!piece) continue;\r\n\r\n      const isFriendly = \"‚ôô‚ôñ‚ôò‚ôó‚ôï‚ôî\".includes(piece) === isWhite;\r\n      if (!isFriendly) continue;\r\n\r\n      for (let newRow = 0; newRow < 8; newRow++) {\r\n        for (let newCol = 0; newCol < 8; newCol++) {\r\n          if (isValidMove(piece, row, col, newRow, newCol, board)) {\r\n            // Sao ch√©p b√†n c·ªù ƒë√∫ng c√°ch\r\n            const newBoard = JSON.parse(JSON.stringify(board));\r\n            newBoard[newRow][newCol] = piece;\r\n            newBoard[row][col] = \"\";\r\n\r\n            if (!isKingInCheck(newBoard, isWhite)) {\r\n              console.log(`‚úÖ T√¨m th·∫•y m·ªôt n∆∞·ªõc tho√°t t·∫°i (${row}, ${col}) ‚Üí (${newRow}, ${newCol})`);\r\n              return false; // N·∫øu c√≥ n∆∞·ªõc ƒëi tho√°t chi·∫øu, kh√¥ng ph·∫£i chi·∫øu h·∫øt\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  console.log(`üèÜ Chi·∫øu h·∫øt! Kh√¥ng c√≤n n∆∞·ªõc n√†o h·ª£p l·ªá.`);\r\n  return true; // Kh√¥ng c√≥ n∆∞·ªõc n√†o h·ª£p l·ªá ‚Üí chi·∫øu h·∫øt\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}