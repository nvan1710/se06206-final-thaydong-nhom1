{"ast":null,"code":"export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n  if (fromRow === toRow && fromCol === toCol) return false;\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if (turn === \"white\" && !isWhite || turn === \"black\" && isWhite) return false;\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n  if (targetPiece && isWhite === isTargetWhite) return false;\n  switch (piece) {\n    case \"♙\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\":\n      return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\":\n    case \"♜\":\n      return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\":\n    case \"♞\":\n      return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"♗\":\n    case \"♝\":\n      return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\":\n    case \"♛\":\n      return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\":\n    case \"♚\":\n      return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default:\n      return false;\n  }\n};\n\n// 🏇 Knight move\nconst isValidKnightMove = (dx, dy) => Math.abs(dx) === 2 && Math.abs(dy) === 1 || Math.abs(dx) === 1 && Math.abs(dy) === 2;\n\n// 🏰 Rook move\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => fromRow === toRow || fromCol === toCol ? isPathClear(fromRow, fromCol, toRow, toCol, board) : false;\n\n// 🏹 Bishop move\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol) ? isPathClear(fromRow, fromCol, toRow, toCol, board) : false;\n\n// 👑 Queen move\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n\n// ⚔ King move\nconst isValidKingMove = (fromRow, fromCol, toRow, toCol, board) => Math.abs(fromCol - toCol) <= 1 && Math.abs(fromRow - toRow) <= 1 || isValidCastling(fromRow, fromCol, toRow, toCol, board);\n\n// 🏇 Pawn move\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite, lastMove) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const promotionRow = isWhite ? 0 : 7;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return toRow === promotionRow ? \"promotion\" : true;\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][fromCol]) return true;\n  }\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n  if (dx === 1 && dy === direction && (lastMove === null || lastMove === void 0 ? void 0 : lastMove.piece.toLowerCase()) === \"♙\" && Math.abs(lastMove.fromRow - lastMove.toRow) === 2) {\n    if (lastMove.toRow === fromRow && lastMove.toCol === toCol) return \"en passant\";\n  }\n  return false;\n};\n\n// 🏰 Castling\nconst isValidCastling = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) !== 2 || fromRow !== toRow) return false;\n  const king = board[fromRow][fromCol];\n  const rookCol = toCol > fromCol ? 7 : 0;\n  const rook = board[fromRow][rookCol];\n  if (![\"♔\", \"♚\"].includes(king) || ![\"♖\", \"♜\"].includes(rook) || !isPathClear(fromRow, fromCol, fromRow, rookCol, board)) return false;\n  return true;\n};\n\n// 📏 Check if path is clear\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx,\n    y = fromRow + dy;\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx;\n    y += dy;\n  }\n  return true;\n};\n\n// 🔎 Check detection\nexport const isKingInCheck = (turn, board) => {\n  let kingPos = null;\n  board.forEach((row, rIdx) => row.forEach((piece, cIdx) => {\n    if (turn === \"white\" && piece === \"♔\" || turn === \"black\" && piece === \"♚\") {\n      kingPos = {\n        row: rIdx,\n        col: cIdx\n      };\n    }\n  }));\n  return board.some((row, rIdx) => row.some((piece, cIdx) => {\n    if (piece && (turn === \"white\" && \"♟♜♞♝♛♚\".includes(piece) || turn === \"black\" && \"♙♖♘♗♕♔\".includes(piece))) {\n      return isValidMove(piece, rIdx, cIdx, kingPos.row, kingPos.col, board, turn);\n    }\n    return false;\n  }));\n};\n\n// 🔥 Lấy tất cả nước đi hợp lệ\nexport const getAllPossibleMoves = (piece, row, col, board) => {\n  let moves = [];\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      if (isValidMove(piece, row, col, r, c, board, \"white\") || isValidMove(piece, row, col, r, c, board, \"black\")) {\n        moves.push({\n          row: r,\n          col: c\n        });\n      }\n    }\n  }\n  return moves;\n};","map":{"version":3,"names":["isValidMove","piece","fromRow","fromCol","toRow","toCol","board","turn","lastMove","console","log","isWhite","includes","targetPiece","isTargetWhite","isValidPawnMove","isValidRookMove","isValidKnightMove","isValidBishopMove","isValidQueenMove","isValidKingMove","dx","dy","Math","abs","isPathClear","isValidCastling","direction","startRow","promotionRow","toLowerCase","king","rookCol","rook","sign","x","y","isKingInCheck","kingPos","forEach","row","rIdx","cIdx","col","some","getAllPossibleMoves","moves","r","c","push"],"sources":["/root/se06206-final-thaydong-nhom1/Chess-game-login/src/utils/moveRules.js"],"sourcesContent":["export const isValidMove = (piece, fromRow, fromCol, toRow, toCol, board, turn, lastMove) => {\n  console.log(`Move check: ${piece} from (${fromRow},${fromCol}) to (${toRow},${toCol}), Turn: ${turn}`);\n\n  if (fromRow === toRow && fromCol === toCol) return false;\n\n  const isWhite = \"♙♖♘♗♕♔\".includes(piece);\n  if ((turn === \"white\" && !isWhite) || (turn === \"black\" && isWhite)) return false;\n\n  const targetPiece = board[toRow][toCol];\n  const isTargetWhite = targetPiece && \"♙♖♘♗♕♔\".includes(targetPiece);\n\n  if (targetPiece && isWhite === isTargetWhite) return false;\n\n  switch (piece) {\n    case \"♙\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, true, lastMove);\n    case \"♟\": return isValidPawnMove(fromRow, fromCol, toRow, toCol, board, false, lastMove);\n    case \"♖\": case \"♜\": return isValidRookMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♘\": case \"♞\": return isValidKnightMove(toCol - fromCol, toRow - fromRow);\n    case \"♗\": case \"♝\": return isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♕\": case \"♛\": return isValidQueenMove(fromRow, fromCol, toRow, toCol, board);\n    case \"♔\": case \"♚\": return isValidKingMove(fromRow, fromCol, toRow, toCol, board);\n    default: return false;\n  }\n};\n\n// 🏇 Knight move\nconst isValidKnightMove = (dx, dy) => (Math.abs(dx) === 2 && Math.abs(dy) === 1) || (Math.abs(dx) === 1 && Math.abs(dy) === 2);\n\n// 🏰 Rook move\nconst isValidRookMove = (fromRow, fromCol, toRow, toCol, board) => fromRow === toRow || fromCol === toCol ? isPathClear(fromRow, fromCol, toRow, toCol, board) : false;\n\n// 🏹 Bishop move\nconst isValidBishopMove = (fromRow, fromCol, toRow, toCol, board) => Math.abs(fromRow - toRow) === Math.abs(fromCol - toCol) ? isPathClear(fromRow, fromCol, toRow, toCol, board) : false;\n\n// 👑 Queen move\nconst isValidQueenMove = (fromRow, fromCol, toRow, toCol, board) => isValidRookMove(fromRow, fromCol, toRow, toCol, board) || isValidBishopMove(fromRow, fromCol, toRow, toCol, board);\n\n// ⚔ King move\nconst isValidKingMove = (fromRow, fromCol, toRow, toCol, board) => Math.abs(fromCol - toCol) <= 1 && Math.abs(fromRow - toRow) <= 1 || isValidCastling(fromRow, fromCol, toRow, toCol, board);\n\n// 🏇 Pawn move\nconst isValidPawnMove = (fromRow, fromCol, toRow, toCol, board, isWhite, lastMove) => {\n  const direction = isWhite ? -1 : 1;\n  const startRow = isWhite ? 6 : 1;\n  const promotionRow = isWhite ? 0 : 7;\n  const dy = toRow - fromRow;\n  const dx = Math.abs(toCol - fromCol);\n\n  if (dx === 0) {\n    if (dy === direction && !board[toRow][toCol]) return toRow === promotionRow ? \"promotion\" : true;\n    if (fromRow === startRow && dy === 2 * direction && !board[toRow][toCol] && !board[fromRow + direction][fromCol]) return true;\n  }\n\n  if (dx === 1 && dy === direction && board[toRow][toCol]) return true;\n\n  if (dx === 1 && dy === direction && lastMove?.piece.toLowerCase() === \"♙\" && Math.abs(lastMove.fromRow - lastMove.toRow) === 2) {\n    if (lastMove.toRow === fromRow && lastMove.toCol === toCol) return \"en passant\";\n  }\n\n  return false;\n};\n\n// 🏰 Castling\nconst isValidCastling = (fromRow, fromCol, toRow, toCol, board) => {\n  if (Math.abs(fromCol - toCol) !== 2 || fromRow !== toRow) return false;\n  const king = board[fromRow][fromCol];\n  const rookCol = toCol > fromCol ? 7 : 0;\n  const rook = board[fromRow][rookCol];\n\n  if (![\"♔\", \"♚\"].includes(king) || ![\"♖\", \"♜\"].includes(rook) || !isPathClear(fromRow, fromCol, fromRow, rookCol, board)) return false;\n  return true;\n};\n\n// 📏 Check if path is clear\nconst isPathClear = (fromRow, fromCol, toRow, toCol, board) => {\n  const dx = Math.sign(toCol - fromCol);\n  const dy = Math.sign(toRow - fromRow);\n  let x = fromCol + dx, y = fromRow + dy;\n\n  while (x !== toCol || y !== toRow) {\n    if (board[y][x]) return false;\n    x += dx; y += dy;\n  }\n  return true;\n};\n\n// 🔎 Check detection\nexport const isKingInCheck = (turn, board) => {\n  let kingPos = null;\n  board.forEach((row, rIdx) =>\n    row.forEach((piece, cIdx) => {\n      if ((turn === \"white\" && piece === \"♔\") || (turn === \"black\" && piece === \"♚\")) {\n        kingPos = { row: rIdx, col: cIdx };\n      }\n    })\n  );\n\n  return board.some((row, rIdx) =>\n    row.some((piece, cIdx) => {\n      if (piece && ((turn === \"white\" && \"♟♜♞♝♛♚\".includes(piece)) || (turn === \"black\" && \"♙♖♘♗♕♔\".includes(piece)))) {\n        return isValidMove(piece, rIdx, cIdx, kingPos.row, kingPos.col, board, turn);\n      }\n      return false;\n    })\n  );\n};\n\n// 🔥 Lấy tất cả nước đi hợp lệ\nexport const getAllPossibleMoves = (piece, row, col, board) => {\n  let moves = [];\n  for (let r = 0; r < 8; r++) {\n    for (let c = 0; c < 8; c++) {\n      if (isValidMove(piece, row, col, r, c, board, \"white\") || isValidMove(piece, row, col, r, c, board, \"black\")) {\n        moves.push({ row: r, col: c });\n      }\n    }\n  }\n  return moves;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}