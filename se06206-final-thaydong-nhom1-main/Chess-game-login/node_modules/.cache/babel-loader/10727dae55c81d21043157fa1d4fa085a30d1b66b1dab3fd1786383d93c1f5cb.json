{"ast":null,"code":"/**\r\n * Configuration options for STOMP Client, each key corresponds to\r\n * field by the same name in {@link Client}. This can be passed to\r\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\nexport class StompConfig {}","map":{"version":3,"names":["StompConfig"],"sources":["C:\\Users\\admin\\se06206-final-thaydong-nhom1\\se06206-final-thaydong-nhom1-main\\Chess-game-login\\node_modules\\@stomp\\stompjs\\src\\stomp-config.ts"],"sourcesContent":["import { StompHeaders } from './stomp-headers.js';\r\nimport {\r\n  ActivationState,\r\n  closeEventCallbackType,\r\n  debugFnType,\r\n  frameCallbackType,\r\n  messageCallbackType,\r\n  wsErrorCallbackType,\r\n} from './types.js';\r\nimport { Versions } from './versions.js';\r\n\r\n/**\r\n * Configuration options for STOMP Client, each key corresponds to\r\n * field by the same name in {@link Client}. This can be passed to\r\n * the constructor of {@link Client} or to [Client#configure]{@link Client#configure}.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport class StompConfig {\r\n  /**\r\n   * See [Client#brokerURL]{@link Client#brokerURL}.\r\n   */\r\n  public brokerURL?: string;\r\n\r\n  /**\r\n   * See [Client#stompVersions]{@link Client#stompVersions}.\r\n   */\r\n  public stompVersions?: Versions;\r\n\r\n  /**\r\n   * See [Client#webSocketFactory]{@link Client#webSocketFactory}.\r\n   */\r\n  public webSocketFactory?: () => any;\r\n\r\n  /**\r\n   * See [Client#connectionTimeout]{@link Client#connectionTimeout}.\r\n   */\r\n  public connectionTimeout?: number;\r\n\r\n  /**\r\n   * See [Client#reconnectDelay]{@link Client#reconnectDelay}.\r\n   */\r\n  public reconnectDelay?: number;\r\n\r\n  /**\r\n   * See [Client#heartbeatIncoming]{@link Client#heartbeatIncoming}.\r\n   */\r\n  public heartbeatIncoming?: number;\r\n\r\n  /**\r\n   * See [Client#heartbeatOutgoing]{@link Client#heartbeatOutgoing}.\r\n   */\r\n  public heartbeatOutgoing?: number;\r\n\r\n  /**\r\n   * See [Client#splitLargeFrames]{@link Client#splitLargeFrames}.\r\n   */\r\n  public splitLargeFrames?: boolean;\r\n\r\n  /**\r\n   * See [Client#forceBinaryWSFrames]{@link Client#forceBinaryWSFrames}.\r\n   */\r\n  public forceBinaryWSFrames?: boolean;\r\n\r\n  /**\r\n   * See [Client#appendMissingNULLonIncoming]{@link Client#appendMissingNULLonIncoming}.\r\n   */\r\n  public appendMissingNULLonIncoming?: boolean;\r\n\r\n  /**\r\n   * See [Client#maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n   */\r\n  public maxWebSocketChunkSize?: number;\r\n\r\n  /**\r\n   * See [Client#connectHeaders]{@link Client#connectHeaders}.\r\n   */\r\n  public connectHeaders?: StompHeaders;\r\n\r\n  /**\r\n   * See [Client#disconnectHeaders]{@link Client#disconnectHeaders}.\r\n   */\r\n  public disconnectHeaders?: StompHeaders;\r\n\r\n  /**\r\n   * See [Client#onUnhandledMessage]{@link Client#onUnhandledMessage}.\r\n   */\r\n  public onUnhandledMessage?: messageCallbackType;\r\n\r\n  /**\r\n   * See [Client#onUnhandledReceipt]{@link Client#onUnhandledReceipt}.\r\n   */\r\n  public onUnhandledReceipt?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onUnhandledFrame]{@link Client#onUnhandledFrame}.\r\n   */\r\n  public onUnhandledFrame?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#beforeConnect]{@link Client#beforeConnect}.\r\n   */\r\n  public beforeConnect?: () => void | Promise<void>;\r\n\r\n  /**\r\n   * See [Client#onConnect]{@link Client#onConnect}.\r\n   */\r\n  public onConnect?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onDisconnect]{@link Client#onDisconnect}.\r\n   */\r\n  public onDisconnect?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onStompError]{@link Client#onStompError}.\r\n   */\r\n  public onStompError?: frameCallbackType;\r\n\r\n  /**\r\n   * See [Client#onWebSocketClose]{@link Client#onWebSocketClose}.\r\n   */\r\n  public onWebSocketClose?: closeEventCallbackType;\r\n\r\n  /**\r\n   * See [Client#onWebSocketError]{@link Client#onWebSocketError}.\r\n   */\r\n  public onWebSocketError?: wsErrorCallbackType;\r\n\r\n  /**\r\n   * See [Client#logRawCommunication]{@link Client#logRawCommunication}.\r\n   */\r\n  public logRawCommunication?: boolean;\r\n\r\n  /**\r\n   * See [Client#debug]{@link Client#debug}.\r\n   */\r\n  public debug?: debugFnType;\r\n\r\n  /**\r\n   * See [Client#discardWebsocketOnCommFailure]{@link Client#discardWebsocketOnCommFailure}.\r\n   */\r\n  public discardWebsocketOnCommFailure?: boolean;\r\n\r\n  /**\r\n   * See [Client#onChangeState]{@link Client#onChangeState}.\r\n   */\r\n  public onChangeState?: (state: ActivationState) => void;\r\n}\r\n"],"mappings":"AAWA;;;;;;;AAOA,OAAM,MAAOA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}