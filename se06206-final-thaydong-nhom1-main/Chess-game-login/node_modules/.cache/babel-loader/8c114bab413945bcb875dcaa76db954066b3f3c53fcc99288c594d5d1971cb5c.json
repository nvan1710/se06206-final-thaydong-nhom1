{"ast":null,"code":"import { StompHandler } from './stomp-handler.js';\nimport { ActivationState, StompSocketState } from './types.js';\nimport { Versions } from './versions.js';\n/**\r\n * STOMP Client Class.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\nexport class Client {\n  /**\r\n   * Underlying WebSocket instance, READONLY.\r\n   */\n  get webSocket() {\n    return this._stompHandler?._webSocket;\n  }\n  /**\r\n   * Disconnection headers.\r\n   */\n  get disconnectHeaders() {\n    return this._disconnectHeaders;\n  }\n  set disconnectHeaders(value) {\n    this._disconnectHeaders = value;\n    if (this._stompHandler) {\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\n    }\n  }\n  /**\r\n   * `true` if there is an active connection to STOMP Broker\r\n   */\n  get connected() {\n    return !!this._stompHandler && this._stompHandler.connected;\n  }\n  /**\r\n   * version of STOMP protocol negotiated with the server, READONLY\r\n   */\n  get connectedVersion() {\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\n  }\n  /**\r\n   * if the client is active (connected or going to reconnect)\r\n   */\n  get active() {\n    return this.state === ActivationState.ACTIVE;\n  }\n  _changeState(state) {\n    this.state = state;\n    this.onChangeState(state);\n  }\n  /**\r\n   * Create an instance.\r\n   */\n  constructor(conf = {}) {\n    /**\r\n     * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\r\n     *\r\n     * Example:\r\n     * ```javascript\r\n     *        // Try only versions 1.1 and 1.0\r\n     *        client.stompVersions = new Versions(['1.1', '1.0'])\r\n     * ```\r\n     */\n    this.stompVersions = Versions.default;\n    /**\r\n     * Will retry if Stomp connection is not established in specified milliseconds.\r\n     * Default 0, which switches off automatic reconnection.\r\n     */\n    this.connectionTimeout = 0;\n    /**\r\n     *  automatically reconnect with delay in milliseconds, set to 0 to disable.\r\n     */\n    this.reconnectDelay = 5000;\n    /**\r\n     * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n    this.heartbeatIncoming = 10000;\n    /**\r\n     * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\r\n     */\n    this.heartbeatOutgoing = 10000;\n    /**\r\n     * This switches on a non-standard behavior while sending WebSocket packets.\r\n     * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n     * Only Java Spring brokers seem to support this mode.\r\n     *\r\n     * WebSockets, by itself, split large (text) packets,\r\n     * so it is not needed with a truly compliant STOMP/WebSocket broker.\r\n     * Setting it for such a broker will cause large messages to fail.\r\n     *\r\n     * `false` by default.\r\n     *\r\n     * Binary frames are never split.\r\n     */\n    this.splitLargeFrames = false;\n    /**\r\n     * See [splitLargeFrames]{@link Client#splitLargeFrames}.\r\n     * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\r\n     */\n    this.maxWebSocketChunkSize = 8 * 1024;\n    /**\r\n     * Usually the\r\n     * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\r\n     * is automatically decided by type of the payload.\r\n     * Default is `false`, which should work with all compliant brokers.\r\n     *\r\n     * Set this flag to force binary frames.\r\n     */\n    this.forceBinaryWSFrames = false;\n    /**\r\n     * A bug in ReactNative chops a string on occurrence of a NULL.\r\n     * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\r\n     * This makes incoming WebSocket messages invalid STOMP packets.\r\n     * Setting this flag attempts to reverse the damage by appending a NULL.\r\n     * If the broker splits a large message into multiple WebSocket messages,\r\n     * this flag will cause data loss and abnormal termination of connection.\r\n     *\r\n     * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\r\n     */\n    this.appendMissingNULLonIncoming = false;\n    /**\r\n     * Browsers do not immediately close WebSockets when `.close` is issued.\r\n     * This may cause reconnection to take a significantly long time in case\r\n     *  of some types of failures.\r\n     * In case of incoming heartbeat failure, this experimental flag instructs\r\n     * the library to discard the socket immediately\r\n     * (even before it is actually closed).\r\n     */\n    this.discardWebsocketOnCommFailure = false;\n    /**\r\n     * Activation state.\r\n     *\r\n     * It will usually be ACTIVE or INACTIVE.\r\n     * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n     */\n    this.state = ActivationState.INACTIVE;\n    // No op callbacks\n    const noOp = () => {};\n    this.debug = noOp;\n    this.beforeConnect = noOp;\n    this.onConnect = noOp;\n    this.onDisconnect = noOp;\n    this.onUnhandledMessage = noOp;\n    this.onUnhandledReceipt = noOp;\n    this.onUnhandledFrame = noOp;\n    this.onStompError = noOp;\n    this.onWebSocketClose = noOp;\n    this.onWebSocketError = noOp;\n    this.logRawCommunication = false;\n    this.onChangeState = noOp;\n    // These parameters would typically get proper values before connect is called\n    this.connectHeaders = {};\n    this._disconnectHeaders = {};\n    // Apply configuration\n    this.configure(conf);\n  }\n  /**\r\n   * Update configuration.\r\n   */\n  configure(conf) {\n    // bulk assign all properties to this\n    Object.assign(this, conf);\n  }\n  /**\r\n   * Initiate the connection with the broker.\r\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\r\n   * it will keep trying to reconnect.\r\n   *\r\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\r\n   */\n  activate() {\n    const _activate = () => {\n      if (this.active) {\n        this.debug('Already ACTIVE, ignoring request to activate');\n        return;\n      }\n      this._changeState(ActivationState.ACTIVE);\n      this._connect();\n    };\n    // if it is deactivating, wait for it to complete before activating.\n    if (this.state === ActivationState.DEACTIVATING) {\n      this.debug('Waiting for deactivation to finish before activating');\n      this.deactivate().then(() => {\n        _activate();\n      });\n    } else {\n      _activate();\n    }\n  }\n  async _connect() {\n    await this.beforeConnect();\n    if (this._stompHandler) {\n      this.debug('There is already a stompHandler, skipping the call to connect');\n      return;\n    }\n    if (!this.active) {\n      this.debug('Client has been marked inactive, will not attempt to connect');\n      return;\n    }\n    // setup connection watcher\n    if (this.connectionTimeout > 0) {\n      // clear first\n      if (this._connectionWatcher) {\n        clearTimeout(this._connectionWatcher);\n      }\n      this._connectionWatcher = setTimeout(() => {\n        if (this.connected) {\n          return;\n        }\n        // Connection not established, close the underlying socket\n        // a reconnection will be attempted\n        this.debug(`Connection not established in ${this.connectionTimeout}ms, closing socket`);\n        this.forceDisconnect();\n      }, this.connectionTimeout);\n    }\n    this.debug('Opening Web Socket...');\n    // Get the actual WebSocket (or a similar object)\n    const webSocket = this._createWebSocket();\n    this._stompHandler = new StompHandler(this, webSocket, {\n      debug: this.debug,\n      stompVersions: this.stompVersions,\n      connectHeaders: this.connectHeaders,\n      disconnectHeaders: this._disconnectHeaders,\n      heartbeatIncoming: this.heartbeatIncoming,\n      heartbeatOutgoing: this.heartbeatOutgoing,\n      splitLargeFrames: this.splitLargeFrames,\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\n      logRawCommunication: this.logRawCommunication,\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\n      discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\n      onConnect: frame => {\n        // Successfully connected, stop the connection watcher\n        if (this._connectionWatcher) {\n          clearTimeout(this._connectionWatcher);\n          this._connectionWatcher = undefined;\n        }\n        if (!this.active) {\n          this.debug('STOMP got connected while deactivate was issued, will disconnect now');\n          this._disposeStompHandler();\n          return;\n        }\n        this.onConnect(frame);\n      },\n      onDisconnect: frame => {\n        this.onDisconnect(frame);\n      },\n      onStompError: frame => {\n        this.onStompError(frame);\n      },\n      onWebSocketClose: evt => {\n        this._stompHandler = undefined; // a new one will be created in case of a reconnect\n        if (this.state === ActivationState.DEACTIVATING) {\n          // Mark deactivation complete\n          this._changeState(ActivationState.INACTIVE);\n        }\n        // The callback is called before attempting to reconnect, this would allow the client\n        // to be `deactivated` in the callback.\n        this.onWebSocketClose(evt);\n        if (this.active) {\n          this._schedule_reconnect();\n        }\n      },\n      onWebSocketError: evt => {\n        this.onWebSocketError(evt);\n      },\n      onUnhandledMessage: message => {\n        this.onUnhandledMessage(message);\n      },\n      onUnhandledReceipt: frame => {\n        this.onUnhandledReceipt(frame);\n      },\n      onUnhandledFrame: frame => {\n        this.onUnhandledFrame(frame);\n      }\n    });\n    this._stompHandler.start();\n  }\n  _createWebSocket() {\n    let webSocket;\n    if (this.webSocketFactory) {\n      webSocket = this.webSocketFactory();\n    } else if (this.brokerURL) {\n      webSocket = new WebSocket(this.brokerURL, this.stompVersions.protocolVersions());\n    } else {\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\n    }\n    webSocket.binaryType = 'arraybuffer';\n    return webSocket;\n  }\n  _schedule_reconnect() {\n    if (this.reconnectDelay > 0) {\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\n      this._reconnector = setTimeout(() => {\n        this._connect();\n      }, this.reconnectDelay);\n    }\n  }\n  /**\r\n   * Disconnect if connected and stop auto reconnect loop.\r\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\r\n   *\r\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\r\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\r\n   *\r\n   * It is not an error to invoke this method more than once.\r\n   * Each of those would resolve on completion of deactivation.\r\n   *\r\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\r\n   *\r\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\r\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\r\n   * In some cases, browsers take a long time in the Websocket shutdown\r\n   * if the underlying connection had gone stale.\r\n   * Using this mode can speed up.\r\n   * When this mode is used, the actual Websocket may linger for a while\r\n   * and the broker may not realize that the connection is no longer in use.\r\n   *\r\n   * It is possible to invoke this method initially without the `force` option\r\n   * and subsequently, say after a wait, with the `force` option.\r\n   */\n  async deactivate(options = {}) {\n    const force = options.force || false;\n    const needToDispose = this.active;\n    let retPromise;\n    if (this.state === ActivationState.INACTIVE) {\n      this.debug(`Already INACTIVE, nothing more to do`);\n      return Promise.resolve();\n    }\n    this._changeState(ActivationState.DEACTIVATING);\n    // Clear if a reconnection was scheduled\n    if (this._reconnector) {\n      clearTimeout(this._reconnector);\n      this._reconnector = undefined;\n    }\n    if (this._stompHandler &&\n    // @ts-ignore - if there is a _stompHandler, there is the webSocket\n    this.webSocket.readyState !== StompSocketState.CLOSED) {\n      const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\n      // we need to wait for the underlying websocket to close\n      retPromise = new Promise((resolve, reject) => {\n        // @ts-ignore - there is a _stompHandler\n        this._stompHandler.onWebSocketClose = evt => {\n          origOnWebSocketClose(evt);\n          resolve();\n        };\n      });\n    } else {\n      // indicate that auto reconnect loop should terminate\n      this._changeState(ActivationState.INACTIVE);\n      return Promise.resolve();\n    }\n    if (force) {\n      this._stompHandler?.discardWebsocket();\n    } else if (needToDispose) {\n      this._disposeStompHandler();\n    }\n    return retPromise;\n  }\n  /**\r\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\r\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\r\n   * After forcing disconnect, automatic reconnect will be attempted.\r\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\r\n   */\n  forceDisconnect() {\n    if (this._stompHandler) {\n      this._stompHandler.forceDisconnect();\n    }\n  }\n  _disposeStompHandler() {\n    // Dispose STOMP Handler\n    if (this._stompHandler) {\n      this._stompHandler.dispose();\n    }\n  }\n  /**\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations.\r\n   *\r\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\r\n   *\r\n   * `body` must be String.\r\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\r\n   *\r\n   * To send a binary message body, use `binaryBody` parameter. It should be a\r\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\r\n   * Sometimes brokers may not support binary frames out of the box.\r\n   * Please check your broker documentation.\r\n   *\r\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\r\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\r\n   * For binary messages, `content-length` header is always added.\r\n   *\r\n   * Caution: The broker will, most likely, report an error and disconnect\r\n   * if the message body has NULL octet(s) and `content-length` header is missing.\r\n   *\r\n   * ```javascript\r\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Only destination is mandatory parameter\r\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Skip content-length header in the frame to the broker\r\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\r\n   *\r\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\r\n   *        // setting content-type header is not mandatory, however a good practice\r\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\r\n   *                         headers: {'content-type': 'application/octet-stream'}});\r\n   * ```\r\n   */\n  publish(params) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.publish(params);\n  }\n  _checkConnection() {\n    if (!this.connected) {\n      throw new TypeError('There is no underlying STOMP connection');\n    }\n  }\n  /**\r\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\r\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\r\n   * The value (say receipt-id) for this header needs to be unique for each use.\r\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\r\n   *\r\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\r\n   * The operation needs to be matched based on the value of the receipt-id.\r\n   *\r\n   * This method allows watching for a receipt and invoking the callback\r\n   *  when the corresponding receipt has been received.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Subscribing with acknowledgement\r\n   *        let receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *\r\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\r\n   *\r\n   *\r\n   *        // Publishing with acknowledgement\r\n   *        receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\r\n   * ```\r\n   */\n  watchForReceipt(receiptId, callback) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.watchForReceipt(receiptId, callback);\n  }\n  /**\r\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\r\n   * received message with the {@link IMessage} as argument.\r\n   *\r\n   * Note: The library will generate a unique ID if there is none provided in the headers.\r\n   *       To use your own ID, pass it using the `headers` argument.\r\n   *\r\n   * ```javascript\r\n   *        callback = function(message) {\r\n   *        // called when the client receives a STOMP message from the server\r\n   *          if (message.body) {\r\n   *            alert(\"got message with body \" + message.body)\r\n   *          } else {\r\n   *            alert(\"got empty message\");\r\n   *          }\r\n   *        });\r\n   *\r\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\r\n   *\r\n   *        // Explicit subscription id\r\n   *        var mySubId = 'my-subscription-id-001';\r\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\r\n   * ```\r\n   */\n  subscribe(destination, callback, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.subscribe(destination, callback, headers);\n  }\n  /**\r\n   * It is preferable to unsubscribe from a subscription by calling\r\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\r\n   *\r\n   * ```javascript\r\n   *        var subscription = client.subscribe(destination, onmessage);\r\n   *        // ...\r\n   *        subscription.unsubscribe();\r\n   * ```\r\n   *\r\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\r\n   */\n  unsubscribe(id, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.unsubscribe(id, headers);\n  }\n  /**\r\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\r\n   * and [abort]{@link ITransaction#abort}.\r\n   *\r\n   * `transactionId` is optional, if not passed the library will generate it internally.\r\n   */\n  begin(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    return this._stompHandler.begin(transactionId);\n  }\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.commit();\r\n   * ```\r\n   */\n  commit(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.commit(transactionId);\n  }\n  /**\r\n   * Abort a transaction.\r\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.abort();\r\n   * ```\r\n   */\n  abort(transactionId) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.abort(transactionId);\n  }\n  /**\r\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // acknowledge it\r\n   *          message.ack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n  ack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.ack(messageId, subscriptionId, headers);\n  }\n  /**\r\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // an error occurs, nack it\r\n   *          message.nack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\n  nack(messageId, subscriptionId, headers = {}) {\n    this._checkConnection();\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\n    this._stompHandler.nack(messageId, subscriptionId, headers);\n  }\n}","map":{"version":3,"names":["StompHandler","ActivationState","StompSocketState","Versions","Client","webSocket","_stompHandler","_webSocket","disconnectHeaders","_disconnectHeaders","value","connected","connectedVersion","undefined","active","state","ACTIVE","_changeState","onChangeState","constructor","conf","stompVersions","default","connectionTimeout","reconnectDelay","heartbeatIncoming","heartbeatOutgoing","splitLargeFrames","maxWebSocketChunkSize","forceBinaryWSFrames","appendMissingNULLonIncoming","discardWebsocketOnCommFailure","INACTIVE","noOp","debug","beforeConnect","onConnect","onDisconnect","onUnhandledMessage","onUnhandledReceipt","onUnhandledFrame","onStompError","onWebSocketClose","onWebSocketError","logRawCommunication","connectHeaders","configure","Object","assign","activate","_activate","_connect","DEACTIVATING","deactivate","then","_connectionWatcher","clearTimeout","setTimeout","forceDisconnect","_createWebSocket","frame","_disposeStompHandler","evt","_schedule_reconnect","message","start","webSocketFactory","brokerURL","WebSocket","protocolVersions","Error","binaryType","_reconnector","options","force","needToDispose","retPromise","Promise","resolve","readyState","CLOSED","origOnWebSocketClose","reject","discardWebsocket","dispose","publish","params","_checkConnection","TypeError","watchForReceipt","receiptId","callback","subscribe","destination","headers","unsubscribe","id","begin","transactionId","commit","abort","ack","messageId","subscriptionId","nack"],"sources":["C:\\Users\\admin\\se06206-final-thaydong-nhom1\\se06206-final-thaydong-nhom1-main\\Chess-game-login\\node_modules\\@stomp\\stompjs\\src\\client.ts"],"sourcesContent":["import { ITransaction } from './i-transaction.js';\r\nimport { StompConfig } from './stomp-config.js';\r\nimport { StompHandler } from './stomp-handler.js';\r\nimport { StompHeaders } from './stomp-headers.js';\r\nimport { StompSubscription } from './stomp-subscription.js';\r\nimport {\r\n  ActivationState,\r\n  closeEventCallbackType,\r\n  debugFnType,\r\n  frameCallbackType,\r\n  IPublishParams,\r\n  IStompSocket,\r\n  messageCallbackType,\r\n  StompSocketState,\r\n  wsErrorCallbackType,\r\n} from './types.js';\r\nimport { Versions } from './versions.js';\r\n\r\n/**\r\n * @internal\r\n */\r\ndeclare const WebSocket: {\r\n  prototype: IStompSocket;\r\n  new (url: string, protocols?: string | string[]): IStompSocket;\r\n};\r\n\r\n/**\r\n * STOMP Client Class.\r\n *\r\n * Part of `@stomp/stompjs`.\r\n */\r\nexport class Client {\r\n  /**\r\n   * The URL for the STOMP broker to connect to.\r\n   * Typically like `\"ws://broker.329broker.com:15674/ws\"` or `\"wss://broker.329broker.com:15674/ws\"`.\r\n   *\r\n   * Only one of this or [Client#webSocketFactory]{@link Client#webSocketFactory} need to be set.\r\n   * If both are set, [Client#webSocketFactory]{@link Client#webSocketFactory} will be used.\r\n   *\r\n   * If your environment does not support WebSockets natively, please refer to\r\n   * [Polyfills]{@link https://stomp-js.github.io/guide/stompjs/rx-stomp/ng2-stompjs/pollyfils-for-stompjs-v5.html}.\r\n   */\r\n  public brokerURL: string | undefined;\r\n\r\n  /**\r\n   * STOMP versions to attempt during STOMP handshake. By default, versions `1.2`, `1.1`, and `1.0` are attempted.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Try only versions 1.1 and 1.0\r\n   *        client.stompVersions = new Versions(['1.1', '1.0'])\r\n   * ```\r\n   */\r\n  public stompVersions = Versions.default;\r\n\r\n  /**\r\n   * This function should return a WebSocket or a similar (e.g. SockJS) object.\r\n   * If your environment does not support WebSockets natively, please refer to\r\n   * [Polyfills]{@link https://stomp-js.github.io/guide/stompjs/rx-stomp/ng2-stompjs/pollyfils-for-stompjs-v5.html}.\r\n   * If your STOMP Broker supports WebSockets, prefer setting [Client#brokerURL]{@link Client#brokerURL}.\r\n   *\r\n   * If both this and [Client#brokerURL]{@link Client#brokerURL} are set, this will be used.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // use a WebSocket\r\n   *        client.webSocketFactory= function () {\r\n   *          return new WebSocket(\"wss://broker.329broker.com:15674/ws\");\r\n   *        };\r\n   *\r\n   *        // Typical usage with SockJS\r\n   *        client.webSocketFactory= function () {\r\n   *          return new SockJS(\"http://broker.329broker.com/stomp\");\r\n   *        };\r\n   * ```\r\n   */\r\n  public webSocketFactory: (() => IStompSocket) | undefined;\r\n\r\n  /**\r\n   * Will retry if Stomp connection is not established in specified milliseconds.\r\n   * Default 0, which switches off automatic reconnection.\r\n   */\r\n  public connectionTimeout: number = 0;\r\n\r\n  // As per https://stackoverflow.com/questions/45802988/typescript-use-correct-version-of-settimeout-node-vs-window/56239226#56239226\r\n  private _connectionWatcher: ReturnType<typeof setTimeout> | undefined; // Timer\r\n\r\n  /**\r\n   *  automatically reconnect with delay in milliseconds, set to 0 to disable.\r\n   */\r\n  public reconnectDelay: number = 5000;\r\n\r\n  /**\r\n   * Incoming heartbeat interval in milliseconds. Set to 0 to disable.\r\n   */\r\n  public heartbeatIncoming: number = 10000;\r\n\r\n  /**\r\n   * Outgoing heartbeat interval in milliseconds. Set to 0 to disable.\r\n   */\r\n  public heartbeatOutgoing: number = 10000;\r\n\r\n  /**\r\n   * This switches on a non-standard behavior while sending WebSocket packets.\r\n   * It splits larger (text) packets into chunks of [maxWebSocketChunkSize]{@link Client#maxWebSocketChunkSize}.\r\n   * Only Java Spring brokers seem to support this mode.\r\n   *\r\n   * WebSockets, by itself, split large (text) packets,\r\n   * so it is not needed with a truly compliant STOMP/WebSocket broker.\r\n   * Setting it for such a broker will cause large messages to fail.\r\n   *\r\n   * `false` by default.\r\n   *\r\n   * Binary frames are never split.\r\n   */\r\n  public splitLargeFrames: boolean = false;\r\n\r\n  /**\r\n   * See [splitLargeFrames]{@link Client#splitLargeFrames}.\r\n   * This has no effect if [splitLargeFrames]{@link Client#splitLargeFrames} is `false`.\r\n   */\r\n  public maxWebSocketChunkSize: number = 8 * 1024;\r\n\r\n  /**\r\n   * Usually the\r\n   * [type of WebSocket frame]{@link https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send#Parameters}\r\n   * is automatically decided by type of the payload.\r\n   * Default is `false`, which should work with all compliant brokers.\r\n   *\r\n   * Set this flag to force binary frames.\r\n   */\r\n  public forceBinaryWSFrames: boolean = false;\r\n\r\n  /**\r\n   * A bug in ReactNative chops a string on occurrence of a NULL.\r\n   * See issue [https://github.com/stomp-js/stompjs/issues/89]{@link https://github.com/stomp-js/stompjs/issues/89}.\r\n   * This makes incoming WebSocket messages invalid STOMP packets.\r\n   * Setting this flag attempts to reverse the damage by appending a NULL.\r\n   * If the broker splits a large message into multiple WebSocket messages,\r\n   * this flag will cause data loss and abnormal termination of connection.\r\n   *\r\n   * This is not an ideal solution, but a stop gap until the underlying issue is fixed at ReactNative library.\r\n   */\r\n  public appendMissingNULLonIncoming: boolean = false;\r\n\r\n  /**\r\n   * Underlying WebSocket instance, READONLY.\r\n   */\r\n  get webSocket(): IStompSocket | undefined {\r\n    return this._stompHandler?._webSocket;\r\n  }\r\n\r\n  /**\r\n   * Connection headers, important keys - `login`, `passcode`, `host`.\r\n   * Though STOMP 1.2 standard marks these keys to be present, check your broker documentation for\r\n   * details specific to your broker.\r\n   */\r\n  public connectHeaders: StompHeaders;\r\n\r\n  /**\r\n   * Disconnection headers.\r\n   */\r\n  get disconnectHeaders(): StompHeaders {\r\n    return this._disconnectHeaders;\r\n  }\r\n\r\n  set disconnectHeaders(value: StompHeaders) {\r\n    this._disconnectHeaders = value;\r\n    if (this._stompHandler) {\r\n      this._stompHandler.disconnectHeaders = this._disconnectHeaders;\r\n    }\r\n  }\r\n  private _disconnectHeaders: StompHeaders;\r\n\r\n  /**\r\n   * This function will be called for any unhandled messages.\r\n   * It is useful for receiving messages sent to RabbitMQ temporary queues.\r\n   *\r\n   * It can also get invoked with stray messages while the server is processing\r\n   * a request to [Client#unsubscribe]{@link Client#unsubscribe}\r\n   * from an endpoint.\r\n   *\r\n   * The actual {@link IMessage} will be passed as parameter to the callback.\r\n   */\r\n  public onUnhandledMessage: messageCallbackType;\r\n\r\n  /**\r\n   * STOMP brokers can be requested to notify when an operation is actually completed.\r\n   * Prefer using [Client#watchForReceipt]{@link Client#watchForReceipt}. See\r\n   * [Client#watchForReceipt]{@link Client#watchForReceipt} for examples.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   */\r\n  public onUnhandledReceipt: frameCallbackType;\r\n\r\n  /**\r\n   * Will be invoked if {@link IFrame} of an unknown type is received from the STOMP broker.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   */\r\n  public onUnhandledFrame: frameCallbackType;\r\n\r\n  /**\r\n   * `true` if there is an active connection to STOMP Broker\r\n   */\r\n  get connected(): boolean {\r\n    return !!this._stompHandler && this._stompHandler.connected;\r\n  }\r\n\r\n  /**\r\n   * Callback, invoked on before a connection to the STOMP broker.\r\n   *\r\n   * You can change options on the client, which will impact the immediate connecting.\r\n   * It is valid to call [Client#decativate]{@link Client#deactivate} in this callback.\r\n   *\r\n   * As of version 5.1, this callback can be\r\n   * [async](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function)\r\n   * (i.e., it can return a\r\n   * [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)).\r\n   * In that case, connect will be called only after the Promise is resolved.\r\n   * This can be used to reliably fetch credentials, access token etc. from some other service\r\n   * in an asynchronous way.\r\n   */\r\n  public beforeConnect: () => void | Promise<void>;\r\n\r\n  /**\r\n   * Callback, invoked on every successful connection to the STOMP broker.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   * Sometimes clients will like to use headers from this frame.\r\n   */\r\n  public onConnect: frameCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked on every successful disconnection from the STOMP broker. It will not be invoked if\r\n   * the STOMP broker disconnected due to an error.\r\n   *\r\n   * The actual Receipt {@link IFrame} acknowledging the DISCONNECT will be passed as parameter to the callback.\r\n   *\r\n   * The way STOMP protocol is designed, the connection may close/terminate without the client\r\n   * receiving the Receipt {@link IFrame} acknowledging the DISCONNECT.\r\n   * You might find [Client#onWebSocketClose]{@link Client#onWebSocketClose} more appropriate to watch\r\n   * STOMP broker disconnects.\r\n   */\r\n  public onDisconnect: frameCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked on an ERROR frame received from the STOMP Broker.\r\n   * A compliant STOMP Broker will close the connection after this type of frame.\r\n   * Please check broker specific documentation for exact behavior.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   */\r\n  public onStompError: frameCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked when underlying WebSocket is closed.\r\n   *\r\n   * Actual [CloseEvent]{@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\r\n   * is passed as parameter to the callback.\r\n   */\r\n  public onWebSocketClose: closeEventCallbackType;\r\n\r\n  /**\r\n   * Callback, invoked when underlying WebSocket raises an error.\r\n   *\r\n   * Actual [Event]{@link https://developer.mozilla.org/en-US/docs/Web/API/Event}\r\n   * is passed as parameter to the callback.\r\n   */\r\n  public onWebSocketError: wsErrorCallbackType;\r\n\r\n  /**\r\n   * Set it to log the actual raw communication with the broker.\r\n   * When unset, it logs headers of the parsed frames.\r\n   *\r\n   * Changes effect from the next broker reconnect.\r\n   *\r\n   * **Caution: this assumes that frames only have valid UTF8 strings.**\r\n   */\r\n  public logRawCommunication: boolean;\r\n\r\n  /**\r\n   * By default, debug messages are discarded. To log to `console` following can be used:\r\n   *\r\n   * ```javascript\r\n   *        client.debug = function(str) {\r\n   *          console.log(str);\r\n   *        };\r\n   * ```\r\n   *\r\n   * Currently this method does not support levels of log. Be aware that the\r\n   * output can be quite verbose\r\n   * and may contain sensitive information (like passwords, tokens etc.).\r\n   */\r\n  public debug: debugFnType;\r\n\r\n  /**\r\n   * Browsers do not immediately close WebSockets when `.close` is issued.\r\n   * This may cause reconnection to take a significantly long time in case\r\n   *  of some types of failures.\r\n   * In case of incoming heartbeat failure, this experimental flag instructs\r\n   * the library to discard the socket immediately\r\n   * (even before it is actually closed).\r\n   */\r\n  public discardWebsocketOnCommFailure: boolean = false;\r\n\r\n  /**\r\n   * version of STOMP protocol negotiated with the server, READONLY\r\n   */\r\n  get connectedVersion(): string | undefined {\r\n    return this._stompHandler ? this._stompHandler.connectedVersion : undefined;\r\n  }\r\n\r\n  private _stompHandler: StompHandler | undefined;\r\n\r\n  /**\r\n   * if the client is active (connected or going to reconnect)\r\n   */\r\n  get active(): boolean {\r\n    return this.state === ActivationState.ACTIVE;\r\n  }\r\n\r\n  /**\r\n   * It will be called on state change.\r\n   *\r\n   * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n   */\r\n  public onChangeState: (state: ActivationState) => void;\r\n\r\n  private _changeState(state: ActivationState) {\r\n    this.state = state;\r\n    this.onChangeState(state);\r\n  }\r\n\r\n  /**\r\n   * Activation state.\r\n   *\r\n   * It will usually be ACTIVE or INACTIVE.\r\n   * When deactivating, it may go from ACTIVE to INACTIVE without entering DEACTIVATING.\r\n   */\r\n  public state: ActivationState = ActivationState.INACTIVE;\r\n\r\n  private _reconnector: any;\r\n\r\n  /**\r\n   * Create an instance.\r\n   */\r\n  constructor(conf: StompConfig = {}) {\r\n    // No op callbacks\r\n    const noOp = () => {};\r\n    this.debug = noOp;\r\n    this.beforeConnect = noOp;\r\n    this.onConnect = noOp;\r\n    this.onDisconnect = noOp;\r\n    this.onUnhandledMessage = noOp;\r\n    this.onUnhandledReceipt = noOp;\r\n    this.onUnhandledFrame = noOp;\r\n    this.onStompError = noOp;\r\n    this.onWebSocketClose = noOp;\r\n    this.onWebSocketError = noOp;\r\n    this.logRawCommunication = false;\r\n    this.onChangeState = noOp;\r\n\r\n    // These parameters would typically get proper values before connect is called\r\n    this.connectHeaders = {};\r\n    this._disconnectHeaders = {};\r\n\r\n    // Apply configuration\r\n    this.configure(conf);\r\n  }\r\n\r\n  /**\r\n   * Update configuration.\r\n   */\r\n  public configure(conf: StompConfig): void {\r\n    // bulk assign all properties to this\r\n    (Object as any).assign(this, conf);\r\n  }\r\n\r\n  /**\r\n   * Initiate the connection with the broker.\r\n   * If the connection breaks, as per [Client#reconnectDelay]{@link Client#reconnectDelay},\r\n   * it will keep trying to reconnect.\r\n   *\r\n   * Call [Client#deactivate]{@link Client#deactivate} to disconnect and stop reconnection attempts.\r\n   */\r\n  public activate(): void {\r\n    const _activate = () => {\r\n      if (this.active) {\r\n        this.debug('Already ACTIVE, ignoring request to activate');\r\n        return;\r\n      }\r\n\r\n      this._changeState(ActivationState.ACTIVE);\r\n\r\n      this._connect();\r\n    };\r\n\r\n    // if it is deactivating, wait for it to complete before activating.\r\n    if (this.state === ActivationState.DEACTIVATING) {\r\n      this.debug('Waiting for deactivation to finish before activating');\r\n      this.deactivate().then(() => {\r\n        _activate();\r\n      });\r\n    } else {\r\n      _activate();\r\n    }\r\n  }\r\n\r\n  private async _connect(): Promise<void> {\r\n    await this.beforeConnect();\r\n\r\n    if (this._stompHandler) {\r\n      this.debug('There is already a stompHandler, skipping the call to connect');\r\n      return;\r\n    }\r\n\r\n    if (!this.active) {\r\n      this.debug(\r\n        'Client has been marked inactive, will not attempt to connect'\r\n      );\r\n      return;\r\n    }\r\n\r\n    // setup connection watcher\r\n    if (this.connectionTimeout > 0) {\r\n      // clear first\r\n      if (this._connectionWatcher) {\r\n        clearTimeout(this._connectionWatcher);\r\n      }\r\n      this._connectionWatcher = setTimeout(() => {\r\n        if (this.connected) {\r\n          return;\r\n        }\r\n        // Connection not established, close the underlying socket\r\n        // a reconnection will be attempted\r\n        this.debug(\r\n          `Connection not established in ${this.connectionTimeout}ms, closing socket`\r\n        );\r\n        this.forceDisconnect();\r\n      }, this.connectionTimeout);\r\n    }\r\n\r\n    this.debug('Opening Web Socket...');\r\n\r\n    // Get the actual WebSocket (or a similar object)\r\n    const webSocket = this._createWebSocket();\r\n\r\n    this._stompHandler = new StompHandler(this, webSocket, {\r\n      debug: this.debug,\r\n      stompVersions: this.stompVersions,\r\n      connectHeaders: this.connectHeaders,\r\n      disconnectHeaders: this._disconnectHeaders,\r\n      heartbeatIncoming: this.heartbeatIncoming,\r\n      heartbeatOutgoing: this.heartbeatOutgoing,\r\n      splitLargeFrames: this.splitLargeFrames,\r\n      maxWebSocketChunkSize: this.maxWebSocketChunkSize,\r\n      forceBinaryWSFrames: this.forceBinaryWSFrames,\r\n      logRawCommunication: this.logRawCommunication,\r\n      appendMissingNULLonIncoming: this.appendMissingNULLonIncoming,\r\n      discardWebsocketOnCommFailure: this.discardWebsocketOnCommFailure,\r\n\r\n      onConnect: frame => {\r\n        // Successfully connected, stop the connection watcher\r\n        if (this._connectionWatcher) {\r\n          clearTimeout(this._connectionWatcher);\r\n          this._connectionWatcher = undefined;\r\n        }\r\n\r\n        if (!this.active) {\r\n          this.debug(\r\n            'STOMP got connected while deactivate was issued, will disconnect now'\r\n          );\r\n          this._disposeStompHandler();\r\n          return;\r\n        }\r\n        this.onConnect(frame);\r\n      },\r\n      onDisconnect: frame => {\r\n        this.onDisconnect(frame);\r\n      },\r\n      onStompError: frame => {\r\n        this.onStompError(frame);\r\n      },\r\n      onWebSocketClose: evt => {\r\n        this._stompHandler = undefined; // a new one will be created in case of a reconnect\r\n\r\n        if (this.state === ActivationState.DEACTIVATING) {\r\n          // Mark deactivation complete\r\n          this._changeState(ActivationState.INACTIVE);\r\n        }\r\n\r\n        // The callback is called before attempting to reconnect, this would allow the client\r\n        // to be `deactivated` in the callback.\r\n        this.onWebSocketClose(evt);\r\n\r\n        if (this.active) {\r\n          this._schedule_reconnect();\r\n        }\r\n      },\r\n      onWebSocketError: evt => {\r\n        this.onWebSocketError(evt);\r\n      },\r\n      onUnhandledMessage: message => {\r\n        this.onUnhandledMessage(message);\r\n      },\r\n      onUnhandledReceipt: frame => {\r\n        this.onUnhandledReceipt(frame);\r\n      },\r\n      onUnhandledFrame: frame => {\r\n        this.onUnhandledFrame(frame);\r\n      },\r\n    });\r\n\r\n    this._stompHandler.start();\r\n  }\r\n\r\n  private _createWebSocket(): IStompSocket {\r\n    let webSocket: IStompSocket;\r\n\r\n    if (this.webSocketFactory) {\r\n      webSocket = this.webSocketFactory();\r\n    } else if (this.brokerURL) {\r\n      webSocket = new WebSocket(\r\n        this.brokerURL,\r\n        this.stompVersions.protocolVersions()\r\n      );\r\n    } else {\r\n      throw new Error('Either brokerURL or webSocketFactory must be provided');\r\n    }\r\n    webSocket.binaryType = 'arraybuffer';\r\n    return webSocket;\r\n  }\r\n\r\n  private _schedule_reconnect(): void {\r\n    if (this.reconnectDelay > 0) {\r\n      this.debug(`STOMP: scheduling reconnection in ${this.reconnectDelay}ms`);\r\n\r\n      this._reconnector = setTimeout(() => {\r\n        this._connect();\r\n      }, this.reconnectDelay);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disconnect if connected and stop auto reconnect loop.\r\n   * Appropriate callbacks will be invoked if there is an underlying STOMP connection.\r\n   *\r\n   * This call is async. It will resolve immediately if there is no underlying active websocket,\r\n   * otherwise, it will resolve after the underlying websocket is properly disposed of.\r\n   *\r\n   * It is not an error to invoke this method more than once.\r\n   * Each of those would resolve on completion of deactivation.\r\n   *\r\n   * To reactivate, you can call [Client#activate]{@link Client#activate}.\r\n   *\r\n   * Experimental: pass `force: true` to immediately discard the underlying connection.\r\n   * This mode will skip both the STOMP and the Websocket shutdown sequences.\r\n   * In some cases, browsers take a long time in the Websocket shutdown\r\n   * if the underlying connection had gone stale.\r\n   * Using this mode can speed up.\r\n   * When this mode is used, the actual Websocket may linger for a while\r\n   * and the broker may not realize that the connection is no longer in use.\r\n   *\r\n   * It is possible to invoke this method initially without the `force` option\r\n   * and subsequently, say after a wait, with the `force` option.\r\n   */\r\n  public async deactivate(options: { force?: boolean } = {}): Promise<void> {\r\n    const force: boolean = options.force || false;\r\n    const needToDispose = this.active;\r\n    let retPromise: Promise<void>;\r\n\r\n    if (this.state === ActivationState.INACTIVE) {\r\n      this.debug(`Already INACTIVE, nothing more to do`);\r\n      return Promise.resolve();\r\n    }\r\n\r\n    this._changeState(ActivationState.DEACTIVATING);\r\n\r\n    // Clear if a reconnection was scheduled\r\n    if (this._reconnector) {\r\n      clearTimeout(this._reconnector);\r\n      this._reconnector = undefined;\r\n    }\r\n\r\n    if (\r\n      this._stompHandler &&\r\n      // @ts-ignore - if there is a _stompHandler, there is the webSocket\r\n      this.webSocket.readyState !== StompSocketState.CLOSED\r\n    ) {\r\n      const origOnWebSocketClose = this._stompHandler.onWebSocketClose;\r\n      // we need to wait for the underlying websocket to close\r\n      retPromise = new Promise<void>((resolve, reject) => {\r\n        // @ts-ignore - there is a _stompHandler\r\n        this._stompHandler.onWebSocketClose = evt => {\r\n          origOnWebSocketClose(evt);\r\n          resolve();\r\n        };\r\n      });\r\n    } else {\r\n      // indicate that auto reconnect loop should terminate\r\n      this._changeState(ActivationState.INACTIVE);\r\n      return Promise.resolve();\r\n    }\r\n\r\n    if (force) {\r\n      this._stompHandler?.discardWebsocket();\r\n    } else if (needToDispose) {\r\n      this._disposeStompHandler();\r\n    }\r\n\r\n    return retPromise;\r\n  }\r\n\r\n  /**\r\n   * Force disconnect if there is an active connection by directly closing the underlying WebSocket.\r\n   * This is different from a normal disconnect where a DISCONNECT sequence is carried out with the broker.\r\n   * After forcing disconnect, automatic reconnect will be attempted.\r\n   * To stop further reconnects call [Client#deactivate]{@link Client#deactivate} as well.\r\n   */\r\n  public forceDisconnect() {\r\n    if (this._stompHandler) {\r\n      this._stompHandler.forceDisconnect();\r\n    }\r\n  }\r\n\r\n  private _disposeStompHandler() {\r\n    // Dispose STOMP Handler\r\n    if (this._stompHandler) {\r\n      this._stompHandler.dispose();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a message to a named destination. Refer to your STOMP broker documentation for types\r\n   * and naming of destinations.\r\n   *\r\n   * STOMP protocol specifies and suggests some headers and also allows broker-specific headers.\r\n   *\r\n   * `body` must be String.\r\n   * You will need to covert the payload to string in case it is not string (e.g. JSON).\r\n   *\r\n   * To send a binary message body, use `binaryBody` parameter. It should be a\r\n   * [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array).\r\n   * Sometimes brokers may not support binary frames out of the box.\r\n   * Please check your broker documentation.\r\n   *\r\n   * `content-length` header is automatically added to the STOMP Frame sent to the broker.\r\n   * Set `skipContentLengthHeader` to indicate that `content-length` header should not be added.\r\n   * For binary messages, `content-length` header is always added.\r\n   *\r\n   * Caution: The broker will, most likely, report an error and disconnect\r\n   * if the message body has NULL octet(s) and `content-length` header is missing.\r\n   *\r\n   * ```javascript\r\n   *        client.publish({destination: \"/queue/test\", headers: {priority: 9}, body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Only destination is mandatory parameter\r\n   *        client.publish({destination: \"/queue/test\", body: \"Hello, STOMP\"});\r\n   *\r\n   *        // Skip content-length header in the frame to the broker\r\n   *        client.publish({\"/queue/test\", body: \"Hello, STOMP\", skipContentLengthHeader: true});\r\n   *\r\n   *        var binaryData = generateBinaryData(); // This need to be of type Uint8Array\r\n   *        // setting content-type header is not mandatory, however a good practice\r\n   *        client.publish({destination: '/topic/special', binaryBody: binaryData,\r\n   *                         headers: {'content-type': 'application/octet-stream'}});\r\n   * ```\r\n   */\r\n  public publish(params: IPublishParams) {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.publish(params);\r\n  }\r\n\r\n  private _checkConnection() {\r\n    if (!this.connected) {\r\n      throw new TypeError('There is no underlying STOMP connection');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * STOMP brokers may carry out operation asynchronously and allow requesting for acknowledgement.\r\n   * To request an acknowledgement, a `receipt` header needs to be sent with the actual request.\r\n   * The value (say receipt-id) for this header needs to be unique for each use.\r\n   * Typically, a sequence, a UUID, a random number or a combination may be used.\r\n   *\r\n   * A complaint broker will send a RECEIPT frame when an operation has actually been completed.\r\n   * The operation needs to be matched based on the value of the receipt-id.\r\n   *\r\n   * This method allows watching for a receipt and invoking the callback\r\n   *  when the corresponding receipt has been received.\r\n   *\r\n   * The actual {@link IFrame} will be passed as parameter to the callback.\r\n   *\r\n   * Example:\r\n   * ```javascript\r\n   *        // Subscribing with acknowledgement\r\n   *        let receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *\r\n   *        client.subscribe(TEST.destination, onMessage, {receipt: receiptId});\r\n   *\r\n   *\r\n   *        // Publishing with acknowledgement\r\n   *        receiptId = randomText();\r\n   *\r\n   *        client.watchForReceipt(receiptId, function() {\r\n   *          // Will be called after server acknowledges\r\n   *        });\r\n   *        client.publish({destination: TEST.destination, headers: {receipt: receiptId}, body: msg});\r\n   * ```\r\n   */\r\n  public watchForReceipt(receiptId: string, callback: frameCallbackType): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.watchForReceipt(receiptId, callback);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to a STOMP Broker location. The callback will be invoked for each\r\n   * received message with the {@link IMessage} as argument.\r\n   *\r\n   * Note: The library will generate a unique ID if there is none provided in the headers.\r\n   *       To use your own ID, pass it using the `headers` argument.\r\n   *\r\n   * ```javascript\r\n   *        callback = function(message) {\r\n   *        // called when the client receives a STOMP message from the server\r\n   *          if (message.body) {\r\n   *            alert(\"got message with body \" + message.body)\r\n   *          } else {\r\n   *            alert(\"got empty message\");\r\n   *          }\r\n   *        });\r\n   *\r\n   *        var subscription = client.subscribe(\"/queue/test\", callback);\r\n   *\r\n   *        // Explicit subscription id\r\n   *        var mySubId = 'my-subscription-id-001';\r\n   *        var subscription = client.subscribe(destination, callback, { id: mySubId });\r\n   * ```\r\n   */\r\n  public subscribe(\r\n    destination: string,\r\n    callback: messageCallbackType,\r\n    headers: StompHeaders = {}\r\n  ): StompSubscription {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    return this._stompHandler.subscribe(destination, callback, headers);\r\n  }\r\n\r\n  /**\r\n   * It is preferable to unsubscribe from a subscription by calling\r\n   * `unsubscribe()` directly on {@link StompSubscription} returned by `client.subscribe()`:\r\n   *\r\n   * ```javascript\r\n   *        var subscription = client.subscribe(destination, onmessage);\r\n   *        // ...\r\n   *        subscription.unsubscribe();\r\n   * ```\r\n   *\r\n   * See: https://stomp.github.com/stomp-specification-1.2.html#UNSUBSCRIBE UNSUBSCRIBE Frame\r\n   */\r\n  public unsubscribe(id: string, headers: StompHeaders = {}): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.unsubscribe(id, headers);\r\n  }\r\n\r\n  /**\r\n   * Start a transaction, the returned {@link ITransaction} has methods - [commit]{@link ITransaction#commit}\r\n   * and [abort]{@link ITransaction#abort}.\r\n   *\r\n   * `transactionId` is optional, if not passed the library will generate it internally.\r\n   */\r\n  public begin(transactionId?: string): ITransaction {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    return this._stompHandler.begin(transactionId);\r\n  }\r\n\r\n  /**\r\n   * Commit a transaction.\r\n   *\r\n   * It is preferable to commit a transaction by calling [commit]{@link ITransaction#commit} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.commit();\r\n   * ```\r\n   */\r\n  public commit(transactionId: string): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.commit(transactionId);\r\n  }\r\n\r\n  /**\r\n   * Abort a transaction.\r\n   * It is preferable to abort a transaction by calling [abort]{@link ITransaction#abort} directly on\r\n   * {@link ITransaction} returned by [client.begin]{@link Client#begin}.\r\n   *\r\n   * ```javascript\r\n   *        var tx = client.begin(txId);\r\n   *        //...\r\n   *        tx.abort();\r\n   * ```\r\n   */\r\n  public abort(transactionId: string): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.abort(transactionId);\r\n  }\r\n\r\n  /**\r\n   * ACK a message. It is preferable to acknowledge a message by calling [ack]{@link IMessage#ack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // acknowledge it\r\n   *          message.ack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\r\n  public ack(\r\n    messageId: string,\r\n    subscriptionId: string,\r\n    headers: StompHeaders = {}\r\n  ): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.ack(messageId, subscriptionId, headers);\r\n  }\r\n\r\n  /**\r\n   * NACK a message. It is preferable to acknowledge a message by calling [nack]{@link IMessage#nack} directly\r\n   * on the {@link IMessage} handled by a subscription callback:\r\n   *\r\n   * ```javascript\r\n   *        var callback = function (message) {\r\n   *          // process the message\r\n   *          // an error occurs, nack it\r\n   *          message.nack();\r\n   *        };\r\n   *        client.subscribe(destination, callback, {'ack': 'client'});\r\n   * ```\r\n   */\r\n  public nack(\r\n    messageId: string,\r\n    subscriptionId: string,\r\n    headers: StompHeaders = {}\r\n  ): void {\r\n    this._checkConnection();\r\n    // @ts-ignore - we already checked that there is a _stompHandler, and it is connected\r\n    this._stompHandler.nack(messageId, subscriptionId, headers);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}