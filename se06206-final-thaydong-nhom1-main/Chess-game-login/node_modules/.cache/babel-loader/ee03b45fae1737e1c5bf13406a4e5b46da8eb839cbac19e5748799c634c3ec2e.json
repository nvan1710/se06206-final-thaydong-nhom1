{"ast":null,"code":"var _jsxFileName = \"D:\\\\se06206-final-thaydong-nhom1-main\\\\se06206-final-thaydong-nhom1-main\\\\Chess-game-login\\\\src\\\\components\\\\ChessBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { getValidMoves } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\";\nimport pieceImages from \"../assets/pieceImages\";\nimport { connectWebSocket, sendMove } from \"../websocket\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ItemTypes = {\n  PIECE: \"piece\"\n};\nconst Chessboard = () => {\n  _s();\n  const [board, setBoard] = useState(initialBoardSetup.map(row => [...row]));\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(true);\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [gameMessage, setGameMessage] = useState(\"üé≠ New Game Started! White's Turn\");\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard(prevBoard => {\n      var _newBoard$fromRow;\n      if (!prevBoard || !Array.isArray(prevBoard) || !prevBoard[fromRow]) {\n        console.error(\"Invalid board state\", prevBoard);\n        return prevBoard;\n      }\n      const newBoard = prevBoard.map(row => [...row]);\n      const piece = (_newBoard$fromRow = newBoard[fromRow]) === null || _newBoard$fromRow === void 0 ? void 0 : _newBoard$fromRow[fromCol];\n      if (!piece) return prevBoard;\n      const validMoves = getValidMoves(piece, fromRow, fromCol, prevBoard);\n      if (!validMoves.some(move => move.row === toRow && move.col === toCol)) {\n        return prevBoard;\n      }\n      newBoard[toRow][toCol] = piece;\n      newBoard[fromRow][fromCol] = \"\";\n      setMoveHistory(prev => [...prev, `${piece} ${String.fromCharCode(97 + fromCol)}${8 - fromRow} ‚Üí ${String.fromCharCode(97 + toCol)}${8 - toRow}`]);\n      const nextTurn = !currentTurn;\n      const kingPos = findKingPosition(newBoard, nextTurn);\n      const kingCheck = isKingInCheck(newBoard, nextTurn);\n      const checkmate = isCheckmate(newBoard, nextTurn);\n      setCurrentTurn(nextTurn);\n      setIsCheck(kingCheck);\n      setCheckedKing(kingCheck ? kingPos : null);\n      setIsCheckMate(checkmate);\n      setSelectedPiece(null);\n      setValidMoves([]);\n      if (checkmate) {\n        setGameMessage(`üèÜ Checkmate! ${currentTurn ? \"Black Wins!\" : \"White Wins!\"}`);\n      } else if (kingCheck) {\n        setGameMessage(`üî• ${currentTurn ? \"White\" : \"Black\"} King is in check! üî•`);\n      } else {\n        setGameMessage(`üé≠ Current Turn: ${nextTurn ? \"White\" : \"Black\"}`);\n      }\n      sendMove({\n        fromRow,\n        fromCol,\n        toRow,\n        toCol,\n        piece\n      });\n      return newBoard;\n    });\n  };\n  useEffect(() => {\n    connectWebSocket(moveData => {\n      setBoard(prevBoard => {\n        if (!prevBoard || !Array.isArray(prevBoard)) return prevBoard;\n        const newBoard = prevBoard.map(row => row ? [...row] : []);\n        if (!newBoard[moveData.toRow]) newBoard[moveData.toRow] = [];\n        newBoard[moveData.toRow][moveData.toCol] = moveData.piece;\n        newBoard[moveData.fromRow][moveData.fromCol] = \"\";\n        return newBoard;\n      });\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"min-h-screen flex flex-col justify-center items-center bg-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-2xl font-bold mb-4\",\n        children: \"\\u265F\\uFE0F Chess Game \\u265F\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), gameMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-2 bg-yellow-300 text-black px-4 py-2 rounded text-center font-bold shadow-md\",\n        children: gameMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Chessboard, \"B0lE3inglBDLNVPYzaSU2UXu7+A=\");\n_c = Chessboard;\nexport default Chessboard;\nvar _c;\n$RefreshReg$(_c, \"Chessboard\");","map":{"version":3,"names":["React","useState","useEffect","useDrag","useDrop","DndProvider","HTML5Backend","getValidMoves","initialBoardSetup","isKingInCheck","isCheckmate","findKingPosition","pieceImages","connectWebSocket","sendMove","jsxDEV","_jsxDEV","ItemTypes","PIECE","Chessboard","_s","board","setBoard","map","row","moveHistory","setMoveHistory","currentTurn","setCurrentTurn","isCheck","setIsCheck","isCheckMate","setIsCheckMate","checkedKing","setCheckedKing","selectedPiece","setSelectedPiece","validMoves","setValidMoves","gameMessage","setGameMessage","movePiece","fromRow","fromCol","toRow","toCol","prevBoard","_newBoard$fromRow","Array","isArray","console","error","newBoard","piece","some","move","col","prev","String","fromCharCode","nextTurn","kingPos","kingCheck","checkmate","moveData","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/se06206-final-thaydong-nhom1-main/se06206-final-thaydong-nhom1-main/Chess-game-login/src/components/ChessBoard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDrag, useDrop, DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { getValidMoves } from \"../utils/moveRules\";\nimport { initialBoardSetup } from \"../config/boardSetup\";\nimport { isKingInCheck, isCheckmate, findKingPosition } from \"../utils/checkmate\";\nimport pieceImages from \"../assets/pieceImages\";\nimport { connectWebSocket, sendMove } from \"../websocket\"; \nconst ItemTypes = { PIECE: \"piece\" };\n\nconst Chessboard = () => {\n  const [board, setBoard] = useState(initialBoardSetup.map(row => [...row]));\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [currentTurn, setCurrentTurn] = useState(true);\n  const [isCheck, setIsCheck] = useState(false);\n  const [isCheckMate, setIsCheckMate] = useState(false);\n  const [checkedKing, setCheckedKing] = useState(null);\n  const [selectedPiece, setSelectedPiece] = useState(null);\n  const [validMoves, setValidMoves] = useState([]);\n  const [gameMessage, setGameMessage] = useState(\"üé≠ New Game Started! White's Turn\");\n\n  const movePiece = (fromRow, fromCol, toRow, toCol) => {\n    setBoard((prevBoard) => {\n      if (!prevBoard || !Array.isArray(prevBoard) || !prevBoard[fromRow]) {\n        console.error(\"Invalid board state\", prevBoard);\n        return prevBoard;\n      }\n      \n      const newBoard = prevBoard.map(row => [...row]);\n      const piece = newBoard[fromRow]?.[fromCol];\n      if (!piece) return prevBoard;\n\n      const validMoves = getValidMoves(piece, fromRow, fromCol, prevBoard);\n      if (!validMoves.some((move) => move.row === toRow && move.col === toCol)) {\n        return prevBoard;\n      }\n\n      newBoard[toRow][toCol] = piece;\n      newBoard[fromRow][fromCol] = \"\";\n\n      setMoveHistory((prev) => [...prev, `${piece} ${String.fromCharCode(97 + fromCol)}${8 - fromRow} ‚Üí ${String.fromCharCode(97 + toCol)}${8 - toRow}`]);\n\n      const nextTurn = !currentTurn;\n      const kingPos = findKingPosition(newBoard, nextTurn);\n      const kingCheck = isKingInCheck(newBoard, nextTurn);\n      const checkmate = isCheckmate(newBoard, nextTurn);\n\n      setCurrentTurn(nextTurn);\n      setIsCheck(kingCheck);\n      setCheckedKing(kingCheck ? kingPos : null);\n      setIsCheckMate(checkmate);\n      setSelectedPiece(null);\n      setValidMoves([]);\n\n      if (checkmate) {\n        setGameMessage(`üèÜ Checkmate! ${currentTurn ? \"Black Wins!\" : \"White Wins!\"}`);\n      } else if (kingCheck) {\n        setGameMessage(`üî• ${currentTurn ? \"White\" : \"Black\"} King is in check! üî•`);\n      } else {\n        setGameMessage(`üé≠ Current Turn: ${nextTurn ? \"White\" : \"Black\"}`);\n      }\n\n      sendMove({ fromRow, fromCol, toRow, toCol, piece });\n      return newBoard;\n    });\n  };\n\n  useEffect(() => {\n    connectWebSocket((moveData) => {\n      setBoard((prevBoard) => {\n        if (!prevBoard || !Array.isArray(prevBoard)) return prevBoard;\n        \n        const newBoard = prevBoard.map(row => row ? [...row] : []);\n        if (!newBoard[moveData.toRow]) newBoard[moveData.toRow] = [];\n        \n        newBoard[moveData.toRow][moveData.toCol] = moveData.piece;\n        newBoard[moveData.fromRow][moveData.fromCol] = \"\";\n        return newBoard;\n      });\n    });\n  }, []);\n\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <div className=\"min-h-screen flex flex-col justify-center items-center bg-gray-200\">\n        <h1 className=\"text-2xl font-bold mb-4\">‚ôüÔ∏è Chess Game ‚ôüÔ∏è</h1>\n        {gameMessage && (\n          <div className=\"mb-2 bg-yellow-300 text-black px-4 py-2 rounded text-center font-bold shadow-md\">\n            {gameMessage}\n          </div>\n        )}\n      </div>\n    </DndProvider>\n  );\n};\n\nexport default Chessboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}